import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.B_s5ISUx.js";const g=JSON.parse('{"title":"複数アセットをまとめて扱う","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v3/assetPaths.md","filePath":"tutorial/v3/assetPaths.md"}'),e={name:"tutorial/v3/assetPaths.md"},l=t(`<h1 id="複数アセットをまとめて扱う" tabindex="-1">複数アセットをまとめて扱う <a class="header-anchor" href="#複数アセットをまとめて扱う" aria-label="Permalink to &quot;複数アセットをまとめて扱う&quot;">​</a></h1><p>ゲームが複雑になると、利用するアセットも多くなり、それを扱うコードも煩雑になりがちです。 Akashic Engine は、アセットを複数まとめて管理しやすくするためのいくつかの機能を提供しています。</p><h2 id="assets-dir" tabindex="-1">assets/ ディレクトリ <a class="header-anchor" href="#assets-dir" aria-label="Permalink to &quot;assets/ ディレクトリ {#assets-dir}&quot;">​</a></h2><p>これまでの文書では、画像アセットは <code>image/</code> 、オーディオアセットは <code>audio/</code> など、アセットの種類別にフォルダが分かれていました。 これは <code>akashic scan asset</code> コマンドが、それらのディレクトリを検索する仕様になっているためです。 しかし複雑なゲームでは、アセットを種類ではなく意味で分類・整理したいかもしれません。 たとえばステージごとにマップデータと BGM と画像をまとめて保存する、という形にしたくなるかもしれません。</p><p>このような場合には、 <code>assets/</code> ディレクトリが利用できます。 これは <code>akashic scan asset</code> コマンドがアセットを検索するディレクトリの一つです (akashic-cli v1.14.3 から) 。 ただし他のディレクトリと次の点で異なります:</p><ul><li>アセットの種別が、ファイルの拡張子から自動的に決定される <ul><li>image: 拡張子が png, jpg, jpeg のファイル</li><li>audio: 拡張子が ogg, m4a, aac のファイル</li><li>script: 拡張子が js のファイル</li><li>text: 上記以外の拡張子のファイル</li></ul></li><li>アセット ID が不定になる</li></ul><p>これによりたとえば次のようなフォルダ構造が可能になります:</p><ul><li>assets/ <ul><li>stage1/ <ul><li>map.json</li><li>background.png</li><li>bgm.m4a</li><li>bgm.ogg</li></ul></li><li>stage2/ <ul><li>map.json</li><li>background.png</li><li>bgm.m4a</li><li>bgm.ogg</li></ul></li></ul></li></ul><p><code>assets/</code> 以外のディレクトリでは、アセット ID はファイル名の basename (拡張子を抜いた部分) になります。 しかしこれには「basename が重複するアセットを一切作れない」という制限がつきます。 たとえば上の例に似た <code>audio/stage1/bgm.m4a</code> と <code>audio/stage2/bgm.m4a</code> を置くと、アセット ID が <code>bgm</code> で重複してエラーになります。</p><p><code>assets/</code> ディレクトリは、この問題を回避するため、そもそもアセット ID を保証しません。 これにより basename の重複したアセットを許容します。ただしアセット ID でのアクセスはできなくなります (不定のため)。</p><h2 id="asset-paths" tabindex="-1">複数アセットの一括ロード指定 <a class="header-anchor" href="#asset-paths" aria-label="Permalink to &quot;複数アセットの一括ロード指定 {#asset-paths}&quot;">​</a></h2><p>ここまでの文書では <code>assetPaths</code> にファイルパスを全て書いていましたが、glob を使って一括で指定することもできます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-GGQ6u" id="tab-ocwzihN" checked><label for="tab-ocwzihN">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  game: g.game,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  assetPaths: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/image/character01.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/assets/**/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><p>この例でも使っているように、アセットパス形式では glob のサブセット文法(<code>**</code>, <code>*</code>, <code>?</code>) をサポートしています。</p><ul><li><code>**</code> はあらゆるファイルや 0 個以上のディレクトリ、サブディレクトリにマッチします。</li><li><code>*</code> は 0 文字以上任意の文字列にマッチします。</li><li><code>?</code> は任意の 1 文字にマッチします。</li></ul><p>上記サンプルコードの <code>assetPaths</code> のグロブ指定(<code>&quot;/assets/**/*&quot;</code>)では、assets ディレクトリに下記のようなファイルが存在する場合、全てのファイルが対象となります。(対応するアセットが game.json に登録されている必要は引き続きあります)</p><ul><li>/assets/scenarios/scenario1.txt</li><li>/assets/scenarios/scenario2.txt</li><li>/assets/map.json</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>不要なアセットを読み込むとロード時間が延びてユーザ体験が悪化するので、 <code>/**/*</code> のような指定は注意してください。</p></div><h2 id="get-asset-by-path" tabindex="-1">複数アセットの一括取得 <a class="header-anchor" href="#get-asset-by-path" aria-label="Permalink to &quot;複数アセットの一括取得 {#get-asset-by-path}&quot;">​</a></h2><p>複数アセットの一括ロード同様に、アセットの取得もグロブを利用して一括で取得することができます。 これには <code>getAllImages()</code>, <code>getAllAudios()</code> などのメソッドを利用します。<code>getAllImages()</code> などの glob による複数検索では、該当するアセットの配列を返します。 アセットの指定には <code>assetPaths</code> と同様に glob のサブセット文法(<code>**</code>, <code>*</code>, <code>?</code>) を利用できます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-FHgL0" id="tab-LntGbR_" checked><label for="tab-LntGbR_">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 複数の画像アセットの取得</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> thumbnails</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllImages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/assets/**/*.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thumbnails.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> thumbnail</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sprite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    src: thumbnails[i],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    width: thumbnails[i].width,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    height: thumbnails[i].height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 複数のオーディオアセットの取得</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> audios</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllAudios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/audio/bgm*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> audios.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    audios[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div>`,21),n=[l];function h(p,k,d,c,o,r){return a(),i("div",null,n)}const y=s(e,[["render",h]]);export{g as __pageData,y as default};
