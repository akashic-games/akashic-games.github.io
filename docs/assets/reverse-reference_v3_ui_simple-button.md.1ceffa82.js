import{_ as a,C as l,o,c as p,H as e,Q as s}from"./chunks/framework.459ab1e9.js";const B=JSON.parse('{"title":"シンプルなボタンを作る","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/ui/simple-button.md","filePath":"reverse-reference/v3/ui/simple-button.md"}'),t={name:"reverse-reference/v3/ui/simple-button.md"},c=s(`<h1 id="シンプルなボタンを作る" tabindex="-1">シンプルなボタンを作る <a class="header-anchor" href="#シンプルなボタンを作る" aria-label="Permalink to &quot;シンプルなボタンを作る&quot;">​</a></h1><p><code>onPointDown</code> トリガーを利用し、任意のエンティティが押下された時の処理を記述できます。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rectButton</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({ </span><span style="color:#6A737D;">// g.Sprite や g.Label などでも可</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">  cssColor: </span><span style="color:#9ECBFF;">&quot;#000000&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: </span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  height: </span><span style="color:#79B8FF;">65</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  touchable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// クリック・タッチ操作できるエンティティにする</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// ポイントダウン時に半透明にする</span></span>
<span class="line"><span style="color:#E1E4E8;">rectButton.onPointDown.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ここにボタンが押された時の処理を記述</span></span>
<span class="line"><span style="color:#E1E4E8;">  rectButton.opacity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  rectButton.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// ポイントアップ時に透明度を戻す</span></span>
<span class="line"><span style="color:#E1E4E8;">rectButton.onPointUp.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ここにボタンから離れた時の処理を記述</span></span>
<span class="line"><span style="color:#E1E4E8;">  rectButton.opacity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  rectButton.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(rectButton);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rectButton</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({ </span><span style="color:#6A737D;">// g.Sprite や g.Label などでも可</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">  cssColor: </span><span style="color:#032F62;">&quot;#000000&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  width: </span><span style="color:#005CC5;">150</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  height: </span><span style="color:#005CC5;">65</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  touchable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// クリック・タッチ操作できるエンティティにする</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// ポイントダウン時に半透明にする</span></span>
<span class="line"><span style="color:#24292E;">rectButton.onPointDown.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">((</span><span style="color:#E36209;">ev</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ここにボタンが押された時の処理を記述</span></span>
<span class="line"><span style="color:#24292E;">  rectButton.opacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  rectButton.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// ポイントアップ時に透明度を戻す</span></span>
<span class="line"><span style="color:#24292E;">rectButton.onPointUp.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ここにボタンから離れた時の処理を記述</span></span>
<span class="line"><span style="color:#24292E;">  rectButton.opacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  rectButton.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(rectButton);</span></span></code></pre></div><h2 id="利用例" tabindex="-1">利用例 <a class="header-anchor" href="#利用例" aria-label="Permalink to &quot;利用例&quot;">​</a></h2><p>次のコンテンツは、<code>g.FilledRect</code>, <code>g.Label</code> を組み合わせたボタンを配置しています。クリックでボタンの背景色は半透明となります。</p>`,6),r=s('<h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><p><code>g.FilledRect</code> と <code>g.Label</code> を組み合わせボタンを実現しています。 ボタンの形となる <code>g.FilledRect</code> に <code>onPointDown</code> でクリック時の動作、<code>onPointUp</code> でクリックが離れた時の動作を追加しています。</p><h2 id="関連情報" tabindex="-1">関連情報 <a class="header-anchor" href="#関連情報" aria-label="Permalink to &quot;関連情報&quot;">​</a></h2><ul><li><a href="/reverse-reference/v3/operation/click.html">クリック・タップできるようにする</a></li><li><a href="/reverse-reference/v3/drawing/multiple-entities.html">複数のエンティティをまとめて扱う</a></li></ul>',4);function E(y,i,d,u,h,F){const n=l("PlaygroundElement");return o(),p("div",null,[c,e(n,{gameJsonUri:"/snippets/reverse-reference/ui/simple-button/game.json",width:600,height:400}),r])}const m=a(t,[["render",E]]);export{B as __pageData,m as default};
