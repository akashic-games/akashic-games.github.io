import{_ as s,c as i,o as a,a3 as e}from"./chunks/framework.DaCD_bki.js";const t="/assets/defaultloadingscene-compact.CiIngm1v.png",y=JSON.parse('{"title":"v2 からの移行","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v3/v3-migration-guide.md","filePath":"tutorial/v3/v3-migration-guide.md"}'),n={name:"tutorial/v3/v3-migration-guide.md"},l=e(`<h1 id="v2-からの移行" tabindex="-1">v2 からの移行 <a class="header-anchor" href="#v2-からの移行" aria-label="Permalink to &quot;v2 からの移行&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>このページは、 <strong>Akashic Engine v2 で作成されたコンテンツを v3 に移行する</strong> ためのものです。 新たにゲームを作成する場合は次の <a href="./introduction.html">Akashic Engine 入門 » akashic の導入</a> に進んでください。</p></div><p>Akashic Engine v3 では、v2 から主に内部構造を整理したバージョンですが、一部破壊的に変更した仕様があり、ゲーム開発者に影響します。 この文書では、Akashic Engine v2 系で作成されたコンテンツを v3 に移行するために必要な作業と、主な追加機能を紹介します。</p><h3 id="目次" tabindex="-1">目次 <a class="header-anchor" href="#目次" aria-label="Permalink to &quot;目次&quot;">​</a></h3><ul><li><a href="#settings">設定の更新 (必須)</a></li><li><a href="#breaking-changes">仕様変更への追従 (必須)</a></li><li><a href="#deprecation">非推奨機能の変更</a></li><li><a href="#features">機能追加・変更</a></li></ul><h2 id="settings" tabindex="-1">設定の更新 (必須) <a class="header-anchor" href="#settings" aria-label="Permalink to &quot;設定の更新 (必須) {#settings}&quot;">​</a></h2><p>v2 で作られたコンテンツを v3 に移行するには、次の作業が必要です。</p><ul><li>game.json を変更して v3 コンテンツとして扱うよう設定する</li><li>(TypeScript のみ) 型定義ファイルを index.runtime.d.ts に移行する</li><li>(TypeScript のみ) allowUmdGlobalAccess オプションを有効にする</li></ul><p>これらは v2 系で作られた全てのゲームで必要です。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>akashic-cli の最新バージョンを用いて <code>akashic init -t javascript</code> などを実行した場合、これらの作業はすべて済んだ状態で生成されます。 あくまでも Akashic Engine v2 で作成されたコンテンツを Akashic Engine v3 へ移行する場合に必要な作業です。</p></div><h3 id="game-json-の-sandbox-runtime-を-3-にする" tabindex="-1">game.json の sandbox-runtime を &quot;3&quot; にする <a class="header-anchor" href="#game-json-の-sandbox-runtime-を-3-にする" aria-label="Permalink to &quot;game.json の sandbox-runtime を &quot;3&quot; にする&quot;">​</a></h3><p>ゲームディレクトリにある game.json を編集して、 <code>environment</code> プロパティ内の <code>sandbox-rutnime</code> の値を <code>&quot;3&quot;</code> に変更してください。</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &quot;environment&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-    &quot;sandbox-runtime&quot;: &quot;2&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+    &quot;sandbox-runtime&quot;: &quot;3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p><code>akashic sandbox</code> や <code>akashic serve</code> コマンドは、この値によってゲームの実行に利用するエンジンのバージョンを決めています。</p><h3 id="typescript-のみ-開発時に参照する型定義ファイルを-lib-main-d-ts-から-index-runtime-d-ts-へ" tabindex="-1">(TypeScript のみ) 開発時に参照する型定義ファイルを &quot;lib/main.d.ts&quot; から &quot;index.runtime.d.ts&quot; へ <a class="header-anchor" href="#typescript-のみ-開発時に参照する型定義ファイルを-lib-main-d-ts-から-index-runtime-d-ts-へ" aria-label="Permalink to &quot;(TypeScript のみ) 開発時に参照する型定義ファイルを &quot;lib/main.d.ts&quot; から &quot;index.runtime.d.ts&quot; へ&quot;">​</a></h3><p>TypeScript で開発している場合、型定義ファイルも v3 系のものを利用する必要があります。また v3 系ではこの型定義ファイル名が変更されています。</p><p>まず次のコマンドで Akashic Engine v3 をインストールします。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @akashic/akashic-engine@3</span></span></code></pre></div><p>型定義ファイルが <code>lib/main.d.ts</code> から <code>index.runtime.d.ts</code> に変更されているので、 tsconfig.json の <code>files</code> プロパティを下記のように変更します。</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;files&quot;: [</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-   &quot;node_modules/@akashic/akashic-engine/lib/main.d.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+   &quot;node_modules/@akashic/akashic-engine/index.runtime.d.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span></code></pre></div><h3 id="typescript-のみ-allowumdglobalaccess-を有効にする" tabindex="-1">(TypeScript のみ) allowUmdGlobalAccess を有効にする <a class="header-anchor" href="#typescript-のみ-allowumdglobalaccess-を有効にする" aria-label="Permalink to &quot;(TypeScript のみ) allowUmdGlobalAccess を有効にする&quot;">​</a></h3><p>エンジン内部の変更のため、 TypeScript コンパイル時のオプションとして <code>--allowUmdGlobalAccess</code> が必要になりました。</p><p>tsconfig.json の <code>compilerOptions</code> プロパティに <code>allowUmdGlobalAccess</code> (<code>--</code> なし) を追加します。</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;compilerOptions&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+   &quot;allowUmdGlobalAccess&quot;: true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><p><code>--allowUmdGlobalAccess</code> が必須になるため、TypeScript の要求バージョンが 3.5 以上になります。 バージョン 3.5 未満の場合は、TypeScript を 3.5 以上に更新してください。</p><h2 id="breaking-changes" tabindex="-1">仕様変更への追従 (必須) <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;仕様変更への追従 (必須) {#breaking-changes}&quot;">​</a></h2><p>v3 では、v2 での非推奨機能の廃止を中心に、いくつかの仕様変更が行われています。 当該の機能を利用している場合は追従が必要になります。</p><h3 id="anchor-point" tabindex="-1">アンカーポイント未指定時の回転・拡縮の基準点が左上に <a class="header-anchor" href="#anchor-point" aria-label="Permalink to &quot;アンカーポイント未指定時の回転・拡縮の基準点が左上に {#anchor-point}&quot;">​</a></h3><p>v2 では、アンカーポイント未指定 (デフォルト) の場合、「座標 (x, y) の基点はエンティティの左上、回転・拡大縮小の基点はエンティティの中央」になっていました。 一方で、アンカーポイントを指定した場合は、座標・回転・拡大縮小の基点が全てアンカーポイントの位置になっていました。</p><p>Akashic Engine v3 からはこの不整合を解消して単純化します: <strong>アンカーポイントのデフォルト値は (0, 0) になります</strong> 。つまり、特に指定してしない場合、座標・回転・拡大縮小の基点はエンティティの左上端に統一されます。</p><p>なお移行措置として、 <code>g.E#anchorX</code> または <code>g.E#anchorY</code> に明示的に <code>null</code> を指定することで v2 のデフォルトの挙動を再現できます。これは非推奨の挙動です。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-N_Lc0" id="tab-1CoJKOI" checked><label for="tab-1CoJKOI">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    anchorX: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 前バージョンのデフォルト挙動の再現</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><h3 id="game-random-0-の廃止" tabindex="-1">Game#random[0] の廃止 <a class="header-anchor" href="#game-random-0-の廃止" aria-label="Permalink to &quot;Game#random[0] の廃止&quot;">​</a></h3><p>非推奨だった <code>g.game.random[0]</code> が廃止されます。同じ形で利用できる <code>g.game.random</code> を利用してください。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-TrmJt" id="tab-XzLe1o0" checked><label for="tab-XzLe1o0">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></div></div><h3 id="scene-settimeout-scene-setinterval-の一部引数順序のメソッドの廃止" tabindex="-1">Scene#setTimeout(), Scene#setInterval() の一部引数順序のメソッドの廃止 <a class="header-anchor" href="#scene-settimeout-scene-setinterval-の一部引数順序のメソッドの廃止" aria-label="Permalink to &quot;Scene#setTimeout(), Scene#setInterval() の一部引数順序のメソッドの廃止&quot;">​</a></h3><p><code>g.Scene#setInterval()</code> および <code>g.Scene#setTimeout()</code> で非推奨だった引数順序のメソッドが廃止になりました。</p><p>下記の形式を利用してください。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, interval: number, owner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> any)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, milliseconds: number, owner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> any)</span></span></code></pre></div><h3 id="systemlabel-の廃止" tabindex="-1">SystemLabel の廃止 <a class="header-anchor" href="#systemlabel-の廃止" aria-label="Permalink to &quot;SystemLabel の廃止&quot;">​</a></h3><p><code>g.SystemLabel</code> および <code>g.Renderer#drawSystemText()</code> が廃止になりました。 <code>g.DynamicFont</code> を利用してください。 <code>DynamicFont</code> の利用は<a href="/tutorial/v3/text.html">こちらのページ</a>を参照してください。</p><h3 id="util-のいくつかのメソッドの移動" tabindex="-1">Util のいくつかのメソッドの移動 <a class="header-anchor" href="#util-のいくつかのメソッドの移動" aria-label="Permalink to &quot;Util のいくつかのメソッドの移動&quot;">​</a></h3><p><code>g.Util</code> の一部メソッドを移動しました。利用している場合は追従が必要となります。</p><ul><li><code>createSpriteFromE()</code>: <code>g.SpriteFactory.createSpriteFromE()</code> を利用してください。</li><li><code>createSpriteFromScene()</code>: <code>g.SpriteFactory.createSpriteFromScene()</code> を利用してください。</li><li><code>asSurface()</code>: <code>g.SurfaceUtil.asSurface()</code> を利用してください。</li><li><code>createMatrix()</code>: 廃止になりました。 <code>new g.PlainMatrix()</code> を利用してください。</li></ul><h3 id="resourcefactory-createtrimmedsurface-の廃止" tabindex="-1">ResourceFactory#createTrimmedSurface()の廃止 <a class="header-anchor" href="#resourcefactory-createtrimmedsurface-の廃止" aria-label="Permalink to &quot;ResourceFactory#createTrimmedSurface()の廃止&quot;">​</a></h3><p>指定した Surface から指定範囲を切り取った Surface を返す <code>g.ResourceFactory#createTrimmedSurface()</code> が廃止になりました。コンテンツ側で下記のような同様の処理を実装する必要があります。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-VN2xO" id="tab-OIu88Bw" checked><label for="tab-OIu88Bw">JavaScript</label><input type="radio" name="group-VN2xO" id="tab-gPcnJTS"><label for="tab-gPcnJTS">TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTrimmedSurface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">targetSurface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">targetArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> surface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.resourceFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSurface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(width, height);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> renderer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> surface.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetSurface,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetArea.x,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetArea.y,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetArea.width,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetArea.height,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> surface;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-TypeScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTrimmedSurface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  targetSurface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Surface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  targetArea</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CommonArea</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Surface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> surface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.resourceFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSurface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(width, height);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> renderer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> surface.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetSurface,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetArea.x,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetArea.y,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetArea.width,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetArea.height,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> surface;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><h3 id="各種-enum-の廃止" tabindex="-1">各種 enum の廃止 <a class="header-anchor" href="#各種-enum-の廃止" aria-label="Permalink to &quot;各種 enum の廃止&quot;">​</a></h3><ul><li><p><code>g.TickGenerationMode</code> が廃止になりました。利用している場合、代わりに <code>g.TickGenerationModeString</code> (<code>&quot;by-clock&quot; | &quot;manual&quot;</code>) を利用してください。</p><ul><li>TypeScript では <code>g.Scene#tickGenerationMode</code> の型が <code>g.TickGenerationModeString</code> になります。</li></ul></li><li><p><code>g.LocalTickMode</code> が廃止になりました。 利用している場合、代わりに <code>g.LocalTickModeString</code> (<code>&quot;full-local&quot; | &quot;non-local&quot; | &quot;interpolate-local&quot;</code>) を利用してください。</p><ul><li>TypeScript では <code>g.Scene#local</code> の型が <code>g.LocalTickModeString</code> になります。</li><li>これにより、 <code>g.Scene#local</code> が boolean だった当時 (v1 系) のコードとは互換性がなくなります。</li></ul><h4 id="前バージョン-v2-x-x-以前-のコード" tabindex="-1">前バージョン(v2.x.x 以前) のコード <a class="header-anchor" href="#前バージョン-v2-x-x-以前-のコード" aria-label="Permalink to &quot;前バージョン(v2.x.x 以前) のコード&quot;">​</a></h4><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-oHMvR" id="tab-63DG9N7" checked><label for="tab-63DG9N7">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tickGenerationMode: g.TickGenerationMode.Manual,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  local: g.LocalTickMode.NonLocal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><h4 id="akashic-engine-v3-のコード" tabindex="-1">Akashic Engine v3 のコード <a class="header-anchor" href="#akashic-engine-v3-のコード" aria-label="Permalink to &quot;Akashic Engine v3 のコード&quot;">​</a></h4><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-uT9iB" id="tab-CXU-fI-" checked><label for="tab-CXU-fI-">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tickGenerationMode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;manual&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  local: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;non-local&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div></li><li><p><code>g.SceneState</code> が廃止になりました。 - <code>g.Scene#state</code> の型, <code>g.Scene#onStateChange</code> の通知する型が <code>g.SceneStateString</code> (<code>&quot;destroyed&quot; | &quot;standby&quot; | &quot;active&quot; | &quot;deactive&quot; | &quot;before-destroyed&quot;</code>) になります。</p><h4 id="前バージョン-v2-x-x-以前-のコード-1" tabindex="-1">前バージョン(v2.x.x 以前) のコード <a class="header-anchor" href="#前バージョン-v2-x-x-以前-のコード-1" aria-label="Permalink to &quot;前バージョン(v2.x.x 以前) のコード&quot;">​</a></h4><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-nIKDa" id="tab-GdzrqmR" checked><label for="tab-GdzrqmR">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scene.stateChanged.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.SceneState.Destroyed) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><h4 id="akashic-engine-v3-のコード-1" tabindex="-1">Akashic Engine v3 のコード <a class="header-anchor" href="#akashic-engine-v3-のコード-1" aria-label="Permalink to &quot;Akashic Engine v3 のコード&quot;">​</a></h4><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-1nqmA" id="tab-lfHsFVW" checked><label for="tab-lfHsFVW">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scene.onStateChange.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;destroyed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div></li></ul><h2 id="deprecation" tabindex="-1">非推奨機能の変更 <a class="header-anchor" href="#deprecation" aria-label="Permalink to &quot;非推奨機能の変更 {#deprecation}&quot;">​</a></h2><p>新たに次の機能が非推奨になります。v3 では旧バージョンとの互換性が維持されますが、移行を推奨します。</p><h3 id="trigger-name" tabindex="-1">Trigger 名の移行 <a class="header-anchor" href="#trigger-name" aria-label="Permalink to &quot;Trigger 名の移行 {#trigger-name}&quot;">​</a></h3><p><code>Game#join</code> や <code>Scene#loaded</code> など、統一感のなかったトリガーの変数名を整理しました。前バージョン(v2.x.x 以前)のトリガーの変数名は非推奨となります。</p><p>下記の表ではトリガー名が変更となった一部のクラスを記述しています。</p><table><thead><tr><th>クラス名</th><th>前バージョン(v2.x.x 以前)のトリガー名</th><th>Akashic Engine v3 のトリガー名</th></tr></thead><tr><td rowspan="4">Game</td><td>join</td><td>onJoin</td></tr><tr><td>leave</td><td>onLeave</td></tr><tr><td>N/A</td><td>onPlayerInfo</td></tr><tr><td>skippingChanged</td><td>onSkipChange</td></tr><tr><td rowspan="11">Scene</td><td>update</td><td>onUpdate</td></tr><tr><td>loaded</td><td>onLoad</td></tr><tr><td>assetLoaded</td><td>onAssetLoad</td></tr><tr><td>assetLoadFailed</td><td>onAssetLoadFailure</td></tr><tr><td>assetLoadCompleted</td><td>onAssetLoadComplete</td></tr><tr><td>stateChanged</td><td>onStateChange</td></tr><tr><td>message</td><td>onMessage</td></tr><tr><td>pointDownCapture</td><td>onPointDownCapture</td></tr><tr><td>pointMoveCapture</td><td>onPointMoveCapture</td></tr><tr><td>pointUpCapture</td><td>onPointUpCapture</td></tr><tr><td>operation</td><td>onOperation</td></tr></table><h3 id="deprecated-enum" tabindex="-1">enum の移行 <a class="header-anchor" href="#deprecated-enum" aria-label="Permalink to &quot;enum の移行 {#deprecated-enum}&quot;">​</a></h3><ul><li><p><code>g.CompositeOperation</code> が非推奨になりました。代わりに (<code>&quot;source-over&quot; | &quot;source-atop&quot; | &quot;lighter&quot; | &quot;copy&quot; | &quot;experimental-source-in&quot; | &quot;experimental-source-out&quot; | &quot;experimental-destination-atop&quot; | &quot;experimental-destination-in&quot; | &quot;destination-out&quot; | &quot;destination-over&quot; | &quot;xor&quot;</code>) を利用してください。</p><h4 id="前バージョン-v2-x-x-以前-のコード-2" tabindex="-1">前バージョン(v2.x.x 以前) のコード <a class="header-anchor" href="#前バージョン-v2-x-x-以前-のコード-2" aria-label="Permalink to &quot;前バージョン(v2.x.x 以前) のコード&quot;">​</a></h4><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-anWEh" id="tab-_1641OU" checked><label for="tab-_1641OU">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> green</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FilledRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  width: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cssColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;green&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compositeOperation: g.CompositeOperation.SourceOver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><h4 id="akashic-engine-v3-のコード-2" tabindex="-1">Akashic Engine v3 のコード <a class="header-anchor" href="#akashic-engine-v3-のコード-2" aria-label="Permalink to &quot;Akashic Engine v3 のコード&quot;">​</a></h4><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-PYS5m" id="tab-RGg4ha4" checked><label for="tab-RGg4ha4">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> green</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FilledRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  width: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cssColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;green&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compositeOperation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source-over&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div></li><li><p><code>g.TextAlign</code> が非推奨になりました。代わりに (<code>&quot;left&quot; | &quot;center&quot; | &quot;right&quot;</code>) を利用してください。</p></li><li><p><code>g.FontWeight</code> が非推奨になりました。 代わりに (<code>&quot;normal&quot; | &quot;bold&quot;</code>) を利用してください。</p></li><li><p><code>g.FontFamily</code> が非推奨になりました。 代わりに <code>&quot;serif&quot; | &quot;sans-serif&quot; | &quot;monospace&quot;</code> を利用してください。</p><h4 id="前バージョン-v2-x-x-以前-のコード-3" tabindex="-1">前バージョン(v2.x.x 以前)のコード <a class="header-anchor" href="#前バージョン-v2-x-x-以前-のコード-3" aria-label="Permalink to &quot;前バージョン(v2.x.x 以前)のコード&quot;">​</a></h4><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-EKo16" id="tab-qTNAvYF" checked><label for="tab-qTNAvYF">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> font</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DynamicFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fontWeight: g.FontWeight.Bold,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fontFamily: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Meiryo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, g.FontFamily.Serif]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  textAlign: g.TextAlign.Center</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><h4 id="akashic-engine-v3-のコード-3" tabindex="-1">Akashic Engine v3 のコード <a class="header-anchor" href="#akashic-engine-v3-のコード-3" aria-label="Permalink to &quot;Akashic Engine v3 のコード&quot;">​</a></h4><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-2IJTt" id="tab-oyBvPkA" checked><label for="tab-oyBvPkA">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> font</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DynamicFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fontWeight: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bold&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fontFamily: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Meiryo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;serif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  textAlign: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;center&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div></li><li><p>上記の変更に伴い互換性維持のため、TypeScript では一部の型が変化します。</p><ul><li><code>g.E#compositeOperation</code>: <code>g.CompositeOperation | g.CompositeOperationString</code> になります。</li><li><code>g.Label#textAlign</code>: <code>g.TextAlign | g.TextAlignString</code> になります。</li><li><code>g.Label#fontWeight</code>: <code>g.FontWeight | g.FontWeightString</code> になります。</li></ul></li></ul><h3 id="randomgenerator-get-の移行" tabindex="-1">RandomGenerator#get() の移行 <a class="header-anchor" href="#randomgenerator-get-の移行" aria-label="Permalink to &quot;RandomGenerator#get() の移行&quot;">​</a></h3><p><code>g.RandomGenerator#get()</code> が非推奨になりました。代わりに <code>g.RandomGenerator#generate()</code> を利用してください。</p><h3 id="ninepatchsurfaceeffector-の移行" tabindex="-1">NinePatchSurfaceEffector の移行 <a class="header-anchor" href="#ninepatchsurfaceeffector-の移行" aria-label="Permalink to &quot;NinePatchSurfaceEffector の移行&quot;">​</a></h3><p><code>g.NinePatchSurfaceEffector</code> が非推奨になりました。代わりに <a href="#drawninepatch">g.SurfaceUtil#drawNinePatch()</a> を利用してください。</p><h2 id="features" tabindex="-1">追加機能など <a class="header-anchor" href="#features" aria-label="Permalink to &quot;追加機能など {#features}&quot;">​</a></h2><h3 id="assetpaths" tabindex="-1">読み込むアセットをファイルパスで複数まとめて指定できるように <a class="header-anchor" href="#assetpaths" aria-label="Permalink to &quot;読み込むアセットをファイルパスで複数まとめて指定できるように {#assetpaths}&quot;">​</a></h3><p>g.Scene のコンストラクタ引数に <code>assetPaths?: string[]</code> が追加されます。</p><p>アセット ID の配列を渡す従来の <code>assetIds?: string[]</code> とは異なり、ファイルパスの配列を渡すことで読み込むアセットを指定できるようになります。 ここでのファイルパスは game.json のあるディレクトリをルート (<code>/</code>) とする スラッシュ区切りの絶対パスとなります。以降これをファイルパス形式と呼びます。</p><p>また、アセットパス形式では glob のサブセット文法(<code>**</code>, <code>*</code>, <code>?</code>) をサポートしています。 (<code>**</code> はあらゆるファイルや 0 個以上のディレクトリ、サブディレクトリにマッチします。 <code>*</code> は 0 文字以上任意の文字列にマッチします。 <code>?</code> は任意の 1 文字にマッチします。)</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Ektl2" id="tab-8Y8ZJZ4" checked><label for="tab-8Y8ZJZ4">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  game: g.game,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  assetPaths: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/image/character01.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/assets/**/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><p>上記サンプルコードの <code>assetPaths</code> のグロブ指定(<code>&quot;/assets/**/*&quot;</code>)では、assets ディレクトリに下記のようなファイルが存在する場合、全てのファイルが対象となります。</p><ul><li>assets/scenarios/scenario1.txt</li><li>assets/scenarios/scenario2.txt</li><li>assets/map.json</li></ul><p>(対応するアセットが game.json に登録されている必要は引き続きあります)</p><h3 id="アセットを-id-やファイルパスで、種類別に取得できるように" tabindex="-1">アセットを ID やファイルパスで、種類別に取得できるように <a class="header-anchor" href="#アセットを-id-やファイルパスで、種類別に取得できるように" aria-label="Permalink to &quot;アセットを ID やファイルパスで、種類別に取得できるように&quot;">​</a></h3><p><code>g.Scene#asset</code> が追加されます。この値は、読み込み済みのアセットを種類別に取得する次のようなメソッドを提供します。</p><ul><li>ファイルパス形式での取得: <code>getImage()</code>, <code>getAudio()</code> など</li><li>ファイルパスのパターンから複数まとめて取得: <code>getAllImages()</code>, <code>getAllAudios()</code> など</li><li>アセット ID からの取得: <code>getImageById()</code>, <code>getAudioById()</code> など</li></ul><p>これによってたとえば次のように、ファイルパス形式でアセットを種類ごとに取得できます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-rcWHy" id="tab-WyNAYEv" checked><label for="tab-WyNAYEv">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 画像アセットの取得</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> playerImage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/assets/player/image.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> player</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sprite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  src: playerImage,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  width: playerImage.width,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  height: playerImage.height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// オーディオアセットの取得</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (game.json での記述同様、オーディオアセットに限り、拡張子抜きで指定する必要があります)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bgm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAudio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/audio/bgm01&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bgm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></div></div><p><code>getAllImages()</code> 等のグロブによる複数検索では、該当するアセットの配列を返します。 アセットの指定には <code>assetPaths</code> と同様に glob のサブセット文法(<code>**</code>, <code>*</code>, <code>?</code>) を利用できます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-1tJG6" id="tab-IQWvBuy" checked><label for="tab-IQWvBuy">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 複数の画像アセットの取得</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> thumbnails</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllImages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/assets/**/*.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thumbnails.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> thumbnail</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sprite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    src: thumbnails[i],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    width: thumbnails[i].width,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    height: thumbnails[i].height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 複数のオーディオアセットの取得</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> audios</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllAudios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/audio/bgm*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> audios.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    audios[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>アセット ID による取得 (<code>getImageById()</code> など) は、<code>g.Scene#assets</code> と同様の機能です。 ただし TypeScript では <code>as g.ImageAsset</code> 等のダウンキャストが不要になります。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// g.Scene#assets でのアセットの取得</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> imageWidth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (scene.assets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImageAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).width;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// getImageById()での取得</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> imageWidth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImageById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).width;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (返り値の型が ImageAsset になっているので、キャストなしで \`width\` にアクセスできます)</span></span></code></pre></div><p><code>g.Scene#assets</code> の完全な機能一覧は <a href="https://akashic-games.github.io/akashic-engine/v3/classes/Scene.html#asset" target="_blank" rel="noreferrer">API リファレンス</a> を参照してください。</p><h3 id="assets-dir" tabindex="-1">assets/ ディレクトリに全ての種類のアセットを置けるように <a class="header-anchor" href="#assets-dir" aria-label="Permalink to &quot;assets/ ディレクトリに全ての種類のアセットを置けるように {#assets-dir}&quot;">​</a></h3><p>従来の <code>image/</code>, <code>audio/</code> などのディレクトリに加えて、 <code>assets/</code> ディレクトリが利用できるようになりました。 このディレクトリ内においたアセットは、 <code>akashic scan asset</code> でスキャンされ、 game.json に登録されます。</p><p>ただし <code>assets/</code> は、他のディレクトリと次の点で異なります。</p><ul><li>全ての種類のアセットがスキャンされ登録される</li><li>アセットの種別がファイルの拡張子から自動的に決定される</li><li>アセット ID が不定になる</li></ul><p>これにより、従来は不可能だった次のようなフォルダ構造が可能になります。</p><ul><li>assets/ <ul><li>stage1/ <ul><li>map.json</li><li>background.png</li><li>bgm.aac</li><li>bgm.ogg</li></ul></li><li>stage2/ <ul><li>map.json</li><li>background.png</li><li>bgm.aac</li><li>bgm.ogg</li></ul></li></ul></li></ul><p>「アセット ID が不定になる」ため、利用には上述の <code>filePaths</code> や <code>scene.assets.getImage()</code> などを利用することになります。 この仕様の背景などについては <a href="/tutorial/v3/assetPaths.html">Akashic Engine 入門 » 複数のアセットをまとめて扱う</a> をご覧ください。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>厳密には、これは Akashic Engine の追加機能ではなく、 <code>akashic scan asset</code> コマンドの機能拡張です (akashic-cli v1.14.3 以降で利用可能)。ただし上述のとおり「アセット ID が不定になる」性質上、v3 の追加機能がないと利用できません。事実上 v3 以降専用の仕様となります。</p></div><h3 id="エンティティの座標系を変換するメソッドを追加" tabindex="-1">エンティティの座標系を変換するメソッドを追加 <a class="header-anchor" href="#エンティティの座標系を変換するメソッドを追加" aria-label="Permalink to &quot;エンティティの座標系を変換するメソッドを追加&quot;">​</a></h3><p>エンティティの座標系を変換するメソッド <code>E#localToGlobal()</code>, <code>E#globalToLocal()</code> が追加されます。</p><ul><li><code>g.E#localToGlobal()</code> はローカル座標をグローバル座標に変換します。</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-OTrgk" id="tab-e5q4uB5" checked><label for="tab-e5q4uB5">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parentEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ scene: scene, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nestedEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ scene: scene, parent: parentEntity });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// nestedEntity のローカル座標系での座標 (10, 20) はグローバル座標系では (110, 120)となります。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> globalPoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nestedEntity.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localToGlobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div></div></div><ul><li><code>g.E#globalToLocal()</code> はグローバル座標をローカル座標に変換します。</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-k557k" id="tab-ICSfnb-" checked><label for="tab-ICSfnb-">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parentEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ scene: scene, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nestedEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ scene: scene, parent: parentEntity });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// nestedEntity のグローバル系での座標 (110, 120) はローカル座標系では (10, 20)となります。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> localPoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nestedEntity.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalToLocal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">110</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div></div></div><h3 id="デフォルトローディングシーンで背景が透過で画面右下にプログレスバーが表示できるように" tabindex="-1">デフォルトローディングシーンで背景が透過で画面右下にプログレスバーが表示できるように <a class="header-anchor" href="#デフォルトローディングシーンで背景が透過で画面右下にプログレスバーが表示できるように" aria-label="Permalink to &quot;デフォルトローディングシーンで背景が透過で画面右下にプログレスバーが表示できるように&quot;">​</a></h3><p>defaultLoadingScene に <code>&quot;compact&quot;</code> が追加されます。</p><p>game.json の <a href="/reference/manifest/game-json.html#defaultLoadingScene">defaultLoadingScene</a> に <code>&quot;compact&quot;</code> を指定した時、ローディング画面が以下のように表示されます。</p><ul><li>背景が透過になります。 (下記画像では灰色部分が背景で透過されて表示されています。)</li><li>プログレスバーが画面中央ではなく右下の方に小さく表示されます。 <img src="`+t+`" alt=""></li></ul><h3 id="g-playerinfoevent-の追加" tabindex="-1">g.PlayerInfoEvent の追加 <a class="header-anchor" href="#g-playerinfoevent-の追加" aria-label="Permalink to &quot;g.PlayerInfoEvent の追加&quot;">​</a></h3><p>このイベントを <code>g.game.raiseEvent()</code> すると、以降 <code>g.PointDownEvent</code> 等の <code>player.name</code> プロパティに反映されるようになります。このイベントは、将来マルチプレイでのプレイヤー名を取得・通知するために先行して追加されるものです。</p><h3 id="シーンスタックから取り除くシーンの数を指定できるように" tabindex="-1">シーンスタックから取り除くシーンの数を指定できるように <a class="header-anchor" href="#シーンスタックから取り除くシーンの数を指定できるように" aria-label="Permalink to &quot;シーンスタックから取り除くシーンの数を指定できるように&quot;">​</a></h3><p><code>g.Game#popScene()</code> の第 2 引数に <code>step?: number</code> が追加されます。</p><p><code>step</code> に指定した数だけ pop が行われるようになります。step のデフォルト値は 1 です。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-_cB2Q" id="tab-dNAYjyG" checked><label for="tab-dNAYjyG">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">popScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></div></div><h3 id="drawninepatch" tabindex="-1">ナインパッチを描画するメソッドの追加 <a class="header-anchor" href="#drawninepatch" aria-label="Permalink to &quot;ナインパッチを描画するメソッドの追加 {#drawninepatch}&quot;">​</a></h3><p>SurfaceUtil に NinePatch を描画するメソッド <code>g.SurfaceUtil#drawNinePatch()</code> が追加されます。 これは対象の <code>Surface</code> にナインパッチ処理された <code>Surface</code> を描画する機能です。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-2yt44" id="tab-oR69iaG" checked><label for="tab-oR69iaG">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> destSurface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> game.resourceFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSurface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> srcSurface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> game.resourceFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSurface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> borderWidth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { top: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bottom: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, left: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, right: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SurfaceUtil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawNinePatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(destSurface, srcSurface, borderWidth);</span></span></code></pre></div></div></div><h3 id="操作プラグインを登録、開始、停止を行うメソッドの追加" tabindex="-1">操作プラグインを登録、開始、停止を行うメソッドの追加 <a class="header-anchor" href="#操作プラグインを登録、開始、停止を行うメソッドの追加" aria-label="Permalink to &quot;操作プラグインを登録、開始、停止を行うメソッドの追加&quot;">​</a></h3><p><code>g.OperationPluginManager</code> に以下のメソッドが追加されます。</p><ul><li>register(): 操作プラグインを手動で登録します。</li><li>start(): 操作プラグインを開始します。</li><li>stop():操作プラグインを停止します。</li></ul>`,110),h=[l];function p(k,d,r,c,o,g){return a(),i("div",null,h)}const u=s(n,[["render",p]]);export{y as __pageData,u as default};
