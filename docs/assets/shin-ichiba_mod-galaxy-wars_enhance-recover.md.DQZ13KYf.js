import{_ as t,c as l,I as a,w as e,a3 as n,k as s,E as p,o as h}from"./chunks/framework.B_s5ISUx.js";const k="/assets/gw-item-recover.CWw4HpaQ.png",d="/assets/gw-item-got-recover.CtcWG9wh.png",D=JSON.parse('{"title":"改造: 回復アイテムを強化してみる","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"shin-ichiba/mod-galaxy-wars/enhance-recover.md","filePath":"shin-ichiba/mod-galaxy-wars/enhance-recover.md"}'),c={name:"shin-ichiba/mod-galaxy-wars/enhance-recover.md"},o=n(`<h1 id="改造-回復アイテムを強化してみる" tabindex="-1">改造: 回復アイテムを強化してみる <a class="header-anchor" href="#改造-回復アイテムを強化してみる" aria-label="Permalink to &quot;改造: 回復アイテムを強化してみる&quot;">​</a></h1><p>ここでは『Galaxy Wars』の回復アイテムの処理を題材に、JavaScript の「条件分岐」といくつかの演算子を紹介します。</p><h2 id="体力を回復する処理" tabindex="-1">体力を回復する処理 <a class="header-anchor" href="#体力を回復する処理" aria-label="Permalink to &quot;体力を回復する処理&quot;">​</a></h2><p><a href="./change-life.html">前ページ</a> の最後で紹介した、<code>Player.MAX_HP</code> が登場する三つ目の箇所は、以下のようなコードでした。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 衝突イベントハンドラ</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onCollision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EntityType_1.EntityType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ITEM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.itemType) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemType_1.ItemType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RECOVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><code>Player</code> の <code>onCollision</code> という名前から考えると、これは「自機が何かに衝突した時の処理」だと想像できます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>on〜</code> という名前は、しばしば「〜した時 (の処理)」という意味で利用されます。 ここでは collision (衝突、激突) がついているので、何かがぶつかった時の処理だろうと判断しています。 アクション要素のあるゲームには大抵、何かしらの衝突判定と衝突時の処理があります。</p></div><p><code>Player.MAX_HP</code> が現れるのは次の文です。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="条件分岐-if-文" tabindex="-1">条件分岐: if 文 <a class="header-anchor" href="#条件分岐-if-文" aria-label="Permalink to &quot;条件分岐: if 文&quot;">​</a></h3><p>JavaScript において、以下のような文を <strong>if 文</strong> と呼びます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  処理;</span></span></code></pre></div><p>これは「この行を実行した時、<code>条件</code> が満たされているなら <code>処理</code> を実行する。満たされていなければ <code>処理</code> は実行せずに次に進む」という意味になります。 具体的なコードに当てはめてみると、</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>という今回のコードでは、</p><ul><li>条件: <code>this.hp &lt; Player.MAX_HP</code></li><li>処理: <code>this.hp++</code></li></ul><p>ということになります。</p><p>JavaScript において <code>A &lt; B</code> は、数学と同じように「<code>A</code> が <code>B</code> より小さい」という意味です。 また JavaScript で <code>A++</code> は、 <code>A = A + 1</code> と同じ意味、つまり「<code>A</code> を 1 増やす」という意味です。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>繰り返しになりますが、<code>=</code> の意味が数学とは異なることに気をつけてください。 自然数や実数で <code>A = A + 1</code> という等式は成り立ちません。 JavaScript では「現在の <code>A</code> の値に 1 を足したものを、変数 <code>A</code> に代入する」という意味になるので、「<code>A</code> を 1 増やす」ことになります。</li><li>厳密に言えば <code>A++</code> と <code>A = A + 1</code> は完全に同じではありません (式の一部として書いた時の挙動が異なります) が、ここでは気にする必要はありません。</li><li><code>++</code> の逆で、「<code>A</code> を 1 減らす」 <code>A--</code> という記述もできます。</li></ul></div><p>そのためこのコードは「現在の自機の体力 (<code>this.hp</code>) が最大体力 (<code>Player.MAX_HP</code>) より小さいならば、自機の体力を 1 増やす」という処理になります。 つまりこれは体力を回復する処理です。</p><p>体力が最大の時に回復しようとしても何も起きるべきではないので、「体力が最大より小さい時」という条件がついています。</p><div class="tip custom-block"><p class="custom-block-title">TIP: 演算子</p><p><code>&lt;</code> や <code>=</code>, <code>++</code> などの、演算を表す記号をまとめて <strong>演算子</strong> (operator) と呼びます。</p></div><div class="tip custom-block"><p class="custom-block-title">TIP: if 文とブロック</p><p>if 文の「条件が満たされた時の処理」は 1 文だけとは限りません。処理が複数の文にまたがる場合は、全体を <code>{</code>, <code>}</code> で囲むことができます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  処理1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  処理2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このように書くと、<code>条件</code> が成り立っていれば <code>処理1</code>, <code>処理2</code>, ... と順に実行され、そうでなければ <code>{}</code> 内は実行されません。</p><p>このように <code>{</code>, <code>}</code> で囲んでひとまとめにした処理を <strong>ブロック</strong> と呼びます。 文が一つだけであっても <code>{</code>, <code>}</code> で囲むことはできるので、<strong>慣れない間は常に <code>{</code>, <code>}</code> を書く</strong> のもおすすめです。</p><p>またここで <code>処理1;</code> や <code>処理2;</code> は文ですが、それを含む <code>if (条件) { ... }</code> (if 文) もまた文と呼ばれることに注意してください。 日本語の文章と異なり、JavaScript では文が多重構造になることがあります。</p></div><h3 id="体力を回復する時" tabindex="-1">体力を回復する時 <a class="header-anchor" href="#体力を回復する時" aria-label="Permalink to &quot;体力を回復する時&quot;">​</a></h3><p>さて、ではこの処理が実行されるのはいつでしょうか。</p><p>冒頭で見た通り、この処理は <code>class Player</code>, <code>onCollision()</code> というブロックの一部なので、名前から恐らく「自機 (Player) が何かに衝突した時の処理」でした。さらに周辺のコードを見てみましょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.itemType) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemType_1.ItemType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RECOVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>体力回復処理の直前に <code>case ItemType_1.ItemType.RECOVER</code> という記述があります。 「<code>ItemType</code> (アイテムタイプ) の <code>RECOVER</code> (回復する)」という名前から、これは「回復アイテムを取った時の処理」だと推測できます。</p>`,28),r=s("img",{src:k},null,-1),E=s("p",null,"実際これを取得すると「RECOVER」と表示されることを見ても、間違いないでしょう。",-1),g=s("img",{src:d},null,-1),y=n(`<h2 id="回復アイテムを強化してみる" tabindex="-1">回復アイテムを強化してみる <a class="header-anchor" href="#回復アイテムを強化してみる" aria-label="Permalink to &quot;回復アイテムを強化してみる&quot;">​</a></h2><p>ここでは回復アイテムの性能を変えてみましょう。 回復量を 1 から 2 に増やしてみます。</p><p><code>this.hp</code> を増やす量が 1 ではなくなるので、 <code>++</code> 演算子は使えません。 代わりに代入 <code>=</code> と加算 <code>+</code> の演算子で次のように書くことができます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span></code></pre></div><p>このように書くと「現在の <code>this.hp</code> の値に 2 を足したものを、<code>this.hp</code> に代入する」処理になるので、体力 (<code>this.hp</code>) が 2 増えることになります。</p><div class="tip custom-block"><p class="custom-block-title">TIP: <code>+=</code> 演算子</p><p><code>A = A + B</code> は、 <code>A += B</code> と書くこともできます。そのためこの文は <code>this.hp += 2;</code> としても構いません。</p></div><p>しかしこれだけでは不十分です。体力 (<code>this.hp</code>) が 29 の時に回復アイテムを取った状況を考えてみましょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>前ページの改造で最大体力 (<code>Player.MAX_HP</code>) は 30 になっているので、体力が 29 の時 <code>this.hp &lt; Player.MAX_HP</code> は成り立ちます。 そのため「体力を 2 増やす処理」が実行され、最大値よりも大きい体力 31 になってしまいます。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>この状態でゲームを動かしてみると、表示上最大値より大きい体力にはなりません (最大値分までしか表示する処理がないため) 。 しかし内部的には 31 になっていて、ダメージを受けても一度だけ体力が減らない状態になっていることがわかります。</p></div><p>これを防ぐには、条件式を見直す必要があります。次のように変更しましょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line diff remove"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>ここで <code>&lt;</code> の代わりに <code>&lt;=</code> を使っていることに注意してください。 <code>&lt;</code> が「より小さい」の演算子である一方、<code>&lt;=</code> は「以下」の演算子です。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>もちろん <code>&lt;</code> は変えずに <code>if (this.hp &lt; Player.MAX_HP - 1)</code> と書くこともできます。 ここでは、登場する数を <code>2</code> に統一でき、関連性がわかりやすくなるため<code>&lt;=</code> を使っています。</p></div><p>しかし、実はこれでもまだ十分ではありません。 体力が 29 (<code>Player.MAX_HP - 1</code>) の時、今度は条件を満たさなくなるためです。 回復アイテムを取っても回復しないことになってしまいました。</p><p>これを修正する方法はいくつかありますが、ここでは if...else 文を使って対処します。</p><h3 id="条件分岐-if-else-文" tabindex="-1">条件分岐: if...else 文 <a class="header-anchor" href="#条件分岐-if-else-文" aria-label="Permalink to &quot;条件分岐: if...else 文&quot;">​</a></h3><p>if...else 文は次のような形の文です。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  処理1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  処理2;</span></span></code></pre></div><p>if 文の終わりに <code>else</code> という記述が続く形になっています。 JavaScript においてこれは「<code>条件</code> が成り立っていれば <code>処理1</code> を、そうでなければ <code>処理2</code> を実行する」という意味になります。</p><p><code>処理1</code>, <code>処理2</code> の部分は文でありさえすればよいので、 <code>処理2</code> の部分にさらに別の if 文を書くこともできます。 すなわちこうです。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  処理1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    処理2;</span></span></code></pre></div><p>このようにすると「 <code>条件1</code> が成り立っていれば <code>処理1</code> を実行する。そうでなく、<code>条件2</code> が成り立っていれば <code>処理2</code> を実行する」という意味になります。</p><p>実際には改行を単純化して、次のように書かれることが多いです。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  処理1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  処理2;</span></span></code></pre></div><p>これを使って、先ほどの体力回復処理を次のように書き換えましょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span></code></pre></div><p>これによって、「体力が (最大値 - 2) 以下ならば 2 回復」「そうでなく、体力が (最大値 - 1) 以下ならば 1 回復」という処理になりました。</p><p>二つ目の条件がチェックされるのは、一つ目の条件が成り立たなかった時だけであることに気をつけてください。</p><div class="tip custom-block"><p class="custom-block-title">TIP: if...else 文のブロック</p><p>if 文と同じように if...else 文に含まれる文の部分もブロックを書くことができます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件1) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  処理1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件2) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  処理2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>こちらも、わかりやすいように慣れない間は常に <code>{</code>, <code>}</code> で囲むのがおすすめです。</p></div><p>akashic sandbox で動作を確認してみましょう。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">akashic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sandbox</span></span></code></pre></div><p>体力がちょうど 29 の状態で確認するのがちょっと難しいですが、正しく 2 回復できることが分かるかと思います。</p><h3 id="余談-いろいろな比較演算子" tabindex="-1">余談: いろいろな比較演算子 <a class="header-anchor" href="#余談-いろいろな比較演算子" aria-label="Permalink to &quot;余談: いろいろな比較演算子&quot;">​</a></h3><p>このページでは数を比較する演算子として <code>&lt;</code> と <code>&lt;=</code> を紹介しました。 これを含め JavaScript で数を比較できる演算子には、次のようなものがあります。</p><table tabindex="0"><thead><tr><th style="text-align:center;">式</th><th style="text-align:left;">意味</th></tr></thead><tbody><tr><td style="text-align:center;"><code>A &lt; B</code></td><td style="text-align:left;"><code>A</code> が <code>B</code> より小さい</td></tr><tr><td style="text-align:center;"><code>A &lt;= B</code></td><td style="text-align:left;"><code>A</code> が <code>B</code> 以下</td></tr><tr><td style="text-align:center;"><code>A &gt; B</code></td><td style="text-align:left;"><code>A</code> が <code>B</code> より大きい</td></tr><tr><td style="text-align:center;"><code>A &gt;= B</code></td><td style="text-align:left;"><code>A</code> が <code>B</code> 以上</td></tr><tr><td style="text-align:center;"><code>A === B</code></td><td style="text-align:left;"><code>A</code> が <code>B</code> と同じ</td></tr><tr><td style="text-align:center;"><code>A !== B</code></td><td style="text-align:left;"><code>A</code> が <code>B</code> と同じでない</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>その他に <code>==</code>, <code>!=</code> もありますが、一部の挙動が複雑なためひとまず使わないのがおすすめです。</p></div>`,37);function F(b,u,C,A,v,m){const i=p("CaptionedFigure");return h(),l("div",null,[o,a(i,{caption:"Galaxy Wars の回復アイテム (黄色い R のオブジェクト)"},{default:e(()=>[r]),_:1}),E,a(i,{caption:"回復アイテムを取得した直後の画面"},{default:e(()=>[g]),_:1}),y])}const _=t(c,[["render",F]]);export{D as __pageData,_ as default};
