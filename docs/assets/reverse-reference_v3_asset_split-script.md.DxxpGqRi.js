import{_ as a,c as e,I as t,a3 as s,o as n,E as h}from"./chunks/framework.B_s5ISUx.js";const _=JSON.parse('{"title":"スクリプトを分割する (複数のスクリプトを使う)","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/asset/split-script.md","filePath":"reverse-reference/v3/asset/split-script.md"}'),l={name:"reverse-reference/v3/asset/split-script.md"},p=s('<h1 id="スクリプトを分割する-複数のスクリプトを使う" tabindex="-1">スクリプトを分割する (複数のスクリプトを使う) <a class="header-anchor" href="#スクリプトを分割する-複数のスクリプトを使う" aria-label="Permalink to &quot;スクリプトを分割する (複数のスクリプトを使う)&quot;">​</a></h1><p>スクリプトを分割するには、<code>require()</code> を利用します。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redRectScene </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./redRectScene&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="利用例" tabindex="-1">利用例 <a class="header-anchor" href="#利用例" aria-label="Permalink to &quot;利用例&quot;">​</a></h2><p>次のコンテンツは、赤い矩形を描画するだけのシーン(redRectScene.js)を main.js から利用して表示しています。</p>',6),r=s(`<h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><p>Akashic Engine のゲームロジックは .js ファイル (スクリプトアセット) に記述します。 ゲームが大規模になってきた場合、処理を複数の .js ファイルに分けて書くことができます。 <code>akashic init</code> で生成した JavaScript テンプレートの場合は下記の手順を行います。</p><ol><li><code>script/</code> ディレクトリに任意の .js ファイルを作成</li><li><code>akashic scan assets</code> を実行し、追加した .js ファイルをアセットとして <code>game.json</code> に登録</li><li>他のスクリプトから <code>require()</code> で対象の .js を読み込んで利用</li></ol><p>外部から利用可能にするには、<code>module.exports</code> プロパティに代入します。下記の例では <code>create</code> に代入された関数が他のファイルから利用できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene.onLoad.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>上記の .js ファイルを 同ディレクトリの <code>main.js</code> から利用する場合は、<code>require()</code> 関数でそのファイルを読み込むことができるようになります。 <code>require()</code> の引数は、読み込む .js ファイルの相対パスです。TypeScript テンプレートの場合は、 <code>script/</code> ではなく <code>src/</code> ディレクトリに .ts ファイルを作成することになります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redRectScene </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./redRectScene&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(redRectScene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="関連情報" tabindex="-1">関連情報 <a class="header-anchor" href="#関連情報" aria-label="Permalink to &quot;関連情報&quot;">​</a></h2><ul><li><a href="/tutorial/v3/require.html">チュートリアル</a></li></ul>`,9);function k(d,c,o,E,g,y){const i=h("PlaygroundElement");return n(),e("div",null,[p,t(i,{gameJsonUri:"/snippets/reverse-reference/asset/split-script/game.json",width:600,height:400}),r])}const F=a(l,[["render",k]]);export{_ as __pageData,F as default};
