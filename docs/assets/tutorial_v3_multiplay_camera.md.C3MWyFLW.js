import{_ as a,c as e,o as i,a3 as s}from"./chunks/framework.B_s5ISUx.js";const m=JSON.parse('{"title":"プレイヤーごとに異なる位置を表示する","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v3/multiplay/camera.md","filePath":"tutorial/v3/multiplay/camera.md"}'),t={name:"tutorial/v3/multiplay/camera.md"},c=s(`<h1 id="プレイヤーごとに異なる位置を表示する" tabindex="-1">プレイヤーごとに異なる位置を表示する <a class="header-anchor" href="#プレイヤーごとに異なる位置を表示する" aria-label="Permalink to &quot;プレイヤーごとに異なる位置を表示する&quot;">​</a></h1><p>このページのサンプルコードを<a href="https://github.com/akashic-contents/website-contents/releases/latest/download/tutorial-samples-v3-multiplay-sample-camera.zip" target="_blank" rel="noreferrer">ダウンロード</a></p><p>広いフィールドの一部を画面に表示するようなゲームの場合、マルチプレイではプレイヤーごとに異なる場所を表示したくなることが考えられます。そのような場合のために、Akashic Engine は <code>g.Camera</code> を提供しています。</p><h2 id="camera" tabindex="-1">カメラ <a class="header-anchor" href="#camera" aria-label="Permalink to &quot;カメラ {#camera}&quot;">​</a></h2><p>カメラは、インターフェース <code>g.Camera</code> で表現されます。現在の Akashic Engine が実装を提供する唯一のカメラは <code>g.Camera2D</code> です。これは 2D ゲーム用途のカメラであり、次のように生成することができます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-hah02" id="tab-EHJC_O0" checked><label for="tab-EHJC_O0">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> camera</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Camera2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({});</span></span></code></pre></div></div></div><p>生成されたカメラは、そのままでは描画に影響を与えません。カメラを <code>g.game.focusingCamera</code> に設定することで、ゲーム画面の描画に対してカメラの設定を適用することができます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-yeo37" id="tab-ztJMohW" checked><label for="tab-ztJMohW">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.focusingCamera </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> camera;</span></span></code></pre></div></div></div><p>この状態で <code>camera</code> のプロパティを変更することで、ゲーム画面全体の描画内容を制御することができます。</p><p><code>Camera2D</code> は <code>Object2D</code> を実装しており、<code>x</code>, <code>y</code> によって描画位置のオフセットや、<code>scaleX</code>, <code>scaleY</code> によって描画結果の拡大率を設定できます。たとえば以下のような記述により、画面全体を 30 度傾けることができます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-YPNTg" id="tab-Y5NsoSr" checked><label for="tab-Y5NsoSr">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">camera.angle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">camera.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></div></div><p><code>Camera2D</code> のオフセットや回転角度は、エンティティとは逆方向に作用することに注意してください。すなわち、たとえば X 座標のオフセット <code>Camera2D#x</code> を 10 に設定した場合、移動するのは描画される範囲です。その中で描画されるエンティティの描画位置は元の位置から (右ではなく) 左に 10 ピクセルずれます。</p><p>エンティティなどと同様、カメラの値の変更後には <code>modified()</code> を呼び出す必要があります。 <code>g.game.focusingCamera</code> の既定値は <code>undefined</code> です。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>g.game.forcusingCamera</code> は「プレイヤーごとに異なる値」です。そのため後述の <code>g.game.selfId</code> と同じく、条件分岐で参照する時は <strong>ローカル処理の制限を受けることに注意してください</strong>。詳細は <a href="./join.html#selfid-and-local">g.game.selfId とローカル処理</a> を参照してください。</p></div><h2 id="ignore-camera" tabindex="-1">カメラの transform の無視 <a class="header-anchor" href="#ignore-camera" aria-label="Permalink to &quot;カメラの transform の無視 {#ignore-camera}&quot;">​</a></h2><p>現在の Akashic Engine は、カメラの transform(<code>x</code>, <code>y</code> による描画位置オフセットなど)を無視する方法を直接には提供していません。すべてのエンティティは <code>g.game.focusingCamera</code> のオフセットや拡大の影響を受けます。</p><p>画面中央に自機を固定したい場合や、「現在のスコア」のようなカメラの影響を受けないエンティティを作成したい場合は、ゲーム開発者が自力でカメラのオフセットなどを引いた(逆変換した)位置に置く必要があります。</p><p>別の方法としては、描画処理 <code>E#renderSelf()</code> をオーバーライドしてこの逆変換するエンティティ (<code>E</code>) の派生クラスを作り、それを使うこともできます。この方法の実装例としては akashic-engine の <code>DefaultLoadingScene</code> のソースコードを参照してください。ただし将来的には、この仕様は変更される可能性があります。</p>`,18),d=[c];function o(p,l,r,n,h,g){return i(),e("div",null,d)}const v=a(t,[["render",o]]);export{m as __pageData,v as default};
