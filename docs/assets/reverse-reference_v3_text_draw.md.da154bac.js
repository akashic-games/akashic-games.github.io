import{_ as n,C as l,o as p,c as e,H as o,Q as s}from"./chunks/framework.f1c0562b.js";const v=JSON.parse('{"title":"文字列を描画する","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/text/draw.md","filePath":"reverse-reference/v3/text/draw.md"}'),t={name:"reverse-reference/v3/text/draw.md"},c=s(`<h1 id="文字列を描画する" tabindex="-1">文字列を描画する <a class="header-anchor" href="#文字列を描画する" aria-label="Permalink to &quot;文字列を描画する&quot;">​</a></h1><p>文字を描画するには、 <code>Label</code> エンティティを利用します。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> label </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Label</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene, </span><span style="color:#6A737D;">// g.Sceneの値</span></span>
<span class="line"><span style="color:#E1E4E8;">  font: font, </span><span style="color:#6A737D;">// g.Fontの値</span></span>
<span class="line"><span style="color:#E1E4E8;">  text: </span><span style="color:#9ECBFF;">&quot;こんにちは&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fontSize: </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  x: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  y: </span><span style="color:#79B8FF;">50</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(label);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Label</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene, </span><span style="color:#6A737D;">// g.Sceneの値</span></span>
<span class="line"><span style="color:#24292E;">  font: font, </span><span style="color:#6A737D;">// g.Fontの値</span></span>
<span class="line"><span style="color:#24292E;">  text: </span><span style="color:#032F62;">&quot;こんにちは&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  fontSize: </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  x: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  y: </span><span style="color:#005CC5;">50</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(label);</span></span></code></pre></div><h2 id="利用例" tabindex="-1">利用例 <a class="header-anchor" href="#利用例" aria-label="Permalink to &quot;利用例&quot;">​</a></h2><p>次のコンテンツは、「こんにちは」と書かれた <code>Label</code> を表示します。</p>`,6),r=s(`<h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><p>文字を描画する操作は、「フォントの生成」と「フォントを利用した文字描画」の 2 つを行う必要があります。</p><p>Akashic Engine のフォントは 2 種類あり、事前に用意した画像を使用する <code>g.BitmapFont</code> と、画像の準備がいらずシステムのフォントを使用する <code>g.DynamicFont</code> を利用できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> font </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">DynamicFont</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  game: g.game,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fontFamily: </span><span style="color:#9ECBFF;">&quot;sans-serif&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  size: </span><span style="color:#79B8FF;">48</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> font </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">DynamicFont</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  game: g.game,</span></span>
<span class="line"><span style="color:#24292E;">  fontFamily: </span><span style="color:#032F62;">&quot;sans-serif&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  size: </span><span style="color:#005CC5;">48</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>Label</code> エンティティのパラメータオブジェクトに生成されたフォントを指定することで、そのフォントを利用して文字を描画するエンティティを作成できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> label </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Label</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">  font: font,</span></span>
<span class="line"><span style="color:#E1E4E8;">  text: </span><span style="color:#9ECBFF;">&quot;こんにちは&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fontSize: </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  x: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  y: </span><span style="color:#79B8FF;">50</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(label);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Label</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">  font: font,</span></span>
<span class="line"><span style="color:#24292E;">  text: </span><span style="color:#032F62;">&quot;こんにちは&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  fontSize: </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  x: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  y: </span><span style="color:#005CC5;">50</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(label);</span></span></code></pre></div><p>一度生成したフォントは複数のラべルで繰り返し使用できます。</p><h2 id="関連情報" tabindex="-1">関連情報 <a class="header-anchor" href="#関連情報" aria-label="Permalink to &quot;関連情報&quot;">​</a></h2><ul><li><a href="/tutorial/v3/text.html">チュートリアル</a></li><li><a href="/akashic-engine/v3/classes/Label.html">API リファレンス</a></li></ul>`,9);function E(y,i,d,h,F,g){const a=l("PlaygroundElement");return p(),e("div",null,[c,o(a,{gameJsonUri:"/snippets/reverse-reference/text/draw/game.json",width:600,height:400}),r])}const _=n(t,[["render",E]]);export{v as __pageData,_ as default};
