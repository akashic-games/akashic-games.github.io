import{_ as s,a,b as n}from"./chunks/cli-serve-play-control.048540d9.js";import{_ as p}from"./chunks/cli-serve.64f50312.js";import{_ as l,o,c as e,Q as c}from"./chunks/framework.f1c0562b.js";const m=JSON.parse('{"title":"マルチプレイの基礎","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v3/multiplay/introduction.md","filePath":"tutorial/v3/multiplay/introduction.md"}'),t={name:"tutorial/v3/multiplay/introduction.md"},r=c(`<h1 id="intro" tabindex="-1">マルチプレイの基礎 <a class="header-anchor" href="#intro" aria-label="Permalink to &quot;マルチプレイの基礎 {#intro}&quot;">​</a></h1><p>このページのサンプルコードを<a class="asset--material--download" href="/zip/tutorial/v3/multiplay/sample-introduction.zip">ダウンロード</a></p><p>Akashic Engine では、マルチプレイのゲームを作成することができます。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>ただしマルチプレイゲームの公開には、独自のサーバソフトウェアが必要になります。 そのため (シングルプレイのゲームと比較すると) 公開方法が限られます。</p><p>現在 Akashic Engine で作成したマルチプレイゲームを一般に公開する方法としては、 「ニコ生ゲームとして公開する」があります。</p><p>この詳細は <a href="./release-multiplay.html">Akashic Engine 入門 » マルチプレイゲームを公開する</a> で後述します。</p></div><h2 id="helloworld" tabindex="-1">マルチプレイの Hello World <a class="header-anchor" href="#helloworld" aria-label="Permalink to &quot;マルチプレイの Hello World {#helloworld}&quot;">​</a></h2><p>マルチプレイゲームのコーディングに特別な準備は必要ありません。</p><p>Akashic Engine の提供する各種イベントには、全て「誰がそのイベントを生成したか」の情報が付与されています。たとえば <code>g.E#pointDown</code> のハンドラに与えられる <code>g.PointDownEvent</code> には <code>player</code> プロパティがあり、「誰が画面をタッチしたのか」識別することができます。</p><p>操作したプレイヤーに応じて処理を分ければ、自動的にマルチプレイゲームに対応できます。</p><p>例えば、一番最初にボタンを押したプレイヤーに得点が入る「早押しボタン」のようなコンテンツは、次のようなコードで作ることができます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  game: g.game,</span></span>
<span class="line"><span style="color:#E1E4E8;">  assetPaths: [</span><span style="color:#9ECBFF;">&quot;/image/button.png&quot;</span><span style="color:#E1E4E8;">] </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">scene.onLoad.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">    src: scene.asset.</span><span style="color:#B392F0;">getImage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/image/button.png&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    touchable: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scores</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}; </span><span style="color:#6A737D;">// 得点を格納するテーブル</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// エンティティ button が押された時:</span></span>
<span class="line"><span style="color:#E1E4E8;">  button.onPointDown.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">playerId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.player.id; </span><span style="color:#6A737D;">// 押したプレイヤーのID</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (scores[playerId] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 初回の場合は0点で初期化</span></span>
<span class="line"><span style="color:#E1E4E8;">      scores[playerId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    scores[playerId]</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 押したプレイヤーの得点を加算</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(button);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  game: g.game,</span></span>
<span class="line"><span style="color:#24292E;">  assetPaths: [</span><span style="color:#032F62;">&quot;/image/button.png&quot;</span><span style="color:#24292E;">] </span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">scene.onLoad.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">button</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">    src: scene.asset.</span><span style="color:#6F42C1;">getImage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/image/button.png&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    touchable: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scores</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}; </span><span style="color:#6A737D;">// 得点を格納するテーブル</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// エンティティ button が押された時:</span></span>
<span class="line"><span style="color:#24292E;">  button.onPointDown.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">playerId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.player.id; </span><span style="color:#6A737D;">// 押したプレイヤーのID</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (scores[playerId] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 初回の場合は0点で初期化</span></span>
<span class="line"><span style="color:#24292E;">      scores[playerId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    scores[playerId]</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 押したプレイヤーの得点を加算</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(button);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>pointDown</code> のハンドラに与えられる引数 <code>ev</code> (<code>g.PointDownEvent</code>) の <code>player</code> プロパティでプレイヤーを識別し、プレイヤーごとに得点を求めています。 <code>player.id</code> はプレイヤーごとにユニークな文字列または <code>undefined</code> です。</p><p>このコンテンツは、もちろん現実的には「ボタンの表示タイミングをランダムにする」「ボタンを押した時間によって得点を変える」「ボタンを押した時の画像や効果音をつける」「一定時間後に全員のスコアを表示して勝敗を決める」といった処理を足していかないとゲームらしくはなりませんが、骨格としてはマルチプレイに対応したものになっています。</p><p>もう少し画面上で分かりやすい例として、「各プレイヤーに対応するキャラクタ画像がクリックした位置に移動するコンテンツ」を考えます。</p><p>キャラ画像としては <a href="./../../../asset/material.html">サンプルデモの素材</a> ページの次の画像を <code>chara.png</code> として利用します。</p><p><img src="`+s+`" alt="chara.png"></p><p>コードは次のようなものになります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  game: g.game,</span></span>
<span class="line"><span style="color:#E1E4E8;">  assetPaths: [</span><span style="color:#9ECBFF;">&quot;/image/char.png&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">scene.onLoad.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">characters</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}; </span><span style="color:#6A737D;">// キャラクタ管理テーブル</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 画面内のどこかが押されたとき</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene.onPointDownCapture.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.point.x; </span><span style="color:#6A737D;">// 押された位置のX座標</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.point.y; </span><span style="color:#6A737D;">// 押された位置のY座標</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">playerId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.player.id; </span><span style="color:#6A737D;">// 押したプレイヤーのID</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (characters[playerId] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// プレイヤー playerId にとって初めての操作の場合: キャラクタデータを生成</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chara</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        targetX: x,</span></span>
<span class="line"><span style="color:#E1E4E8;">        targetY: y,</span></span>
<span class="line"><span style="color:#E1E4E8;">        entity: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">          scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">          src: scene.asset.</span><span style="color:#B392F0;">getImage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/image/chara.png&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">          x: x,</span></span>
<span class="line"><span style="color:#E1E4E8;">          y: y</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">      characters[playerId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chara;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// キャラクタのフレームごとの処理(目標座標 (targetX, targetY) に近づくように位置を更新)を登録</span></span>
<span class="line"><span style="color:#E1E4E8;">      chara.entity.onUpdate.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">diffX</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chara.targetX </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> chara.entity.x;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">diffY</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chara.targetY </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> chara.entity.y;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 既に目標座標にいるなら何もせず抜ける</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (diffX </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> diffY </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 目標座標から各軸10px以上離れていたら、1割ずつ接近。10px以下なら目標座標に移動</span></span>
<span class="line"><span style="color:#E1E4E8;">        chara.entity.x </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(diffX) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(diffX </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> diffX;</span></span>
<span class="line"><span style="color:#E1E4E8;">        chara.entity.y </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(diffY) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(diffY </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> diffY;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        chara.entity.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 変更を反映</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(chara.entity); </span><span style="color:#6A737D;">// シーンに生成したキャラクタ画像を追加</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// プレイヤー playerId のキャラが既にいる場合: キャラの目標座標を、クリックされた位置に更新</span></span>
<span class="line"><span style="color:#E1E4E8;">      characters[playerId].targetX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">      characters[playerId].targetY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> y;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  game: g.game,</span></span>
<span class="line"><span style="color:#24292E;">  assetPaths: [</span><span style="color:#032F62;">&quot;/image/char.png&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">scene.onLoad.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">characters</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}; </span><span style="color:#6A737D;">// キャラクタ管理テーブル</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 画面内のどこかが押されたとき</span></span>
<span class="line"><span style="color:#24292E;">  scene.onPointDownCapture.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.point.x; </span><span style="color:#6A737D;">// 押された位置のX座標</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">y</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.point.y; </span><span style="color:#6A737D;">// 押された位置のY座標</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">playerId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.player.id; </span><span style="color:#6A737D;">// 押したプレイヤーのID</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (characters[playerId] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// プレイヤー playerId にとって初めての操作の場合: キャラクタデータを生成</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chara</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        targetX: x,</span></span>
<span class="line"><span style="color:#24292E;">        targetY: y,</span></span>
<span class="line"><span style="color:#24292E;">        entity: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">          scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">          src: scene.asset.</span><span style="color:#6F42C1;">getImage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/image/chara.png&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">          x: x,</span></span>
<span class="line"><span style="color:#24292E;">          y: y</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">      characters[playerId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chara;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// キャラクタのフレームごとの処理(目標座標 (targetX, targetY) に近づくように位置を更新)を登録</span></span>
<span class="line"><span style="color:#24292E;">      chara.entity.onUpdate.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">diffX</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chara.targetX </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> chara.entity.x;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">diffY</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chara.targetY </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> chara.entity.y;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 既に目標座標にいるなら何もせず抜ける</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (diffX </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> diffY </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 目標座標から各軸10px以上離れていたら、1割ずつ接近。10px以下なら目標座標に移動</span></span>
<span class="line"><span style="color:#24292E;">        chara.entity.x </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(diffX) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(diffX </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> diffX;</span></span>
<span class="line"><span style="color:#24292E;">        chara.entity.y </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(diffY) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(diffY </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> diffY;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        chara.entity.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 変更を反映</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(chara.entity); </span><span style="color:#6A737D;">// シーンに生成したキャラクタ画像を追加</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// プレイヤー playerId のキャラが既にいる場合: キャラの目標座標を、クリックされた位置に更新</span></span>
<span class="line"><span style="color:#24292E;">      characters[playerId].targetX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">      characters[playerId].targetY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>コードは増えていますが、</p><ul><li>プレイヤーごとの情報を管理するテーブル (この例では <code>characters</code>) を作り、</li><li>イベントの <code>player</code> プロパティを参照して、プレイヤーごとの処理を行う</li></ul><p>という点では「早押しボタン」と同じ構造になっています。</p><h2 id="debug" tabindex="-1">動作確認 <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;動作確認 {#debug}&quot;">​</a></h2><p>ここまで、ゲームの動作確認には Akashic Sandbox (<code>akashic-sandbox</code>) を利用してきました。しかしこのツールはシングルプレイの動作確認を行うためのものです。マルチプレイの確認を行うことはできません。ブラウザで複数のウィンドウを開いても、それぞれ独立した別のゲームプレイになってしまいます。</p><p>akashic-cli v1.5.1 以降には、マルチプレイゲームの動作確認機能 (<code>serve</code> コマンド) が追加されています。これは(独立したツールではなく) akashic-cli に組み込まれていますが、 akashic-sandbox 同様サーバとして動作するコマンドです。</p><p>インストールされている akashic-cli のバージョンは次のコマンドで確認できます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">akashic</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-V</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">akashic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-V</span></span></code></pre></div><p>1.5.1 より小さい値が表示された場合は、次のコマンドで akashic-cli の最新版をインストールしてください。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@akashic/akashic-cli</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@akashic/akashic-cli</span></span></code></pre></div><p>インストール後、game.json のあるディレクトリで、次のコマンドを実行してください。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">akashic</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serve</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">akashic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serve</span></span></code></pre></div><p>実行後、 <code>http://localhost:3300/</code> にアクセスしてください。次のような画面が表示されます。</p><p><img src="`+p+'" alt="serve"></p><p>先の例の「各プレイヤーに対応するキャラクタ画像がクリックした位置に移動するコンテンツ」の場合、画面をクリックするとキャラクタ画像が表示されます。もう一度クリックするとキャラクタ画像が移動します。</p><p>この状態でもう一つブラウザウィンドウを開き、同じ URL を読み込むと、同じゲームプレイに接続することができます。それぞれの画面をクリックすると、それぞれのキャラクタ画像が操作されます。これでマルチプレイの動作を確認することができます。</p><p><img src="'+a+'" alt="複数ウィンドウ"></p><p>なお <code>akashic serve</code> は <code>akashic-sandbox</code> と異なり、ブラウザをリロードしてもゲームプレイがリセットされません。リセットは画面内のボタンで行います。</p><p><img src="'+n+'" alt="プレイコントロール"></p><p>画面内のツールバー左側に、ゲームプレイ全般の操作を行うボタンが配置されています。次の機能があります。</p><ul><li>一番左の電源ボタン: ゲームプレイをリセットします。</li><li>二番目のポーズボタン: ゲームプレイをポーズします。</li><li>三番目のインスタンス追加ボタン: 同じ URL でブラウザウィンドウを開きます(マルチプレイのプレイヤーを増やします)。</li></ul><p><code>akashic serve</code> コマンドは、 <code>akashic-sandbox</code> と同様に Ctrl-C で終了することができます。</p><h2 id="architecture-intro" tabindex="-1">Akashic におけるマルチプレイ <a class="header-anchor" href="#architecture-intro" aria-label="Permalink to &quot;Akashic におけるマルチプレイ {#architecture-intro}&quot;">​</a></h2><p><code>akashic serve</code> でしばらくプレイした後に、ブラウザウィンドウを追加すると、最初にビデオ映像を早送りするような画面が表示されることに気がつきます。これは Akashic Engine のマルチプレイの実現方法に起因する動作です。</p><p>Akashic におけるマルチプレイは、プレイヤー間でゲームの実行状態を「間接的に」共有することで実現されています。 Akashic はプレイヤー間で実行状態を直接的に共有することはしませんが、その代わりに <strong>全てのプレイヤーが行う全ての操作を共有します</strong> 。ゲーム内で行われた全操作を全プレイヤーに通知することで、全プレイヤーの手元でまったく同じ処理を行い、結果として同じ実行状態を再現します。 <strong>同じゲームスクリプトに、同じ経過フレーム数で同じイベントを与えれば、同じ実行状態に至るはずだ</strong> 、というのが、Akashic Engine のマルチプレイの基本的なデザインです。後から参加したプレイヤーに、早送りで最新状態に追いつく動作が発生するのはこのためです。</p><p><code>Math.random()</code> ではなく <code>g.game.random</code> を使う必要があるのもこのためです。 <code>Math.random()</code> を使うと、その結果は実行環境(ブラウザウィンドウ)ごとに異なるので、同じイベントを与えても同じ状態が再現されなくなってしまいます。 <code>g.game.random</code> は一つのゲームプレイ内で全員が同じ乱数シードと乱数生成アルゴリズムを使うように作られているので、この問題がありません。</p><p><code>Math.random()</code> のような制約はつきますが、このデザインによってゲーム開発者は、ゲーム状態の通知や共有などの問題をほぼ気にすることなく、手軽にマルチプレイのゲームを作成することができます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>全プレイヤーで共通の乱数ではなく、プレイヤー固有の乱数を生成したい場合には、<code>g.game.localRandom</code> が利用できます。 ただし <code>g.game.localRandom</code> はローカル処理 (ローカルイベントに起因して実行される処理) の中でのみ利用することができます。 ローカル処理については、次項の <a href="/tutorial/v3/multiplay/each-player.html">プレイヤーごとに異なる描画を行う</a> を参照してください。</p></div>',45),E=[r];function y(i,d,F,h,g,A){return o(),e("div",null,E)}const f=l(t,[["render",y]]);export{m as __pageData,f as default};
