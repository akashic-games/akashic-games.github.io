import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.f1c0562b.js";const F=JSON.parse('{"title":"プレイヤーごとに異なる描画を行う","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v2/multiplay/each-player.md","filePath":"tutorial/v2/multiplay/each-player.md"}'),p={name:"tutorial/v2/multiplay/each-player.md"},o=l(`<h1 id="プレイヤーごとに異なる描画を行う" tabindex="-1">プレイヤーごとに異なる描画を行う <a class="header-anchor" href="#プレイヤーごとに異なる描画を行う" aria-label="Permalink to &quot;プレイヤーごとに異なる描画を行う&quot;">​</a></h1><p>前節ではマルチプレイに対応する方法として、「イベントを生成したプレイヤーごとに処理を行えばよい」ということを述べました。また「全プレイヤーの手元で、同じタイミングで同じイベントを消化することで同じ状態を再現する」という、Akashic のマルチプレイのデザインに触れました。</p><p>しかしこれだけでは、作成できるゲームは、全プレイヤーがまったく同じ画面を見るものに限られます。たとえば将棋は作成できるでしょう。将棋盤や持ち駒の情報は全プレイヤー共通で、一画面にすべて表示してしまうことが可能だからです(後手が盤面上側になってしまうという問題はありますが)。しかし別のゲームでは、たとえば各プレイヤーで違うアイテムを使うために、プレイヤーごとのアイテム切り替え UI を作りたいかもしれません。この場合プレイヤーごとにアイテム切り替え UI の状態は異なる必要があります。</p><p>そのような状況に対応するため、Akashic Engine はローカルエンティティ・ローカルイベントという概念を持っています。</p><p><strong>ローカルエンティティ</strong> とは、「そのエンティティを参照するイベントがすべてローカルになる」エンティティ (<code>g.E</code>) です。 <strong>ローカルイベント</strong> は、通常のイベントと同様ですが「それを生成したプレイヤーにだけ通知される」という特徴を持つイベントです。</p><h2 id="local-event" tabindex="-1">ローカルイベント <a class="header-anchor" href="#local-event" aria-label="Permalink to &quot;ローカルイベント {#local-event}&quot;">​</a></h2><p>Akashic のイベント <code>g.Event</code> は、原則的に全てプレイヤー間で共有されます。前述のとおり Akashic のマルチプレイは、各プレイヤーが発生させたイベントを全プレイヤー間で共有することで実現されているためです。</p><p>この原則の例外がローカルイベントです。あるイベントがローカルであるとき、そのイベントは、それを生成したプレイヤー以外には共有されません。ローカルイベントは「生成したプレイヤー自身にしか通知されない」ため、プレイヤーごとに異なる処理を実現するのに利用することができます。</p><p>イベントがローカルであるか否かは、真理値 <code>g.Event#local</code> によって表されます。この値はイベントの生成時に決定され、変化しません。ゲーム開発者はこの値を変更してはいけません。</p><p>その性質から、ローカルイベントに起因する処理においては、ゲームのグローバルな実行状態を破壊してはいけません。特に非ローカルなエンティティの生成や操作を行ってはいけない点に注意が必要です。これについては後述します。</p><h2 id="local-entity" tabindex="-1">ローカルエンティティ <a class="header-anchor" href="#local-entity" aria-label="Permalink to &quot;ローカルエンティティ {#local-entity}&quot;">​</a></h2><p>一部のケースを除き、ゲーム開発者が自分でイベントを生成することはありません。ローカルイベントは多くの場合、ローカルエンティティによって生成されます。</p><p>ローカルエンティティとは、「そのエンティティを参照するイベントがすべてローカルになる」エンティティ <code>g.E</code> です。</p><p>例えばポイント押下イベント <code>g.PointDownEvent</code> には、押下した位置のエンティティを参照する <code>target</code> プロパティが存在します。この <code>target</code> のエンティティがローカルである時、 <code>g.PointDownEvent</code> はローカルになります。そのイベントはそれを生成した(画面を押下した)プレイヤー自身にしか通知されません。</p><p>ローカルエンティティは、エンティティのコンストラクタ引数の <code>local</code> プロパティに <code>true</code> を与えることで生成できます。以下は、シーン <code>scene</code> に属するローカルな <code>g.Sprite</code> を生成するコードの例です。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sprite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">  src: scene.assets[</span><span style="color:#9ECBFF;">&quot;chara1&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// (アセットID &quot;chara1&quot; のイメージアセットがある想定)</span></span>
<span class="line"><span style="color:#E1E4E8;">  local: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ローカルであることを指定</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sprite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">  src: scene.assets[</span><span style="color:#032F62;">&quot;chara1&quot;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// (アセットID &quot;chara1&quot; のイメージアセットがある想定)</span></span>
<span class="line"><span style="color:#24292E;">  local: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ローカルであることを指定</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>その性質から、ローカルエンティティは、必ずしも全てのエンジンインスタンス上に同じように存在し表示されている必要がありません。すなわちプレイヤー別の UI を実現することができます。</p><p>クリックした位置に四角形を表示するだけのコンテンツに、プレイヤー別の色選択 UI を表示するコードは次のようなものになります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> scene </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">scene.loaded.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> userColors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}; </span><span style="color:#6A737D;">// ユーザ別の色テーブル</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 画面がタッチされた時、矩形を置く</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene.pointDownCapture.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 対象がある(他のtouchableに対するpointDown)なら無視</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ev.target </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// クリックしたプレイヤーの色で矩形を生成</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">      x: ev.point.x,</span></span>
<span class="line"><span style="color:#E1E4E8;">      y: ev.point.y,</span></span>
<span class="line"><span style="color:#E1E4E8;">      width: </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      height: </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      cssColor: userColors[ev.player.id] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;red&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// そのプレイヤーの選択している色(なければ赤)</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(rect);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ローカルエンティティで色切り替えボタン (緑)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> greenButton </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">    local: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// ローカルにする</span></span>
<span class="line"><span style="color:#E1E4E8;">    x: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    y: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    cssColor: </span><span style="color:#9ECBFF;">&quot;green&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    touchable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    opacity: </span><span style="color:#79B8FF;">0.3</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  greenButton.pointUp.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ローカルエンティティのUIの表示を変更</span></span>
<span class="line"><span style="color:#E1E4E8;">    greenButton.opacity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    greenButton.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    blueButton.opacity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 非選択状態のものは半透明に</span></span>
<span class="line"><span style="color:#E1E4E8;">    blueButton.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 全員に自分の色変更イベントを送信 (後述)</span></span>
<span class="line"><span style="color:#E1E4E8;">    g.game.</span><span style="color:#B392F0;">raiseEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">MessageEvent</span><span style="color:#E1E4E8;">({ color: </span><span style="color:#9ECBFF;">&quot;green&quot;</span><span style="color:#E1E4E8;"> }));</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(greenButton);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ローカルエンティティ色切り替えボタン (青)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> blueButton </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">    local: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// ローカルエンティティ</span></span>
<span class="line"><span style="color:#E1E4E8;">    x: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    y: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    cssColor: </span><span style="color:#9ECBFF;">&quot;blue&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    touchable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    opacity: </span><span style="color:#79B8FF;">0.3</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  blueButton.pointUp.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ローカルエンティティのUIの表示を変更</span></span>
<span class="line"><span style="color:#E1E4E8;">    greenButton.opacity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 非選択状態のものは半透明に</span></span>
<span class="line"><span style="color:#E1E4E8;">    greenButton.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    blueButton.opacity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    blueButton.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 全員に自分の色変更イベントを送信 (後述)</span></span>
<span class="line"><span style="color:#E1E4E8;">    g.game.</span><span style="color:#B392F0;">raiseEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">MessageEvent</span><span style="color:#E1E4E8;">({ color: </span><span style="color:#9ECBFF;">&quot;blue&quot;</span><span style="color:#E1E4E8;"> }));</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(blueButton);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// (raiseEvent()で全プレイヤーに送信された)MessageEventを受け取る処理: 送信プレイヤーの色情報を更新する</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene.message.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 関係ないイベントは無視して抜ける</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">msg.data </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">msg.data.color) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// イベントを送信したプレイヤーの色情報を更新する</span></span>
<span class="line"><span style="color:#E1E4E8;">    userColors[msg.player.id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> msg.data.color;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> scene </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({ game: g.game });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">scene.loaded.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> userColors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}; </span><span style="color:#6A737D;">// ユーザ別の色テーブル</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 画面がタッチされた時、矩形を置く</span></span>
<span class="line"><span style="color:#24292E;">  scene.pointDownCapture.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 対象がある(他のtouchableに対するpointDown)なら無視</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ev.target </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// クリックしたプレイヤーの色で矩形を生成</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">      x: ev.point.x,</span></span>
<span class="line"><span style="color:#24292E;">      y: ev.point.y,</span></span>
<span class="line"><span style="color:#24292E;">      width: </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      height: </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      cssColor: userColors[ev.player.id] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// そのプレイヤーの選択している色(なければ赤)</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(rect);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ローカルエンティティで色切り替えボタン (緑)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> greenButton </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">    local: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// ローカルにする</span></span>
<span class="line"><span style="color:#24292E;">    x: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    y: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    width: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    height: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    cssColor: </span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    touchable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    opacity: </span><span style="color:#005CC5;">0.3</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  greenButton.pointUp.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ローカルエンティティのUIの表示を変更</span></span>
<span class="line"><span style="color:#24292E;">    greenButton.opacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    greenButton.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    blueButton.opacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 非選択状態のものは半透明に</span></span>
<span class="line"><span style="color:#24292E;">    blueButton.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 全員に自分の色変更イベントを送信 (後述)</span></span>
<span class="line"><span style="color:#24292E;">    g.game.</span><span style="color:#6F42C1;">raiseEvent</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">MessageEvent</span><span style="color:#24292E;">({ color: </span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;"> }));</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(greenButton);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ローカルエンティティ色切り替えボタン (青)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> blueButton </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">    local: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// ローカルエンティティ</span></span>
<span class="line"><span style="color:#24292E;">    x: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    y: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    width: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    height: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    cssColor: </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    touchable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    opacity: </span><span style="color:#005CC5;">0.3</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  blueButton.pointUp.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ローカルエンティティのUIの表示を変更</span></span>
<span class="line"><span style="color:#24292E;">    greenButton.opacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 非選択状態のものは半透明に</span></span>
<span class="line"><span style="color:#24292E;">    greenButton.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    blueButton.opacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    blueButton.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 全員に自分の色変更イベントを送信 (後述)</span></span>
<span class="line"><span style="color:#24292E;">    g.game.</span><span style="color:#6F42C1;">raiseEvent</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">MessageEvent</span><span style="color:#24292E;">({ color: </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;"> }));</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(blueButton);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// (raiseEvent()で全プレイヤーに送信された)MessageEventを受け取る処理: 送信プレイヤーの色情報を更新する</span></span>
<span class="line"><span style="color:#24292E;">  scene.message.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 関係ないイベントは無視して抜ける</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">msg.data </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">msg.data.color) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// イベントを送信したプレイヤーの色情報を更新する</span></span>
<span class="line"><span style="color:#24292E;">    userColors[msg.player.id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> msg.data.color;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>このコードでは、画面左上に緑と青のボタン(ただの矩形ですが)が表示され、画面のその他の位置をタッチすると矩形が表示されるものです。</p><p>緑と青のボタンはローカルエンティティで作られていて、プレイヤー別に異なる状態になり、またボタンに対する操作は操作したプレイヤー自身にしか通知されません。そのプレイヤーが非選択状態のボタンは半透明で表示されます。</p><h2 id="raise-event" tabindex="-1">raiseEvent() <a class="header-anchor" href="#raise-event" aria-label="Permalink to &quot;raiseEvent() {#raise-event}&quot;">​</a></h2><p>上のコード例の中で説明していないのが <code>g.game.raiseEvent()</code> です。</p><p>上述のとおり、ローカルエンティティの操作はすべて操作した本人にしか通知されません (イベントが全体に共有されません)。ローカルイベントに応じてゲームの実行状態を変更しても、それは本人にしか反映されません。上のコード例で言えば、仮に <code>blueButton.pointUp</code> で直接 <code>userColors</code> を変更しても、それはあくまでボタンを押した本人の手元でしか反映されないことになります。この場合、その後画面をクリックした時、本人の手元では青の矩形が表示されるようになりますが、他のプレイヤーの手元では (<code>userColors</code> が変更されていないので) 同じ位置に赤の矩形が表示されてしまいます。</p><p>これを解決するには、ローカル処理の中から「ゲーム開発者が明示的に全体にイベントを共有する」処理が必要です。それが <code>g.game.raiseEvent()</code> です。</p><p><code>raiseEvent()</code> で <code>g.MessageEvent</code> を生成してそれを全体に共有し、 <code>userColors</code> の変更は <code>g.MessageEvent</code> のハンドラ <code>g.Scene#message</code> の中で行うことで、すべてのプレイヤーの手元で <code>userColors</code> の変更を行うことができます。</p><p><code>g.MessageEvent</code> はゲーム開発者が生成できるイベントで、第一引数に任意のデータを与えることができます。このデータは、受信側 (<code>scene.message</code> の中) では <code>msg.data</code> として参照できます。イベントにはそれを生成したプレイヤー情報がついているので、 上のコード例では <code>scene.message</code> 内で <code>msg.player.id</code> で送信したプレイヤーを特定して、色情報を更新しています。</p><p>流れを整理すると次のようになります。</p><ol><li>ローカルエンティティで表示した UI をプレイヤー A が操作する</li><li>プレイヤー A にローカルイベントが通知される</li><li>プレイヤー A の手元で起きたローカルイベントの処理が <code>raiseEvent()</code> を呼び出す (プレイヤー A の色情報を送信する)</li><li><code>raiseEvent()</code> されたイベントが全プレイヤーに通知される</li><li><code>raiseEvent()</code> されたイベントを処理してゲームのグローバルな実行状態を変更する (全員がプレイヤー A の矩形の色情報を更新する)</li></ol><p><code>raiseEvent()</code> はローカルイベントの処理中にしか呼び出すべきではないことに注意してください。非ローカルイベントで行う処理は全プレイヤーが実行するため、そこで <code>raiseEvent()</code> を呼び出すと、プレイヤーの人数分のイベントが輻輳して送信されることになってしまいます。</p><h2 id="local-operation" tabindex="-1">ローカル処理とその制限 <a class="header-anchor" href="#local-operation" aria-label="Permalink to &quot;ローカル処理とその制限 {#local-operation}&quot;">​</a></h2><p>ローカルイベントに起因して実行される処理を、<strong>ローカル処理</strong> と呼ぶことにします。</p><p>これは、主に <code>g.E#pointDown</code> などにローカルイベントが通知された時の処理を指します。ローカル処理中に呼び出された <code>g.Scene#setTimeout()</code> が引き起こす処理もローカル処理に含みます。</p><p>ローカル処理には、そこでのみ許される処理や、逆に禁止される処理が存在します。</p><ul><li>ローカル処理で禁止される処理 <ul><li>ローカルでないエンティティの生成・操作</li><li>シーン遷移</li><li>(ローカル処理以外で利用している)乱数生成器(<code>g.Game#random</code> など)の利用</li></ul></li><li>ローカル処理で許される処理 <ul><li>ローカルエンティティの生成・操作</li><li><code>g.Game#focusingCamera</code> の変更 (次節で説明します)</li><li><code>Math.random()</code> の利用 (ローカル処理でのみ可能)</li><li>全体への通知 (<code>g.Game#raiseEvent()</code> の呼び出し) (ローカル処理でのみ可能)</li></ul></li></ul><p>ローカルイベントはそれを発生させたプレイヤーにとってしか存在しないので、ローカル処理では「プレイヤー間で間接的に共有されている実行状態」を破壊してはいけません。すなわち、同じ操作によって同じ実行状態が再現できなくなるような変更をしてはいけません。</p><p>例として、幅・高さが 100 で、 <code>touchable</code> が真である、ローカルでない矩形のエンティティを考えます。ローカル処理の中でこのエンティティの位置を原点から (200, 0) の位置に移動させたとします。するとそれ以降、たとえば (50, 50) の位置に対するポイント押下イベントの結果は、プレイヤー間によって異なるものになってしまいます。このようなエンティティ操作に限らず、ローカル処理では「非ローカルエンティティの生成」や「シーン遷移」「(ゲーム開発者が作った)ゲーム状態の変更」など、破壊的操作のほとんどを行ってはいけません。</p><p>通常の場合と異なり、Akashic Engine の乱数生成器 (<code>g.Game#random</code>) の利用も避けてください。ローカル処理によって特定のプレイヤーでのみ乱数生成が行われると、乱数生成器の内部状態が変わります。その結果、それ以降で各プレイヤーが乱数を生成した時に得られる数の系列が、一人だけ異なるものになってしまいます。ローカル処理で乱数を利用したい時(またその時のみ)は、 <code>Math.random()</code> を用いるべきです。 (正確には、ローカル処理以外でまったく使われていない乱数生成器であれば、ローカル処理中で利用しても問題はありません。 <code>new g.XorshiftRandomGenerator()</code> によって独自に生成した乱数生成器を、ローカル処理専用に用いることはできます。ただしこの場合、乱数生成器の生成時に同一シードを与えてしまうと、ローカル処理であるにも関わらず乱数の系列が他プレイヤーと同じになることには注意してください)</p>`,38),e=[o];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const g=s(p,[["render",c]]);export{F as __pageData,g as default};
