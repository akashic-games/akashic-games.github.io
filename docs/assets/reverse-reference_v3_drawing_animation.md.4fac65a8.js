import{_ as n,C as o,o as l,c as e,H as p,Q as s}from"./chunks/framework.459ab1e9.js";const m=JSON.parse('{"title":"トゥイーンアニメーションする","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/drawing/animation.md","filePath":"reverse-reference/v3/drawing/animation.md"}'),c={name:"reverse-reference/v3/drawing/animation.md"},t=s(`<h1 id="トゥイーンアニメーションする" tabindex="-1">トゥイーンアニメーションする <a class="header-anchor" href="#トゥイーンアニメーションする" aria-label="Permalink to &quot;トゥイーンアニメーションする&quot;">​</a></h1><p>トゥイーンアニメーションを行うには <code>akashic-timeline</code> を利用します。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@akashic-extension/akashic-timeline&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> timeline </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> tl.</span><span style="color:#B392F0;">Timeline</span><span style="color:#E1E4E8;">(scene);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// e を現在位置から座標 (300, 0) へ 2000 ミリ秒かけて動かすアニメーションを実行</span></span>
<span class="line"><span style="color:#E1E4E8;">timeline.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(e).</span><span style="color:#B392F0;">moveTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@akashic-extension/akashic-timeline&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> timeline </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> tl.</span><span style="color:#6F42C1;">Timeline</span><span style="color:#24292E;">(scene);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// e を現在位置から座標 (300, 0) へ 2000 ミリ秒かけて動かすアニメーションを実行</span></span>
<span class="line"><span style="color:#24292E;">timeline.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(e).</span><span style="color:#6F42C1;">moveTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">300</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span></code></pre></div><p>「毎フレーム描画位置を変える」といった簡単なアニメーションの場合は <a href="./move-image.html"><code>onUpdate</code> トリガーを利用して</a> 自力で動かすこともできます。 akashic-timeline を利用すると、拡大と移動の同時実行や、イージングなど複雑なアニメーションを簡潔に記述することができます。</p><p>画像を切り替えるパラパラアニメ (フレームアニメーション) を行うには <a href="./frame-animation.html"><code>g.FrameSprite</code> を利用してください。</a></p><h2 id="利用例" tabindex="-1">利用例 <a class="header-anchor" href="#利用例" aria-label="Permalink to &quot;利用例&quot;">​</a></h2>`,7),r=s(`<h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><p><code>akashic-timeline</code> は Akashic Engine 向けのトゥイーンアニメーションライブラリです。</p><p><code>akashic-timeline</code> のインストールは game.json が置かれているディレクトリで以下のコマンドを実行してください。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">akashic</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@akashic-extension/akashic-timeline</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">akashic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@akashic-extension/akashic-timeline</span></span></code></pre></div><p><code>akashic-timeline</code> を利用したいシーンで以下のように require を行い、<code>scene.onLoad</code> 内で <code>Timeline</code> を生成します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@akashic-extension/akashic-timeline&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">scene.onLoad.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> timeline </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> tl.</span><span style="color:#B392F0;">Timeline</span><span style="color:#E1E4E8;">(scene);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tween </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timeline.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@akashic-extension/akashic-timeline&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">scene.onLoad.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> timeline </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> tl.</span><span style="color:#6F42C1;">Timeline</span><span style="color:#24292E;">(scene);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tween </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timeline.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>timeline.create()</code> を呼び出すことで <code>rect</code> をアニメーション対象とした <code>Tween</code> を生成することが出来ます。<code>Tween</code> とはアニメーションの実行単位であるアクションを操作するオブジェクトです。</p><p><code>timeline.create()</code> では <code>modified</code> オプションが省略された場合、<code>Tween</code> の対象オブジェクトの <code>modified()</code>が与えられます。 これまでの例では、 <code>modified</code> オプションで <code>rect.modified</code> を指定していました。 この <code>modified</code> オプションは、毎フレーム、アクションを実行した度に呼び出される関数を指定するものです。通常は Akashic のエンティティの <code>modified()</code> 関数を指定することになりますが、 <code>Tile</code> や <code>Label</code> のような内部描画キャッシュを持つエンティティの場合は、必要に応じて <code>invalidate()</code> 関数を指定してください。</p><h3 id="移動" tabindex="-1">移動 <a class="header-anchor" href="#移動" aria-label="Permalink to &quot;移動&quot;">​</a></h3><p>エンティティの移動を行うアニメーションは <code>moveX()</code>, <code>moveY()</code>, <code>moveTo()</code>, <code>moveBy()</code> があり、<code>.</code> で繋げることで続けて実行することが出来ます。下記のコードでは、X 座標 100 の位置に 1 秒かけて移動した後、Y 座標 50 に 2 秒かけて移動するアニメーションを行います。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">timeline</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">moveX</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">moveY</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">timeline</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">moveX</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">moveY</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span></code></pre></div><p>X 座標と Y 座標を同時に変化させたい場合は <code>moveTo()</code> アクションを利用します。 下記のコードでは、2 秒掛けて X 座標 300、Y 座標 400 の位置に移動するアニメーションを行います。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">timeline.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect).</span><span style="color:#B392F0;">moveTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">timeline.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect).</span><span style="color:#6F42C1;">moveTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">300</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">400</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span></code></pre></div><p>上記の例では絶対位置への移動でしたが、現在の位置からの相対位置に移動させるには <code>moveBy()</code> を利用することで相対位置への移動を行うことが出来ます。</p><h3 id="easing" tabindex="-1">Easing <a class="header-anchor" href="#easing" aria-label="Permalink to &quot;Easing&quot;">​</a></h3><p>Easing とはアニメーションの加速や減速方法を定義した関数です。 akashic-timeline では各アクションに様々な Easing を指定することが出来ます。 Easing を指定しない場合は、エンティティは直線的な動作で移動します。この時、内部的には <code>Easing.linear</code> が指定されています。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">timeline.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect).</span><span style="color:#B392F0;">moveTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">timeline.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect).</span><span style="color:#6F42C1;">moveTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">300</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">400</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span></code></pre></div><p><code>moveTo()</code> などの最後の引数に他の <code>Easing</code> を指定することで複雑なアニメーションをさせることが出来ます。<code>Easing</code> の各関数の動作は<a href="/demo/?title=timeline-easing-sample">イージング一覧で確認出来ます。</a>詳細は<a href="/akashic-timeline/api/modules/Easing.html">API リファレンスを参照してください。</a></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">timeline.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect).</span><span style="color:#B392F0;">moveTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">, tl.Easing.easeInCubic);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">timeline.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect).</span><span style="color:#6F42C1;">moveTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">300</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">400</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">, tl.Easing.easeInCubic);</span></span></code></pre></div><h3 id="回転" tabindex="-1">回転 <a class="header-anchor" href="#回転" aria-label="Permalink to &quot;回転&quot;">​</a></h3><p><code>rotateTo()</code> や <code>rotateBy()</code> を使うことで回転アニメーションを実現することが出来ます。</p><p>下記のコードでは、四角形を 90 度回転させています。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">timeline.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect).</span><span style="color:#B392F0;">rotateTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">90</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">timeline.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect).</span><span style="color:#6F42C1;">rotateTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">90</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="ループ" tabindex="-1">ループ <a class="header-anchor" href="#ループ" aria-label="Permalink to &quot;ループ&quot;">​</a></h3><p>ループは <code>timeline.create()</code> の <code>loop</code> オプションで指定することが出来ます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">timeline.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect, { loop: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">rotateTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">90</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">timeline.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect, { loop: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }).</span><span style="color:#6F42C1;">rotateTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">90</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="並列実行" tabindex="-1">並列実行 <a class="header-anchor" href="#並列実行" aria-label="Permalink to &quot;並列実行&quot;">​</a></h3><p>アクションを並列実行するには <code>con()</code> を利用します。 <code>con()</code> を呼び出した直前のアクションと直後のアクションを並列に実行することができます。</p><p>下記の例では、<code>moveTo()</code> で移動しながら <code>rotateTo()</code> で回転しています。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">timeline</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">moveTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">con</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">rotateTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">180</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">timeline</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">moveTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">con</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">rotateTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">180</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="その他のプロパティ制御" tabindex="-1">その他のプロパティ制御 <a class="header-anchor" href="#その他のプロパティ制御" aria-label="Permalink to &quot;その他のプロパティ制御&quot;">​</a></h3><p><code>moveTo()</code> や <code>rotateTo()</code> を使ってのアニメーションは内部的にアニメーション対象の x, y, angle 等のプロパティを変化させています。他のプロパティを制御したい場合は <code>to()</code> を使用することができます。</p><p>下記のコードでは、 <code>FilledRect</code> の <code>width</code> と <code>height</code> を変化させています。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">timeline</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect, { loop: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">({ width: </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">, height: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> }, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">({ width: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, height: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> }, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">timeline</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect, { loop: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">({ width: </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">, height: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> }, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">({ width: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, height: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> }, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span></code></pre></div><p>開始位置からの相対値を指定したい場合は <code>by()</code> を使用することができます。</p><p><code>to()</code> や <code>by()</code> を使用して数値型のプロパティを変化させることはできますが、 <code>FilledRect</code> の <code>cssColor</code> プロパティなど、数値型以外のプロパティを変化させることは出来ません。数値型以外のプロパティを変化させるには <code>every()</code> を使用することでプロパティを変化させることができます。下記のコードでは、<code>every()</code> に指定した関数の中で第二引数に変化量（0〜1）が渡されてくるので、 その値を元に <code>cssColor</code> を変化させています。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">timeline.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect).</span><span style="color:#B392F0;">every</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">elapsed</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">progress</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> progress);</span></span>
<span class="line"><span style="color:#E1E4E8;">  rect.cssColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`rgb(\${</span><span style="color:#E1E4E8;">c</span><span style="color:#9ECBFF;">},0,\${</span><span style="color:#E1E4E8;">c</span><span style="color:#9ECBFF;">} )\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">timeline.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect).</span><span style="color:#6F42C1;">every</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">elapsed</span><span style="color:#24292E;">, </span><span style="color:#E36209;">progress</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> progress);</span></span>
<span class="line"><span style="color:#24292E;">  rect.cssColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`rgb(\${</span><span style="color:#24292E;">c</span><span style="color:#032F62;">},0,\${</span><span style="color:#24292E;">c</span><span style="color:#032F62;">} )\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="アクションの完了と取り消し" tabindex="-1">アクションの完了と取り消し <a class="header-anchor" href="#アクションの完了と取り消し" aria-label="Permalink to &quot;アクションの完了と取り消し&quot;">​</a></h3><p>すべてのアクションを完了させたい場合は <code>complete()</code> を利用します。 下記のコードでは、<code>FilledRect</code> をクリックすると 2 秒掛けて透過度が 0 になるというアニメーションを即座に完了させることができます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tween </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timeline.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect).</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">({ opacity: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> }, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">rect.pointDown.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  tween.</span><span style="color:#B392F0;">complete</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tween </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timeline.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect).</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">({ opacity: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> }, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">rect.pointDown.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  tween.</span><span style="color:#6F42C1;">complete</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>また、アニメーションをその時点で取り消したい場合は <code>cancel()</code> を利用します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tween </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timeline.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(rect).</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">({ opacity: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> }, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">rect.pointDown.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  tween.</span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tween </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timeline.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(rect).</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">({ opacity: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> }, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">rect.pointDown.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  tween.</span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>特定の <code>Timeline</code> に紐付いたすべての <code>Tween</code> を完了させたい場合は <code>timeline.completeAll()</code> を、取り消したい場合は <code>timeline.cancelAll()</code> を利用することができます。</p><h3 id="tween-の破棄タイミング" tabindex="-1">Tween の破棄タイミング <a class="header-anchor" href="#tween-の破棄タイミング" aria-label="Permalink to &quot;Tween の破棄タイミング&quot;">​</a></h3><p><code>timeline.create()</code> で作成した <code>Tween</code> は <code>timeline.remove()</code> で破棄することができます。</p><p>破棄された <code>Tween</code> で定義したアクションは全て実行されなくなります。</p><p>また、以下の場合に <code>Tween</code> は自動的に破棄されます。</p><ul><li>全アクションが終了し、ループしない場合</li><li>アニメーション対象が破棄された場合</li></ul><h2 id="関連情報" tabindex="-1">関連情報 <a class="header-anchor" href="#関連情報" aria-label="Permalink to &quot;関連情報&quot;">​</a></h2><ul><li><a href="/akashic-timeline/api/">API リファレンス</a></li></ul>`,50);function E(i,y,d,h,F,v){const a=o("PlaygroundElement");return l(),e("div",null,[t,p(a,{gameJsonUri:"/snippets/reverse-reference/drawing/animation/game.json",width:600,height:400}),r])}const g=n(c,[["render",E]]);export{m as __pageData,g as default};
