import{_ as s}from"./chunks/cli-serve-playback-tool.MPqGTj1r.js";import{_ as i,c as a,o as n,a3 as t}from"./chunks/framework.B_s5ISUx.js";const F=JSON.parse('{"title":"スキップ時間を短縮する","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v3/multiplay/snapshot.md","filePath":"tutorial/v3/multiplay/snapshot.md"}'),l={name:"tutorial/v3/multiplay/snapshot.md"},e=t(`<h1 id="スキップ時間を短縮する" tabindex="-1">スキップ時間を短縮する <a class="header-anchor" href="#スキップ時間を短縮する" aria-label="Permalink to &quot;スキップ時間を短縮する&quot;">​</a></h1><h2 id="skip" tabindex="-1">スキップ <a class="header-anchor" href="#skip" aria-label="Permalink to &quot;スキップ {#skip}&quot;">​</a></h2><p>Akashic のマルチプレイでは、ゲームの途中で画面を開くと、最初にビデオ映像を早送りするような画面が表示されます。 <a href="./introduction.html#architecture-intro">マルチプレイの基礎</a> でも触れたとおり、これはゲームの最新状態に追いつくために、 それまでの操作 (イベント) を高速で消化することによるものです。 この早送り動作を <strong>スキップ</strong> と呼びます。</p><p>このスキップ処理によって、「他プレイヤーとの実行状態の共有」を意識することなくゲームを作成することができます。 他方この仕組みには <strong>プレイ時間に比例してスキップの時間が伸びていく</strong> という弱点があります。 大規模なゲームや、一度の起動中に繰り返し遊べるように作られたゲームでは、スキップ時間が非常に長くなってしまう場合があります。</p><p>この対策として、Akashic Engine は「スナップショット」という機能を提供しています。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>厳密には、スキップ処理はマルチプレイでない場合にも発生します。 例えばニコニコ生放送で、ニコ生ゲームを遊んでいる最中の配信を見始めた時は、 そのゲームがシングルプレイであっても (最新フレームに追いつくために) スキップが発生します。 また過去のプレイのリプレイの再生中に、シークバーを操作して大きく時間をジャンプするような場合にも、 スキップが発生することがあります。</p></div><h2 id="snapshot" tabindex="-1">スナップショット <a class="header-anchor" href="#snapshot" aria-label="Permalink to &quot;スナップショット {#snapshot}&quot;">​</a></h2><p>Akashic Engine において、ゲームの実行状態をシリアライズしたオブジェクトを <strong>スナップショット</strong> と呼びます。 ゲーム開発者は、ゲームのスナップショットを作成し、エンジンに保存を要求することができます。</p><p>エンジンは、ゲームプレイのある時点 (最新フレームなど) に追いつく必要がある場合、 まずその時点より前のもっとも近いスナップショットを探します。 スナップショットが見つからなければ、エンジンは単にゲーム開始からのすべての操作を早送りで消化 (スキップ) します。 もし見つかれば、スナップショットをゲームに渡して状態を復元させ、そこから目標の時点までスキップ処理を行います。 これによりスキップの時間を短縮することができます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>このようにスナップショットは、ゲームのいわゆる「セーブデータ」とは異なることに注意してください。 たとえばプレイヤーがスナップショットを選んでロードするようなことはできません。 あくまでスキップ処理の時間を短縮するために、エンジンが自動的に検索して利用するために存在します。</p></div><p>スナップショットを利用するには、次の二つが必要です:</p><ul><li>適時スナップショットを作成・保存する処理</li><li>ゲームがスナップショットつきで起動された時、スナップショットから状態を復元する処理</li></ul><h3 id="save" tabindex="-1">スナップショットの保存 <a class="header-anchor" href="#save" aria-label="Permalink to &quot;スナップショットの保存 {#save}&quot;">​</a></h3><p>スナップショットの保存は、 <code>g.game.requestSaveSnapshot()</code> によって要求することができます。</p><p>詳細な仕様は後述しますが、このメソッドは主に以下の形で利用します。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Jhy_U" id="tab-yU5tNFh" checked><label for="tab-yU5tNFh">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestSaveSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ゲームの実行状態を表すデータ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { snapshot: snapshot };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><p>すなわち <code>requestSaveSnapshot()</code> は引数として関数を取ります。 この関数は、 <code>requestSaveSnapshot()</code> を呼び出したフレームの終了時に引数なしで呼び出されます。</p><p>関数の戻り値として、 <code>snapshot</code> プロパティを持つオブジェクトを返してください。 このプロパティの値がスナップショットとして保存されます。 このプロパティの値は JSON として妥当な値でなければなりません。</p><h3 id="restore" tabindex="-1">スナップショットからの復元 <a class="header-anchor" href="#restore" aria-label="Permalink to &quot;スナップショットからの復元 {#restore}&quot;">​</a></h3><p>一度でもスナップショットを保存する場合、 <strong>スナップショットからの復元</strong> 処理を実装する必要があります。</p><p>スナップショットが利用される場合、まず現在のゲームの実行状態が破棄されます。 その後通常のゲーム開始時と同じように、 main スクリプト (のエクスポートした関数) が呼び出されます。 ただしこの時、第一引数の <code>snapshot</code> プロパティにスナップショットが渡されます。 その値は、同じゲームが過去に <code>g.game.requestSaveSnapshot()</code> で保存させた値のいずれかです。</p><p>スナップショットからの復元処理とは、文字通り渡されたスナップショットから、保存時点のゲーム状態を再現することです。</p><p>以下の例は、画面中央付近の数字をインクリメントしていくだけの非常に単純なゲームです。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-AhagU" id="tab-Qm_U31J" checked><label for="tab-Qm_U31J">JavaScript</label><input type="radio" name="group-AhagU" id="tab-l8pp_2A"><label for="tab-l8pp_2A">TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// script/main.js (mainスクリプト)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene.onLoad.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    g.game.vars.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> font</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DynamicFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      game: g.game,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fontFamily: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sans-serif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      size: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      font: font,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fontSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.vars.value,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      x: g.game.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      y: g.game.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    label.onUpdate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      label.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.vars.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      label.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(label);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scene);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> main;</span></span></code></pre></div><div class="language-TypeScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/main.ts (mainスクリプト)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene.onLoad.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    g.game.vars.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> font</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DynamicFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      game: g.game,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fontFamily: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sans-serif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      size: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      font: font,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fontSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.vars.value,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      x: g.game.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      y: g.game.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    label.onUpdate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      label.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.vars.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      label.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(label);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scene);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>このゲームは、次のように変更することでスナップショットに対応させることができます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-ORByF" id="tab-fGiszzs" checked><label for="tab-fGiszzs">JavaScript</label><input type="radio" name="group-ORByF" id="tab-w91OnQS"><label for="tab-w91OnQS">TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// script/main.js (mainスクリプト)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 引数 param に snapshot プロパティがあればそこから復元。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // なければ通常のゲーム開始だが、ここでは「空オブジェクト ({}) からの復元」として一本化。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> param.snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene.onLoad.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // スナップショットからの復元なら保存されていた値、そうでなければ 0 で初期化。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    g.game.vars.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> snapshot.val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> font</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DynamicFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      game: g.game,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fontFamily: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sans-serif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      size: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      id: snapshot.labelId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エンティティIDを復元していることに注意(後述)。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      font: font,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fontSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.vars.value,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      x: g.game.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      y: g.game.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    label.onUpdate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      label.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.vars.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      label.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(label);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1 分 (60 * 1000 ms) おきにスナップショットを保存。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestSaveSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          val: g.game.vars.value,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          labelId: label.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { snapshot: snapshot };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scene);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> main;</span></span></code></pre></div><div class="language-TypeScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/main.ts (mainスクリプト)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SnapShot の型定義</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Snapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// label に表示する値</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  labelId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// label の Id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GameMainParameterObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 引数 param に snapshot プロパティがあればそこから復元。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // なければ通常のゲーム開始だが、ここでは「空オブジェクト ({}) からの復元」として一本化。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> param.snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene.onLoad.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // スナップショットからの復元なら保存されていた値、そうでなければ 0 で初期化。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    g.game.vars.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> snapshot.val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> font</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DynamicFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      game: g.game,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fontFamily: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sans-serif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      size: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      id: snapshot.labelId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エンティティIDを復元していることに注意(後述)。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      font: font,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fontSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.vars.value,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      x: g.game.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      y: g.game.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    label.onUpdate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      label.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.vars.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      label.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(label);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1 分 (60 * 1000 ms) おきにスナップショットを保存。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestSaveSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          val: g.game.vars.value,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          labelId: label.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { snapshot: snapshot };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scene);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p><code>scene.setInterval()</code> で 1 分おきにスナップショットを作成、保存するようになっています。 このゲームの実行状態は画面中央の数字 (<code>g.game.vars.value</code> の値) だけなので、その値をスナップショットに含めています。 また <code>main()</code> の引数 <code>param</code> を受け取り、 <code>param.snapshot</code> を参照してゲームの実行状態を復元しています。 スナップショットが指定されない場合、従来と動作が変わっていないことに注意してください。</p><p>ただしここで、ラベルエンティティ <code>label</code> の <code>id</code> プロパティもスナップショットに含めている点に注意する必要があります。</p><p>すなわちゲームの実行状態には、通常暗黙に設定され、意識する必要もない「エンティティの ID」(後述) さえ含まれます。 このようにスナップショットは、シーンの状態からエンティティの ID ・ カメラの状態やプレイヤーの参加状態・スワイプ中ならその状態など、すべて何もかも保存・復元しなければなりません。 これは技術的には可能ですが、動作確認を含めて簡単に実装できるものではありません。</p><p>そこで一般には、 <strong>できるだけ内部状態を持たないタイミングを作り、そこでのみスナップショットを保存する</strong> ことを推奨します。</p><h2 id="save-timing" tabindex="-1">保存のタイミング <a class="header-anchor" href="#save-timing" aria-label="Permalink to &quot;保存のタイミング {#save-timing}&quot;">​</a></h2><p>スナップショットの保存は、「内部状態がほとんどない」フレームで行うことを推奨します。</p><p>「内部状態がほとんどない」とは、次の全てを満たすような状況です。</p><ul><li>(非ローカルの) エンティティがない</li><li>シーンが一つだけである</li><li>タイマー待ち (<code>setInterval()</code> などで渡した関数の呼び出し待ち) がない</li><li>ゲームがひと段落した <strong>&quot;合間&quot;</strong> である</li></ul><p>例えば対戦ゲームであれば「対戦の決着がついて、メニュー画面に戻る直前」などが &quot;合間&quot; に該当するでしょう。 対戦中は「キャラクターの体力」「キャラクターの位置」「残り時間」「スコア」「アニメーションの再生状態」など、 ゲームによってさまざまな状態があり得ますが、 &quot;合間&quot; にはそれらがありません。 また画面に何も表示しなくても違和感を覚えられにくいはずです。 このようなタイミングでは、スナップショットの保存・復元は非常に単純になります。</p><p>極論、ゲームがその一種類の &quot;合間&quot; でしかスナップショットを保存しないのであれば、 保存する値は空オブジェクト (<code>{}</code>) だけにすることすらできます。 スナップショットからの復元処理は、単に「メニュー画面」を表示するだけの処理になるためです。 もちろん「ハイスコア」「戦績」など、対戦を通して持ち越す情報がある場合は、その値をスナップショットに含めてください。</p><h2 id="pitfall-just-in-time" tabindex="-1">注意点: スナップショットを事前に生成しない <a class="header-anchor" href="#pitfall-just-in-time" aria-label="Permalink to &quot;注意点: スナップショットを事前に生成しない {#pitfall-just-in-time}&quot;">​</a></h2><p><strong>スナップショットは、 <code>requestSaveSnapshot()</code> に与えた関数 (コールバック) の中で生成してください</strong> 。</p><p>以下はこれに反するコード例です。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-QZ46i" id="tab-IcRGlUy" checked><label for="tab-IcRGlUy">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NG: スナップショットを事前に生成している</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestSaveSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { snapshot: snapshot };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><p>次のように、 <code>requestSaveSnapshot()</code> に与えた関数の中で生成してください。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-4Letq" id="tab-wAi9nla" checked><label for="tab-wAi9nla">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK: スナップショットを保存直前に生成している</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestSaveSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { snapshot: snapshot };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><p>これは Akashic Engine のゲームがフレーム単位で実行されることに起因しています。 スナップショットから復元した場合、処理は「スナップショットを保存したフレーム」の次のフレームから始まります。 そのためフレームの &quot;途中&quot; でスナップショットを保存することはできません。 スナップショットは「それを保存したフレーム」の終了時の状態を表す必要があります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>そもそも <code>requestSaveSnapshot()</code> が、直接スナップショットを引数に取らないのも、 コールバックを (呼び出された瞬間ではなく) フレームの終了時に呼び出すのもこのためです。</p></div><p><code>requestSaveSnapshot()</code> を呼び出す時、スナップショットを事前に生成してしまうと、「フレームの終了時」の状態と異なる可能性があります。 例えば次のようなコードが考えられます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-pwN0e" id="tab-inEJawA" checked><label for="tab-inEJawA">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scene.onPointDownCapture.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  score</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scne.onMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ev.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ev.data.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SNAPSHOT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // NG: スナップショットを事前に生成している</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { score: score };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestSaveSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { snapshot: snapshot };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><p>このコードは画面がクリックされるたびに <code>score</code> の値を増やしていき、 <code>data.type</code> が <code>&quot;SNAPSHOT&quot;</code> である <code>g.MessageEvent</code> を受信するたびにスナップショットを保存します。</p><p>このコードが、たまたま同一フレームで <code>g.MessaveEvent</code> と <code>g.PointDownEvent</code> を受信したとします。 <code>g.MessaveEvent</code> が先に処理された場合、その時点でスナップショットが生成されます。 しかしその後 <code>g.PointDownEvent</code> を処理するので <code>score</code> は 1 増えます。 そうなると、スナップショットに保存される <code>score</code> の値と、このフレームの終了時の <code>score</code> の値は 1 ずれてしまいます。</p><p>次のように <code>requestSaveSnapshot()</code> のコールバック内でスナップショットを生成すれば、この問題は起きません。 <code>g.MessaveEvent</code> によって更新された後の <code>score</code> の値がスナップショットに保存されます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-OdLI4" id="tab-9zrYFlK" checked><label for="tab-9zrYFlK">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scne.onMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ev.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ev.data.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SNAPSHOT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestSaveSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> snapshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { score: score };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { snapshot: snapshot };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><p>言い換えれば、<strong>スナップショットに保存する実行状態は、<code>requestSaveSnapshot()</code> を呼び出す時点のものではなく、コールバックが呼び出された時点のものでなければなりません。</strong></p><p>もし <code>requestSaveSnapshot()</code> のコールバックが呼ばれた時点 (フレームの終了時) で、 スナップショットが生成できない・生成しにくい状態 (アニメーション中のエンティティがあるなど) になっていた場合は、 <code>null</code> を返してください。 この場合エンジンは何も保存しません。 (もちろんコンテンツはこのような状況を作らないことができるはずです。)</p><h2 id="save-restore-wrap-up" tabindex="-1">保存と復元まとめ <a class="header-anchor" href="#save-restore-wrap-up" aria-label="Permalink to &quot;保存と復元まとめ {#save-restore-wrap-up}&quot;">​</a></h2><p>以上をまとめると、スナップショットの保存と復元では次の点が重要です。</p><ul><li><strong>保存</strong><ul><li><code>g.game.requestSaveSnapshot()</code> で保存する</li><li>保存は「内部状態がほぼない」フレームで行う</li><li>スナップショットは <code>requestSaveSnapshot()</code> に渡した関数の中で生成する</li><li>スナップショットには、そのフレームの終了時の状態を復元できるだけの内容を含める</li></ul></li><li><strong>復元</strong><ul><li>ゲーム起動時の引数にスナップショットが渡されたらそれを使って復元する</li><li>シーンを生成しその <code>onLoad</code> ハンドラが終わるまでの間に、保存時の状態を再現する</li></ul></li></ul><h2 id="snapshot-debug" tabindex="-1">スナップショットの動作確認 <a class="header-anchor" href="#snapshot-debug" aria-label="Permalink to &quot;スナップショットの動作確認 {#snapshot-debug}&quot;">​</a></h2><p>スナップショットは、特定のフレームに「追いつく」必要がない限り利用されないので、動作確認のしにくい機能です。 akashic-cli@2.13.0 以降の akashic serve では、スナップショットの動作確認のためにいくつかの機能を提供しています。</p><ul><li>Playback ツール</li><li>クエリパラメータ</li></ul><h3 id="playback-devtool" tabindex="-1">Playback ツール <a class="header-anchor" href="#playback-devtool" aria-label="Permalink to &quot;Playback ツール {#playback-devtool}&quot;">​</a></h3><p>Playback ツールは、 serve の画面右上のハンバーガーボタン (三本線のアイコン) をクリックした時に表示される開発者ツール (devtool) の一つです。</p><p><img src="`+s+'" alt="akashic-cli@2.13.0 の akashic serve の Playback ツールのスクリーンショット"></p><p>主に次のような機能があります。</p><ul><li>実行中のプレイで保存されたスナップショットの一覧表示</li><li>スナップショットでのゲームのリセット</li><li>スナップショットのダンプ</li></ul><p>スナップショット一覧の左側、三角形のボタン (再生ボタン) を押すと、そのスナップショットでゲームをリセットします。 それによってスナップショットを保存した時点に「ジャンプ」することができます。</p><p>一覧の右側 <code>console.log()</code> ボタンを押すと、対応するスナップショットの内容 (正確にはそれを含んだ「スタートポイント」と呼ばれるデータ) がコンソールに出力されます。</p><p>シークバーは、このインスタンスの現在のゲーム内時間を表しています。 serve の画面上部 (ツールバー) のシークバーと連動しています。 上の画像では、シークバーの濃い灰色のゲージが途中から始まっています。 ゲージの左端は、ゲームをリセットした時のゲーム内時間 (現在のゲーム実行がいつのスナップショットから始まったか) を表しています。</p><p><code>Pause active</code> ボタンを押すと、他ウィンドウを含めた全インスタンスの実行を一時停止することができます。 (serve の画面上部 (ツールバー) の同じアイコンのボタンと同一の機能です。) 通常、あるウィンドウでリプレイ再生を行っている間も、ゲーム全体は進行し続けています。 たとえば他のウィンドウは止まりません。 これはスナップショットの動作確認の上では不便なことが多いので、その場合には <code>Pause active</code> ボタンを利用してください。</p><p>その他細かな機能は実験中のものです。将来のバージョンで変化することがあります。</p><h3 id="debug-query-param" tabindex="-1">クエリパラメータ <a class="header-anchor" href="#debug-query-param" aria-label="Permalink to &quot;クエリパラメータ {#debug-query-param}&quot;">​</a></h3><p>保存したスナップショットのフレームが (Playback ツールなどで) わかっている場合、クエリパラメータを指定することでページを開いた直後の実行状態を制御できます。</p><p>例えばポート 3300 で akashic serve を実行中、次の URL にアクセスすると、</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://localhost:3300/public/?mode=replay&amp;replayResetAge=1500&amp;replayTargetTime=180000</span></span></code></pre></div><p>以下の状態でウィンドウを開くことができます。</p><ul><li>akashic serve の現在のプレイを、リプレイモード (<code>mode=replay</code>) で開始し、</li><li>age 1500 のスナップショットでゲームをリセット (<code>replayResetAge=1500</code>) して、</li><li>シークバーを 3 分 0 秒 (180000 ミリ秒) 地点に動かし (<code>replayTargetTime=180000</code>) た状態</li></ul><p>以下のクエリパラメータがサポートされています。</p><table tabindex="0"><thead><tr><th style="text-align:center;">パラメータ名</th><th style="text-align:center;">値</th><th style="text-align:center;">デフォルト値</th><th style="text-align:left;">内容</th></tr></thead><tbody><tr><td style="text-align:center;"><code>mode</code></td><td style="text-align:center;"><code>replay</code> または <code>passive</code></td><td style="text-align:center;"><code>passive</code></td><td style="text-align:left;"><code>replay</code> の場合、リプレイモード(シークバーを操作して過去の状態を表示させている状態)で開始します。 <code>passive</code> (省略時) は最新フレームに追いつこうとする通常のモードで開始します。</td></tr><tr><td style="text-align:center;"><code>replayResetAge</code></td><td style="text-align:center;">整数値 (age)</td><td style="text-align:center;">なし</td><td style="text-align:left;"><code>mode=replay</code>の場合のみ有効。指定した場合、その age (ゲーム開始からの経過フレーム数) で保存されたスナップショット (またはその age 以前で最も近いもの) でゲーム状態をリセットして開始します。</td></tr><tr><td style="text-align:center;"><code>replayTargetTime</code></td><td style="text-align:center;">整数値 (ゲーム開始からのミリ秒の経過時刻)</td><td style="text-align:center;"><code>0</code></td><td style="text-align:left;"><code>mode=replay</code>の場合のみ有効。指定した場合、シークバーがその値の位置にシークされた状態で開始します。 <code>replayResetAge</code> を指定する場合、実質的に必須のパラメータです (指定しないとリセット時刻と関係なく時刻 0 に行ってしまうため)。</td></tr><tr><td style="text-align:center;"><code>paused</code></td><td style="text-align:center;"><code>true</code> または <code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:left;"><code>true</code> の場合、一時停止状態で開始します。</td></tr></tbody></table><p>ただしクエリパラメータのキー名などは実験的なものです。URL 部分などを含め、今後のバージョンで変化する可能性があります。</p><p>またこれらの他にも、単純にマルチプレイでブラウザウィンドウ (インスタンス) を追加した時にも、スナップショットは利用されます。 追加されたウィンドウでは、最新のスナップショットから状態を復元してから実行を開始しようとするためです。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>どのスナップショットで開始しても、ゲームは同じ時刻に同じ状態にならなければなりません。 例えば <code>replayResetAge</code> の値だけが異なるウィンドウを複数開いた時、それらは全て同じ画面表示になる必要があります (ローカルエンティティを除き)。 もしそうでなければ、スナップショットの保存・復元処理に問題があるので、修正が必要です。 スナップショットの扱いに問題があると、特にプレイヤー間の実行状態がずれてしまい、マルチプレイが破綻します。</p></div><h2 id="request-save-snapshot" tabindex="-1">補足 1: g.game.requestSaveSnapshot() の仕様 <a class="header-anchor" href="#request-save-snapshot" aria-label="Permalink to &quot;補足 1: g.game.requestSaveSnapshot() の仕様 {#request-save-snapshot}&quot;">​</a></h2><p>スナップショット保存を要求するメソッド <code>g.game.requestSaveSnapshot()</code> は、次のシグネチャを持ちます。</p><div class="language-TypeScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestSaveSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fun: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.SnapshotSaveRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, owner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> any): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span></span></code></pre></div><p>引数 <code>fun</code> は関数でなければなりません。 <code>fun()</code> は <code>requestSaveSnapshot()</code> を呼び出したフレームの終了時に、引数なしで呼び出されます。 引数 <code>owner</code> は任意の値で、 <code>fun()</code> の呼び出し時に <code>this</code> として与えられます。</p><p><code>fun()</code> は戻り値として <code>null</code> または <code>g.SnapshotSaveRequest</code> を返さなければなりません。 <code>g.SnapshotSaveRequest</code> を返した場合、その値を元にスナップショットの保存要求が行われます。 <code>null</code> を返した場合、保存は行われません。</p><p><code>g.SnapshotSaveRequest</code> は、次のプロパティを持つオブジェクトです:</p><table tabindex="0"><thead><tr><th style="text-align:center;">プロパティ名</th><th style="text-align:center;">型</th><th style="text-align:left;">内容</th></tr></thead><tbody><tr><td style="text-align:center;"><code>snapshot</code></td><td style="text-align:center;"><code>any</code></td><td style="text-align:left;">スナップショットデータ。JSON として妥当な値である必要があります。</td></tr><tr><td style="text-align:center;"><code>timestamp</code></td><td style="text-align:center;"><code>number</code></td><td style="text-align:left;">時刻。省略可能。通常、省略してください。この詳細は <code>g.TimestampEvent</code> (文書化されていない機能) と併せて文書化されます。</td></tr></tbody></table><p>マルチプレイの場合、<code>requestSaveSnapshot()</code> は (他の非ローカルな処理と同様に) 全インスタンスで呼び出してください。 ただし <code>fun()</code> はそのうちの一部のインスタンスでのみ呼び出されます。 なぜなら、同じプレイの同じフレームのスナップショットは一意なはずなので、マルチプレイであっても一箇所でしか保存する必要がないためです。 実装的にもスナップショットを保存できるプレイヤー (インスタンス) は限られています。 <code>requestSaveSnapshot()</code> は、実際にスナップショットを保存できるインスタンスでのみ <code>fun()</code> を呼び出し、それ以外の場合は何もしません。 このことから、スナップショットにはローカルな状態を保存することはできません。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通常この「スナップショットの保存を実際に行うインスタンス」は、プレイの中で一つだけ存在します。 現在の akashic serve やニコ生ゲーム環境では、サーバサイドで動作する特殊なインスタンスが該当します。 自分がスナップショットの保存を行うインスタンスであるかどうかは、 <code>g.game.shouldSaveSnapshot()</code> で判定できます。 ただし通常この判定が必要になることはありません。(<code>requestSaveSnapshot()</code> が行うため)</p></div><p>保存を要求したスナップショットがすべて保存されることは保証されません。 高すぎる頻度の保存や、大きすぎるスナップショットまたはその他の理由で、保存要求が無視されることがあります。 具体的な制限はサービス依存ですが、保存頻度に関しては、現在のところ目安として「1 分以上の間隔をあけて保存する」を推奨します。 スナップショットが一部または全部保存されていなかったとしても、スキップ時間が延びる以外の影響はありませんし、あってはいけません。</p><h2 id="nontrivial-snapshot" tabindex="-1">補足 2: &quot;合間&quot; でないタイミングでのスナップショット <a class="header-anchor" href="#nontrivial-snapshot" aria-label="Permalink to &quot;補足 2: &quot;合間&quot; でないタイミングでのスナップショット {#nontrivial-snapshot}&quot;">​</a></h2><p>前述のとおり、スナップショットはできる限り内部状態がないタイミングでの保存を推奨します。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>この推奨に従う限り、このページのここから先を読む必要はありません。</p></div><p>そうでないタイミングで保存する場合、ゲーム実行状態の復元に必要な情報はすべて、 ゲーム開発者によって収集されスナップショットとしてまとめられる必要があります。 これには以下のような情報が含まれうるでしょう。</p><ul><li>その時点で存在するエンティティ</li><li>その時点で存在するシーン <ul><li>複数のシーンを作成しているならその全て</li></ul></li><li>ゲーム内データ <ul><li>キャラクターの残り HP など</li><li><code>g.Game#vars</code> に保持している値</li><li>アニメーションの再生状態</li></ul></li><li>作成した乱数生成器</li><li>作成したカメラと現在の <code>g.Game#focusingCamera</code> の値</li><li>プレイヤーの Join 状態</li></ul><p>Akashic Engine のいくつかのクラスは、ゲーム開発者向けにスナップショット作成・復元を補助する API を提供しています。</p><h3 id="nontrivial-snapshot-entity" tabindex="-1">エンティティとローカルエンティティ <a class="header-anchor" href="#nontrivial-snapshot-entity" aria-label="Permalink to &quot;エンティティとローカルエンティティ {#nontrivial-snapshot-entity}&quot;">​</a></h3><p>エンティティは、ID を含めて保存・復元される必要があります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>エンティティ ID は、通常エンジンによって暗黙に設定される値で、 ポイントダウンイベントなどの対象エンティティの識別に使われています。 スナップショットからの復元時は、この値も明示的に指定して元の値を再現する必要があります。 というのも、ある ID を持つエンティティが、「スナップショットから復元したか否か」によって異なってしまうと、 「どの ID のエンティティを操作した」という情報の解釈がプレイヤーによって変わってしまい、マルチプレイが破綻するためです。</p></div><p>位置やサイズなどの他プロパティと合わせて、ID (<code>g.E#id</code>) もスナップショットに加えてください。 <code>g.E</code> とその派生クラスは、スナップショットから復元時のために、 コンストラクタ引数 (<code>g.EParameterObject</code>) で <code>id</code> を指定できるようになっています。 指定すると、エンジンによって暗黙に生成された ID の代わりに、指定された値を利用します。</p><p>スナップショットからの復元時には、ID を指定して同じクラスのインスタンスを <code>new</code> した上で、 元と同じプロパティを設定することになります。</p><p>他方でローカルエンティティは、スナップショットに保存する必要がありません。 スナップショットはローカルエンティティの状態を保存できない(すべきでない)からです。 というのも、スナップショットは一つのプレイの一つのフレームにおいて一意です。 しかしローカルエンティティは、同じプレイの同じフレームにおいても 各デバイス (エンジンインスタンス) 上で異なる状態をとることができます。 この性質はスナップショットには保存できません。 ここまでスナップショットはゲームの実行状態を「完全に復元する必要がある」と書いていますが、 この点は例外であることに気をつけてください。</p><p>スナップショットはローカルエンティティの状態を保存・復元できません。これは Akashic の制限です。</p><h3 id="nontrivial-snapshot-camera" tabindex="-1">カメラ <a class="header-anchor" href="#nontrivial-snapshot-camera" aria-label="Permalink to &quot;カメラ {#nontrivial-snapshot-camera}&quot;">​</a></h3><p>利用している場合、カメラ (<code>g.Camera</code>) も復元が必要です。</p><p>これには <code>g.Camera#serialize()</code> を利用することができます。 <code>serialize()</code> の戻り値をスナップショットに含めておき、 適切なクラス (現在は <code>g.Camera2D</code> のみです) の static メソッド <code>deserialize()</code> に渡すことでカメラを復元することができます。</p><p><code>g.Game#focusingCamera</code> の値も、保存するならば <code>id</code> で保持される必要があります。 ただしマルチプレイヤーゲームの <code>focusingCamera</code> の場合、その値はインスタンスごとに異なりうるでしょう。 その場合はローカルエンティティと同様、<code>g.game.focusingCamera</code> そのものの <code>id</code> を直接スナップショットに含めるべきではありません。</p><p>後述の「プレイヤーの状態」のデータとして各プレイヤーのカメラ ID も保時しておき、 復元時はプレイヤーに応じて <code>focusingCamera</code> を設定することになるでしょう。</p><h3 id="nontrivial-snapshot-scene" tabindex="-1">シーン <a class="header-anchor" href="#nontrivial-snapshot-scene" aria-label="Permalink to &quot;シーン {#nontrivial-snapshot-scene}&quot;">​</a></h3><p>シーン <code>g.Scene</code> の状態も、エンティティと同様に保存・復元される必要があります。 スナップショットからの復元時には、<code>g.Scene</code> (あるいはゲーム開発者の定義した派生クラス) を <code>new</code> した上で、元と同じハンドラを設定することになります。</p><p>単純なケースでは、シーンの初期化は全て <code>g.Scene#onLoad</code> の処理の中に記述されているでしょう。 スナップショットからの復元時であっても、シーンは新規生成時と同じパスを通ることになります。 したがって他にシーンに持たせているゲーム内データがなければ、通常時と同じようにシーンを生成し初期化処理を記述すればよいはずです。</p><h3 id="nontrivial-snapshot-randoms" tabindex="-1">乱数生成器 <a class="header-anchor" href="#nontrivial-snapshot-randoms" aria-label="Permalink to &quot;乱数生成器 {#nontrivial-snapshot-randoms}&quot;">​</a></h3><p>エンジンのデフォルト乱数生成器 <code>g.Game#random</code> は、エンジンによって自動的に状態が保存・復元されます。 それ以外の乱数生成器をゲーム開発者が作成している場合は、自力で保存・復元を行ってください。</p><p>これを実現するため、乱数生成器 <code>g.RandomGenerator</code> は <code>serialize()</code> を提供しています。 この関数の戻り値をスナップショットに含めておき、 元のクラス(<code>g.XorshiftRandomGenerator</code> など)の static メソッド <code>deserialize()</code> に渡すことで乱数生成器を復元できます。</p><h3 id="nontrivial-snapshot-join-state" tabindex="-1">プレイヤーの Join 状態 <a class="header-anchor" href="#nontrivial-snapshot-join-state" aria-label="Permalink to &quot;プレイヤーの Join 状態 {#nontrivial-snapshot-join-state}&quot;">​</a></h3><p>スナップショットからの復元時、その時点までに通知されていた <code>g.JoinEvent</code> や <code>g.LeaveEvent</code> が通知されなおすことはありません。 スナップショットには通知された結果として至った実行状態を直接保存し、またその状態を復元してください。</p><p><code>g.Game#onJoin</code>, <code>onLeave</code> を利用して Join したプレイヤーの情報を <code>g.Game#vars</code> に保持しているのであれば、 <code>vars</code> の内容をスナップショットに含めることでプレイヤーの参加状態も保存されることになります。</p><h3 id="nontrivial-snapshot-game-vars" tabindex="-1">g.Game#vars <a class="header-anchor" href="#nontrivial-snapshot-game-vars" aria-label="Permalink to &quot;g.Game#vars {#nontrivial-snapshot-game-vars}&quot;">​</a></h3><p>汎用のゲーム内データ保持領域として、エンジンは <code>g.Game#vars: any</code> を提供しています。 エンジンはこの値の内容に関知していないため、スナップショット保存上のサポートもありません。 必要なデータはゲーム開発者がスナップショットに保持する必要があります。</p><h3 id="nontrivial-snapshot-game-external" tabindex="-1">g.Game#external <a class="header-anchor" href="#nontrivial-snapshot-game-external" aria-label="Permalink to &quot;g.Game#external {#nontrivial-snapshot-game-external}&quot;">​</a></h3><p>サービス依存の外部インターフェース <code>g.Game#external</code> も同様に、スナップショット保存上のサポートはありません。 <code>external</code> の各実装ごとに提供される方法がある場合はそれを利用してください。</p>',120),p=[e];function h(k,d,E,r,g,c){return n(),a("div",null,p)}const u=i(l,[["render",h]]);export{F as __pageData,u as default};
