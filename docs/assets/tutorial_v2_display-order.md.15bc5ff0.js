import{_ as s}from"./chunks/sample05.44964326.js";import{_ as n,o as a,c as p,Q as l}from"./chunks/framework.f1c0562b.js";const h=JSON.parse('{"title":"表示順を制御する","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v2/display-order.md","filePath":"tutorial/v2/display-order.md"}'),o={name:"tutorial/v2/display-order.md"},e=l(`<h1 id="表示順を制御する" tabindex="-1">表示順を制御する <a class="header-anchor" href="#表示順を制御する" aria-label="Permalink to &quot;表示順を制御する&quot;">​</a></h1><p>このページのサンプルコードを<a class="asset--material--download" href="/zip/tutorial/v2/sample-display-order.zip">ダウンロード</a></p><h2 id="nested-entity" tabindex="-1">エンティティの入れ子 <a class="header-anchor" href="#nested-entity" aria-label="Permalink to &quot;エンティティの入れ子 {#nested-entity}&quot;">​</a></h2><p>シーンにエンティティを <code>append()</code> できるのと同様、エンティティにもまた別のエンティティを <code>append()</code> することができます。 すなわちエンティティは入れ子構造にできます。</p><p>エンティティ <code>p</code> と <code>c</code> があり、 <code>p.append(c)</code> された時、<code>c</code> を「 <code>p</code> の子エンティティ」と呼びます。 <code>p</code> を「 <code>c</code> の親エンティティ」と呼びます。</p><p>エンティティを入れ子構造にすることには、二つの意義があります。</p><ul><li>複数のエンティティをまとめて操作する</li><li>表示順を制御する</li></ul><p>第一に、複数のエンティティを一度に操作したい時に利用できます。 子エンティティは親エンティティに追従して動くためです。</p><p>特に <code>E</code> エンティティは、それ自体は何も描画しないエンティティで、複数のエンティティをグループ化する場合に便利です。</p><p>例えばエンティティ <code>E</code> に子エンティティとして <code>FilledRect</code> を追加する場合は、次のようなコードになります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">({ scene: scene });</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  height: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  cssColor: </span><span style="color:#9ECBFF;">&quot;red&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">group.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(child); </span><span style="color:#6A737D;">// group の子エンティティに child を追加</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">({ scene: scene });</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">  width: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  height: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  cssColor: </span><span style="color:#032F62;">&quot;red&quot;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">group.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(child); </span><span style="color:#6A737D;">// group の子エンティティに child を追加</span></span></code></pre></div><p>以下のプログラムでは、<code>angle</code> を設定した <code>E</code> オブジェクトに 3 つの矩形を追加しています。矩形の座標系は <code>E</code> を基準にして変わるので、3 つの矩形は斜めに配置されます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> scene </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene.loaded.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">({ scene: scene, x: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, angle: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rect1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRect</span><span style="color:#E1E4E8;">(scene, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;darkgreen&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    group.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(rect1);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rect2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRect</span><span style="color:#E1E4E8;">(scene, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;darkorange&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    group.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(rect2);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rect3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRect</span><span style="color:#E1E4E8;">(scene, </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;darkred&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    group.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(rect3);</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(group);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  g.game.</span><span style="color:#B392F0;">pushScene</span><span style="color:#E1E4E8;">(scene);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scene</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    x: x,</span></span>
<span class="line"><span style="color:#E1E4E8;">    y: y,</span></span>
<span class="line"><span style="color:#E1E4E8;">    cssColor: color</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> main;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> scene </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({ game: g.game });</span></span>
<span class="line"><span style="color:#24292E;">  scene.loaded.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">({ scene: scene, x: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, angle: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rect1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRect</span><span style="color:#24292E;">(scene, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;darkgreen&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    group.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(rect1);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rect2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRect</span><span style="color:#24292E;">(scene, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;darkorange&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    group.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(rect2);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rect3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRect</span><span style="color:#24292E;">(scene, </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;darkred&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    group.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(rect3);</span></span>
<span class="line"><span style="color:#24292E;">    scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(group);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  g.game.</span><span style="color:#6F42C1;">pushScene</span><span style="color:#24292E;">(scene);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRect</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scene</span><span style="color:#24292E;">, </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;">, </span><span style="color:#E36209;">color</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">    width: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    height: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    x: x,</span></span>
<span class="line"><span style="color:#24292E;">    y: y,</span></span>
<span class="line"><span style="color:#24292E;">    cssColor: color</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> main;</span></span></code></pre></div><p><img src="`+s+`" alt="sample05"></p><blockquote><p>Tips: <code>new</code> する時に親が決まっているなら、次のように <code>parent</code> プロパティで親を指定してしまうこともできます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">({ scene: scene });</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  height: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  cssColor: </span><span style="color:#9ECBFF;">&quot;red&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  parent: group </span><span style="color:#6A737D;">// parent プロパティで生成時に親を指定</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">({ scene: scene });</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">  width: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  height: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  cssColor: </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  parent: group </span><span style="color:#6A737D;">// parent プロパティで生成時に親を指定</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div></blockquote><h2 id="display-order" tabindex="-1">描画順 <a class="header-anchor" href="#display-order" aria-label="Permalink to &quot;描画順 {#display-order}&quot;">​</a></h2><p>エンティティを入れ子にする二つ目の意義は、描画順の制御です。</p><ul><li>エンティティは、自分のどの子エンティティよりも先に (奥側に) 描画されます。</li><li>同じ親を持つエンティティは、親に <code>append()</code> で追加された順に描画されます。</li></ul><p>言い換えると、エンティティのツリーは行きがけ順 (pre-order) で描画されます。 これを利用することでエンティティの前後関係を制御できます。</p><h2 id="modify-children" tabindex="-1">子エンティティの変更 <a class="header-anchor" href="#modify-children" aria-label="Permalink to &quot;子エンティティの変更 {#modify-children}&quot;">​</a></h2><p>上では子エンティティの描画順を「 <code>append()</code> で追加された順」としましたが、子エンティティの順序 (＝描画順) は、追加後でも自由に制御することもできます。</p><p>まず <code>append()</code> されたエンティティは、 <code>remove()</code> メソッドで親エンティティから切り離すことができます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">group.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(child); </span><span style="color:#6A737D;">// group の子エンティティから child を削除</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">group.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(child); </span><span style="color:#6A737D;">// group の子エンティティから child を削除</span></span></code></pre></div><p>エンティティの <code>remove()</code> を引数なしで呼び出すと、自分を親から切り離します。つまり上のコードは次のように書くこともできます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">child.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// child の親の子エンティティから child を削除</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">child.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// child の親の子エンティティから child を削除</span></span></code></pre></div><p>切り離されたエンティティは、また別のエンティティにの子になることができます。 <code>append()</code> された時親エンティティが既にある場合は、切り離してから新たな親の子エンティティになります。</p><p>また <code>append()</code> の代わりに <code>insertBefore()</code> を利用することもできます。 <code>append()</code> は常に「最後の子要素として」追加する関数ですが、 <code>insertBefore()</code> は子エンティティの中での順番を指定できます。次のように記述した場合、</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">parent.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(child, target);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">parent.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(child, target);</span></span></code></pre></div><p><code>parent</code> の子エンティティ <code>target</code> の直前の子要素として <code>child</code> を追加します。</p><p>前述のとおり、子エンティティ間の順序を制御することで、描画順を制御できることに注意してください。 たとえばゲーム内に &quot;地面&quot; と &quot;キャラクタ&quot; と &quot;宝箱&quot; があり、「宝箱の <code>Sprite</code> はいつ生成してもキャラクタの &quot;奥&quot; に表示したい」というような場合に、 <code>insertBefore()</code> を使うことができます。</p><blockquote><p>NOTE: もっとも、 &quot;地面&quot; と &quot;地表のアイテム&quot; と &quot;キャラクタ&quot; のように、描画順序の定まったカテゴリ分けができる場合、最初にそれらのカテゴリをまとめるエンティティを生成してしまう方が、単純になることもあるでしょう。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 表示順別ごとにエンティティをグループ化するための E を作って、</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> groundLayer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">({ scene: scene });</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> itemLayer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">({ scene: scene });</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> characterLayer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">({ scene: scene });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// シーンに表示順で追加しておく。</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(groundLayer);</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(itemLayer);</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(characterLayer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 地面画像は groundLayer に追加。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">groundSprite</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">  src: scene.assets[</span><span style="color:#9ECBFF;">&quot;ground&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  x: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  y: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  parent: groundLayer </span><span style="color:#6A737D;">// 親を groundLayer に</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// キャラ画像は characterLayer に追加。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">playerSprite</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">  src: scene.assets[</span><span style="color:#9ECBFF;">&quot;player&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  x: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  y: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  parent: characterLayer </span><span style="color:#6A737D;">// 親を characterLayer に</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 表示順別ごとにエンティティをグループ化するための E を作って、</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> groundLayer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">({ scene: scene });</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> itemLayer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">({ scene: scene });</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> characterLayer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">({ scene: scene });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// シーンに表示順で追加しておく。</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(groundLayer);</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(itemLayer);</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(characterLayer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 地面画像は groundLayer に追加。</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">groundSprite</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">  src: scene.assets[</span><span style="color:#032F62;">&quot;ground&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  x: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  y: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  parent: groundLayer </span><span style="color:#6A737D;">// 親を groundLayer に</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// キャラ画像は characterLayer に追加。</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">playerSprite</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">  src: scene.assets[</span><span style="color:#032F62;">&quot;player&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  x: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  y: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  parent: characterLayer </span><span style="color:#6A737D;">// 親を characterLayer に</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>このように生成しておけば、 &quot;アイテム&quot; は常に <code>itemLayer</code> の子にするだけで適切な順序で描画されます。 <code>insertBefore()</code> での細かい順序制御は、 &quot;アイテム&quot; 間の表示順を制御する必要がなければ、必要ありません。</p></blockquote>`,31),c=[e];function r(t,E,y,i,d,F){return a(),p("div",null,c)}const C=n(o,[["render",r]]);export{h as __pageData,C as default};
