import{_ as a,c as e,o as i,a3 as s}from"./chunks/framework.B_s5ISUx.js";const t="/assets/skipping-fastforward.DhsZ78mY.gif",l="/assets/skipping-indicator.bwwjNirT.gif",n="/assets/ease-inout-back.D2rSug1U.gif",h="/assets/ease-out-bounce.DtgVQ9v6.gif",r="/assets/serve-fit-to-screen.ybJT3ioG.gif",q=JSON.parse('{"title":"更新情報 (〜2022/06/30)","description":"","frontmatter":{},"headers":[],"relativePath":"recent-changes/2022/202206.md","filePath":"recent-changes/2022/202206.md"}'),c={name:"recent-changes/2022/202206.md"},o=s('<h1 id="更新情報-〜2022-06-30" tabindex="-1">更新情報 (〜2022/06/30) <a class="header-anchor" href="#更新情報-〜2022-06-30" aria-label="Permalink to &quot;更新情報 (〜2022/06/30)&quot;">​</a></h1><h2 id="skipping-scene" tabindex="-1">早送り中の描画内容を制御できるように <a class="header-anchor" href="#skipping-scene" aria-label="Permalink to &quot;早送り中の描画内容を制御できるように {#skipping-scene}&quot;">​</a></h2><p>Akashic Engine v3.4.1 以降で、早送り (スキップ) 中の描画内容をゲーム開発者が制御できるようになりました。</p><table tabindex="0"><thead><tr><th style="text-align:center;">従来 (または &quot;fast-forward&quot;)</th><th style="text-align:center;">&quot;indicator&quot;</th></tr></thead><tbody><tr><td style="text-align:center;"><img src="'+t+'" alt="従来 (または &quot;fast-forward&quot;)"> 早送り中にゲーム画面がそのまま描画されます。</td><td style="text-align:center;"><img src="'+l+`" alt="&quot;indicator&quot;"> 早送り中は右下にインジケータを表示します。</td></tr></tbody></table><p>Akashic Engine では、ゲームプレイ中に行われた全操作を原則全プレイヤーに共有します。 この動作によって、細かな通信を意識することなく手軽にマルチプレイゲームを作成することが可能です (参考: <a href="https://akashic-games.github.io/tutorial/v3/multiplay/introduction.html#architecture-intro" target="_blank" rel="noreferrer">Akashic におけるマルチプレイ</a>)。</p><p>ただしこの動作のため、ゲームの開始時などに「早送り (スキップ)」が必要になることがあります。 プレイ中のゲームに途中から参加する場合、まず「それまでに行われた全操作」を早送りで実行して、ゲームの最新状態に追いつかなくてはならないためです。プレイ時間が長いゲームでは、この早送り時間も長くなります。 これまで、早送り中は単にゲーム画面が高速で描画されていました。</p><p>Akashic Engine v3.4.1 以降では、 <strong>スキッピングシーン</strong> を使うことで、この早送り中の描画内容を変更できます。二種類の方法があります。</p><ul><li>組み込みのスキッピングシーンを選んで game.json で指定する</li><li>独自のスキッピングシーンを <code>g.Scene</code> で作成して、早送り中の描画内容を完全に制御する</li></ul><p>第一に、 game.json に <code>&quot;defaultSkippingScene&quot;</code> プロパティを指定することで、早送り中の描画内容を変更できます。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  ...,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;defaultSkippingScene&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;indicator&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>指定可能な値は次のいずれかです。</p><table tabindex="0"><thead><tr><th style="text-align:center;">値</th><th style="text-align:left;">描画内容</th></tr></thead><tbody><tr><td style="text-align:center;"><code>&quot;fast-forward&quot;</code> または 指定なし</td><td style="text-align:left;">早送り中もその時点のゲーム画面を表示する</td></tr><tr><td style="text-align:center;"><code>&quot;indicator&quot;</code></td><td style="text-align:left;">早送り中は右下にインジケータを表示する<br>(デザインは今後変更する可能性があります)</td></tr><tr><td style="text-align:center;"><code>&quot;none&quot;</code></td><td style="text-align:left;">早送り中は描画を行わない</td></tr></tbody></table><p>第二に、独自のスキッピングシーンを自分で作成することができます。 任意の <code>g.Scene</code> を生成して、 <code>g.game.skippingScene</code> に代入すると、そのシーンがスキッピングシーンとして利用されます。</p><p>ただしこのこのシーンには次の条件を満たす必要があります:</p><ul><li><code>new g.Scene()</code> で生成する際、引数で <code>local: &quot;full-local&quot;</code> を指定する</li><li>シーン内からは使うアセットは全て <a href="https://akashic-games.github.io/reverse-reference/v3/asset/global-asset.html" target="_blank" rel="noreferrer">グローバルアセット</a> である</li></ul><p>詳細は逆引きリファレンス <a href="https://akashic-games.github.io/reverse-reference/v3/setting/skipping-scene.html" target="_blank" rel="noreferrer">スキッピングシーンを使う</a> を参照してください。</p><blockquote><p>Akashic Engine v3.2.2 以降では、そもそも早送り時間自体を短くする <a href="https://akashic-games.github.io/tutorial/v3/multiplay/snapshot.html" target="_blank" rel="noreferrer"><strong>スナップショット</strong></a> 機能も利用できます。 スナップショットは早送り時間自体を短縮しますが、専用の API を利用する必要があり、スキッピングシーンと比べると利用ハードルの高い機能です。 またスナップショットによる復元後にもゲームの最新状態に追いつく必要があるので、早送りが完全になくなるわけではありません。</p><p>スキッピングシーンは、より簡単に早送りの待ち時間の印象を変えることができます。 元のゲーム画面に描画内容が多い場合、環境によっては <code>&quot;indicator&quot;</code> や <code>&quot;none&quot;</code> を利用すると (描画時間が減る分) 早送り時間が短縮される可能性もあるでしょう。</p></blockquote><h2 id="add-timeline-easing" tabindex="-1">akashic-timeline の Easing を追加 <a class="header-anchor" href="#add-timeline-easing" aria-label="Permalink to &quot;akashic-timeline の Easing を追加 {#add-timeline-easing}&quot;">​</a></h2><p>イージング関数として <code>easeInOutBack</code> と <code>easeOutBounce</code> を追加しました。</p><div style="display:flex;justify-items:center;"><img alt="easeInOutのイメージ" src="`+n+'"><img alt="easeOutBounceのイメージ" src="'+h+'"></div><ul><li><strong><code>easeInOutBack</code></strong>: 移動開始時直後と終了直前に、それぞれの方向に少し「はみ出す」イージング</li><li><strong><code>easeOutBounce</code></strong>: 移動終了地点でバウンドするイージング</li></ul><p>これを含め、利用可能なすべてのイージング関数は <a href="/demo/?title=timeline-easing-sample">サンプルデモのイージング一覧</a> から参照できます。</p><h2 id="serve-fit-to-screen" tabindex="-1">akashic serve に &quot;Fit to screen&quot; オプションを追加 <a class="header-anchor" href="#serve-fit-to-screen" aria-label="Permalink to &quot;akashic serve に &quot;Fit to screen&quot; オプションを追加 {#serve-fit-to-screen}&quot;">​</a></h2><p>akashic-cli@2.15.67 以降の <code>akashic serve</code> で、ゲーム画面をウィンドウに合わせて拡縮する機能 &quot;Fit to screen&quot; を利用できます。</p><p><img src="'+r+`" alt="Fit to screen の利用イメージ"></p><p>画面右上のアイコンをクリックして、チェックボックスから切り替えてください。</p><h2 id="slice-image" tabindex="-1">画像ファイルの特定の一部を画像アセットとして利用できるように <a class="header-anchor" href="#slice-image" aria-label="Permalink to &quot;画像ファイルの特定の一部を画像アセットとして利用できるように {#slice-image}&quot;">​</a></h2><p>Akashic Engine v3.3.0 で、画像ファイルの一部だけを画像アセットとして利用できるようになりました。</p><p>通常、ファイル数の多さはロード時間に影響を与えます。 そこで多くの Web アプリケーションは、JavaScript (.js) ファイルを一つにまとめるなどファイル数削減の工夫をしています。 Akashic Engine でも、たとえば <code>akashic export html --atsumaru</code> コマンドでゲームを出力する際には、自動的に .js ファイルを一つにまとめる変換を行っています。</p><p>ゲームでは、.js ファイルよりも数が多くなりがちなものとして画像があります。 複数の画像をひとまとめにした画像ファイルを作成し、それを切り分けて使えば、よりファイル数を削減することができます。</p><p>Akashic Engine v3.3.0 以降では、game.json の画像アセットの定義に <code>&quot;slice&quot;</code> プロパティを加えることで、 画像ファイルの特定の一部だけを画像アセットとして利用することができます。</p><p>以下の例では、画像ファイル <code>image/allImage.png</code> の (0, 64) の位置から、幅 32 ピクセル、高さ 30 ピクセルの領域を <code>&quot;player&quot;</code> という画像アセットとして扱うように指定しています。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;player&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/allImage.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;slice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;width&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ただしゲーム開発者がこの設定を手書きするのは大変です。 そこで <code>akashic export</code> コマンドに、小さな画像を自動的に選んでひとまとめにする機能 <code>--pack-image</code> を試験的に追加しています (後述)。 将来的には、 <code>akashic export html --atsumaru</code> などで自動的に <code>&quot;slice&quot;</code> を利用することを検討しています。</p><h2 id="export-pack-image" tabindex="-1">akashic export zip に小さな画像を一つにまとめる機能を追加 (試験的機能) <a class="header-anchor" href="#export-pack-image" aria-label="Permalink to &quot;akashic export zip に小さな画像を一つにまとめる機能を追加 (試験的機能) {#export-pack-image}&quot;">​</a></h2><p>akashic-cli@2.15.35 で、 <code>akashic export zip</code> コマンドに「小さな画像を自動的に選んでまとめるオプション」 <code>--pack-image</code> を追加しました。</p><p><code>akashic export zip</code> コマンドは、 <code>akashic export html</code> コマンドが内部的に利用しているもので、 Akashic ゲームをまとめた zip ファイルを生成する機能です。 zip 圧縮するだけでなく、動作を変えずにゲームを変形する機能を持っています (実際には、zip 圧縮しないこともできます)。</p><ul><li>JavaScript ファイルを一まとめにする機能 (ファイル削減)</li><li>アセットのファイル名をランダムに変更する機能 (広告ブロッカーの誤検出でゲームが実行できなくなる問題回避)</li></ul><p>この <code>export zip</code> に、小さな画像を自動的に選んでひとまとめにする <code>--pack-image</code> オプションを追加しました。 指定すると、ゲーム中のサイズの小さい画像アセットを自動的に選別し、一まとめにした画像を出力を生成します。さらにそれを使うように <code>&quot;slice&quot;</code> 属性を指定した game.json を生成して出力に含めます。</p><p>これにより、ゲーム開発者はこれまでどおりにゲームを作成して、最後の変形ステップで画像ファイル数を削減することができます。</p><p>現在のところこれは試験的な機能です。将来的にオプション名や指定内容が変化する可能性があります。</p><p>現在 <code>akashic export html</code> でこの機能を利用するには、以下のように一度 <code>akashic export zip</code> で画像をまとめたゲームを生成し、それを <code>akashic export html</code> に与える必要があります。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">akashic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zip</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pack-image</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./temp-packed-game/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./temp-packed-game/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">akashic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> html</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --atsumaru</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./game.zip</span></span></code></pre></div><h2 id="misc-features" tabindex="-1">その他の改善・拡張 <a class="header-anchor" href="#misc-features" aria-label="Permalink to &quot;その他の改善・拡張 {#misc-features}&quot;">​</a></h2><ul><li>ニコ生ゲームで、一部ゲームがタイムシフト内でも遊べるように <ul><li><a href="https://blog.nicovideo.jp/niconews/168018.html" target="_blank" rel="noreferrer">一部の放送ネタがタイムシフトでも操作可能になりました【ニコニコ生放送】</a></li></ul></li><li>(akashic serve, akashic-sandbox): ブラウザ間で描画結果が異なるような処理をエラーとして通知するように <ul><li><a href="https://github.com/akashic-games/akashic-cli/pull/1043" target="_blank" rel="noreferrer">https://github.com/akashic-games/akashic-cli/pull/1043</a></li></ul></li><li>(akashic serve): ゲーム画面の後ろに任意の背景色を表示できるように <ul><li><a href="https://github.com/akashic-games/akashic-cli/pull/1055" target="_blank" rel="noreferrer">https://github.com/akashic-games/akashic-cli/pull/1055</a></li></ul></li><li>(akashic serve): ゲーム画面の後ろに置く画像をローカルパスで指定できるように <ul><li><a href="https://github.com/akashic-games/akashic-cli/pull/1061" target="_blank" rel="noreferrer">https://github.com/akashic-games/akashic-cli/pull/1061</a></li></ul></li><li>(akashic serve): 起動引数をクエリパラメータから指定できるように <ul><li><a href="https://github.com/akashic-games/akashic-cli/pull/1065" target="_blank" rel="noreferrer">https://github.com/akashic-games/akashic-cli/pull/1065</a></li></ul></li></ul><h2 id="doc-and-samples" tabindex="-1">サンプルの更新 <a class="header-anchor" href="#doc-and-samples" aria-label="Permalink to &quot;サンプルの更新 {#doc-and-samples}&quot;">​</a></h2><p><a href="https://github.com/akashic-contents" target="_blank" rel="noreferrer">https://github.com/akashic-contents</a> で公開している以下のサンプルゲームを更新し、Akashic Engine v3 ベースに移行しました。</p><ul><li>泥棒バスター <ul><li><a href="https://github.com/akashic-contents/thiefBuster" target="_blank" rel="noreferrer">https://github.com/akashic-contents/thiefBuster</a></li></ul></li><li>泥棒ニコモバスター <ul><li><a href="https://github.com/akashic-contents/thiefBuster-nicomoba" target="_blank" rel="noreferrer">https://github.com/akashic-contents/thiefBuster-nicomoba</a></li></ul></li><li>スピードジグソー <ul><li><a href="https://github.com/akashic-contents/speed-jigsaw" target="_blank" rel="noreferrer">https://github.com/akashic-contents/speed-jigsaw</a></li></ul></li><li>フラッシュモザイク <ul><li><a href="https://github.com/akashic-contents/flashMosaic" target="_blank" rel="noreferrer">https://github.com/akashic-contents/flashMosaic</a></li></ul></li><li>ニコニコウェーブ <ul><li><a href="https://github.com/akashic-contents/niconico-wave" target="_blank" rel="noreferrer">https://github.com/akashic-contents/niconico-wave</a></li></ul></li><li>ウィリアムゴリラ <ul><li><a href="https://github.com/akashic-contents/williamGorilla" target="_blank" rel="noreferrer">https://github.com/akashic-contents/williamGorilla</a></li></ul></li><li>GalaxyWarsEx <ul><li><a href="https://github.com/akashic-contents/GalaxyWarsEx" target="_blank" rel="noreferrer">https://github.com/akashic-contents/GalaxyWarsEx</a></li></ul></li></ul><p>これらは開発時期の関係上、Akashic Engine v1 を使って作られたものが大半でした。 v3 ベースに移行したことで、現在のドキュメントを参照した改造などが行いやすくなっています。</p><p>またサンプルの公開場所を整理するため、現在 <a href="https://akashic-contents.github.io/samples/" target="_blank" rel="noreferrer">サンプルカタログ</a> ページにある以下のコンテンツを github.com のリポジトリとして移動しています。</p><ul><li>ソフトウェアキーボードサンプル <ul><li><a href="https://github.com/akashic-contents/software-keyboard-sample" target="_blank" rel="noreferrer">https://github.com/akashic-contents/software-keyboard-sample</a></li></ul></li><li>おえかき <ul><li><a href="https://github.com/akashic-contents/oekaki" target="_blank" rel="noreferrer">https://github.com/akashic-contents/oekaki</a></li></ul></li><li>つりっくま風ゲーム <ul><li><a href="https://github.com/akashic-contents/tsurikkuma-style-game" target="_blank" rel="noreferrer">https://github.com/akashic-contents/tsurikkuma-style-game</a></li></ul></li></ul><h2 id="bugfixes" tabindex="-1">主な不具合修正 <a class="header-anchor" href="#bugfixes" aria-label="Permalink to &quot;主な不具合修正 {#bugfixes}&quot;">​</a></h2><h3 id="volume-zero" tabindex="-1">(Akashic Engine) BGM の音量が変更できなくなる場合がある問題を修正 <a class="header-anchor" href="#volume-zero" aria-label="Permalink to &quot;(Akashic Engine) BGM の音量が変更できなくなる場合がある問題を修正 {#volume-zero}&quot;">​</a></h3><p><code>&quot;music&quot;</code> の <code>g.AudioAsset</code> を一つも再生していない段階で、 <code>g.game.audio.music.volume</code> を 1 未満にした場合、その後この値を変更しても変更が反映されない問題がありました。</p><p>この不具合は、内部コンポーネント pdi-browser@2.2.1 で修正済みです。(関連 issue: <a href="https://github.com/akashic-games/akashic-engine/issues/381" target="_blank" rel="noreferrer">akashic-engine#381</a>)</p><h3 id="fix-audio-asset" tabindex="-1">(Akashic Engine) 再生中の AudioAsset を別のシーンでロードするとエラーになることがある問題を修正 <a class="header-anchor" href="#fix-audio-asset" aria-label="Permalink to &quot;(Akashic Engine) 再生中の AudioAsset を別のシーンでロードするとエラーになることがある問題を修正 {#fix-audio-asset}&quot;">​</a></h3><p><code>systemId</code> が <code>&quot;music&quot;</code> の <code>g.AudioAsset</code> の再生中、そのアセットをロードしないシーンに遷移し、さらにそのアセットをロードするシーンに遷移した時、エラーが発生していました。</p><p>akashic-engine@3.2.3 で修正済みです。(関連 PR: <a href="https://github.com/akashic-games/akashic-engine/issues/329" target="_blank" rel="noreferrer">akashic-engine#329</a>)</p><h3 id="ignored-tween" tabindex="-1">(akashic-timeline) Tween#call() の処理中に Tween を生成すると無視される問題を修正 <a class="header-anchor" href="#ignored-tween" aria-label="Permalink to &quot;(akashic-timeline) Tween#call() の処理中に Tween を生成すると無視される問題を修正 {#ignored-tween}&quot;">​</a></h3><p>トゥイーンアニメーションの途中で、任意の処理を実行するメソッド <code>Tween#call()</code> で登録した関数内から、 <code>Timeline#create()</code> を呼び出して動的に <code>Tween</code> を生成した時、描画に反映されていませんでした。</p><p>akashic-timline@3.2.0 で修正済みです。(関連 PR: <a href="https://github.com/akashic-games/akashic-timeline/pull/44" target="_blank" rel="noreferrer">akashic-timeline#44</a>)</p><h3 id="fix-duplicated-script" tabindex="-1">(akashic serve, akashic-sandbox) akashic-hover-plugin を利用するコンテンツが実行できない場合がある問題を修正 <a class="header-anchor" href="#fix-duplicated-script" aria-label="Permalink to &quot;(akashic serve, akashic-sandbox) akashic-hover-plugin を利用するコンテンツが実行できない場合がある問題を修正 {#fix-duplicated-script}&quot;">​</a></h3><p>akashic-hover-plugin を利用するコンテンツで、Akashic Engine v2 系から v3 系へ移行する際、README に従って作業すると一つのスクリプトアセットが二重に登録される形になっていました。 akashic serve, akashic-sandbox はこの状態のコンテンツを扱うことができておらず、ブラウザウィンドウを開いた時点でエラーが発生していました。</p><p>akashic-cli@2.15.65 で修正済みです。(関連 PR: <a href="https://github.com/akashic-games/akashic-cli/pull/1073" target="_blank" rel="noreferrer">akashic-cli#1073</a>)</p><h3 id="other-fixes" tabindex="-1">その他不具合の修正 <a class="header-anchor" href="#other-fixes" aria-label="Permalink to &quot;その他不具合の修正 {#other-fixes}&quot;">​</a></h3><ul><li>実行開始直後の効果音が不自然な形で再生されない場合がある問題を修正 <a href="https://github.com/akashic-games/game-driver/pull/134" target="_blank" rel="noreferrer">game-driver#134</a></li><li>resolve-player-info を二度呼ぶと動作しなくなることがある問題を修正</li><li><code>g.Scene#requestAssets()</code> で、オーデイオアセットの読み込み時、 <code>&quot;music&quot;</code> が指定できないなどの問題を修正 <a href="https://github.com/akashic-games/akashic-engine/pull/374" target="_blank" rel="noreferrer">akashic-engine#374</a></li><li>操作プラグインを利用するコンテンツのリセット時、一部のプラグインが停止できないことがあり得た問題を修正 <a href="https://github.com/akashic-games/akashic-engine/pull/386" target="_blank" rel="noreferrer">akashic-engine#386</a></li><li>TypeScript テンプレートのビルド実行時、 <code>npm run build</code> で game.json の globalScripts フィールドが上書きされてしまう問題を修正 <a href="https://github.com/akashic-games/akashic-cli/pull/1074" target="_blank" rel="noreferrer">akashic-cli#1074</a></li><li>akashic serve で「アクティブインスタンスのポーズ」ボタンが、最初に開いたウィンドウでしか押せなかった問題を修正 <a href="https://github.com/akashic-games/akashic-cli/pull/962" target="_blank" rel="noreferrer">akashic-cli#962</a></li><li>game.json の virtualPath を指定したコンテンツで、 <code>akashic export html --atsumaru</code> の出力が壊れる問題を修正 <a href="https://github.com/akashic-games/akashic-cli/pull/1002" target="_blank" rel="noreferrer">akashic-cli#1002</a></li><li><code>akashic export html --atsumaru</code> で <code>--minify</code> オプションが適用されていなかった問題を修正 <a href="https://github.com/akashic-games/akashic-cli/pull/1047" target="_blank" rel="noreferrer">akashic-cli#1047</a></li></ul>`,66),p=[o];function k(d,g,u,m,b,f){return i(),e("div",null,p)}const y=a(c,[["render",k]]);export{q as __pageData,y as default};
