import{_ as l}from"./chunks/player.316f8afb.js";import{_ as e,C as p,o,c as t,H as a,Q as s}from"./chunks/framework.f1c0562b.js";const b=JSON.parse('{"title":"コンテンツ作成の基本","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v3/basic.md","filePath":"tutorial/v3/basic.md"}'),c={name:"tutorial/v3/basic.md"},r=s(`<h1 id="コンテンツ作成の基本" tabindex="-1">コンテンツ作成の基本 <a class="header-anchor" href="#コンテンツ作成の基本" aria-label="Permalink to &quot;コンテンツ作成の基本&quot;">​</a></h1><p>このページのサンプルコードを<a class="asset--material--download" href="/zip/tutorial/v3/sample-basic.zip">ダウンロード</a></p><h2 id="entity" tabindex="-1">エンティティ <a class="header-anchor" href="#entity" aria-label="Permalink to &quot;エンティティ {#entity}&quot;">​</a></h2><p>画像や文字列などシーン上で描画されるオブジェクトを Akashic Engine ではエンティティと呼びます。 Akashic Engine には次のエンティティが標準で用意されています。</p><table><thead><tr><th style="text-align:center;">クラス名</th><th style="text-align:left;">機能</th></tr></thead><tbody><tr><td style="text-align:center;"><code>FilledRect</code></td><td style="text-align:left;">単色で塗りつぶした矩形を描画する</td></tr><tr><td style="text-align:center;"><code>Sprite</code></td><td style="text-align:left;">画像を描画する</td></tr><tr><td style="text-align:center;"><code>FrameSprite</code></td><td style="text-align:left;">画像を分割してそれらの一つを描画する。自動的にアニメーションさせることができる</td></tr><tr><td style="text-align:center;"><code>Label</code></td><td style="text-align:left;">単一行テキストを描画する</td></tr><tr><td style="text-align:center;"><code>E</code></td><td style="text-align:left;">複数のエンティティをまとめる</td></tr><tr><td style="text-align:center;"><code>Pane</code></td><td style="text-align:left;">複数のエンティティをまとめ、領域でクリッピングする</td></tr></tbody></table><p>シーンにエンティティを配置するには、次の 2 つのステップが必要です。</p><ol><li><code>new</code> 演算子でエンティティオブジェクトを作る。</li><li>シーンの <code>append()</code> メソッドでエンティティオブジェクトをシーンに追加する。</li></ol><p>例えば矩形を <code>scene</code> という名前のシーンに追加するには、次のようなコードを書きます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">  cssColor: </span><span style="color:#9ECBFF;">&quot;red&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  height: </span><span style="color:#79B8FF;">50</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(rect);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">  cssColor: </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  width: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  height: </span><span style="color:#005CC5;">50</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(rect);</span></span></code></pre></div><p>Akashic Engine の機能はグローバル変数 <code>g</code> を通して利用できます。 <code>FilledRect</code> コンストラクタは、コード上では <code>g.FilledRect</code> となります。</p><p>エンティティのコンストラクタはオブジェクトを引数にとります。このように引数として渡すオブジェクトを Akashic Engine ではパラメータオブジェクトとよびます。パラメータオブジェクトのプロパティや指定できる値は関数ごとに異なっています。例えば <code>new g.FilledRect()</code> に渡すパラメータオブジェクトには次のプロパティを指定できます。</p><table><thead><tr><th style="text-align:center;">プロパティ名</th><th style="text-align:center;">指定可能な値</th><th style="text-align:left;">意味</th><th style="text-align:center;">必須かどうか</th></tr></thead><tbody><tr><td style="text-align:center;"><code>scene</code></td><td style="text-align:center;">シーンオブジェクト</td><td style="text-align:left;">エンティティを表示するシーン</td><td style="text-align:center;">必須</td></tr><tr><td style="text-align:center;"><code>width</code></td><td style="text-align:center;">数値</td><td style="text-align:left;">横幅</td><td style="text-align:center;">必須</td></tr><tr><td style="text-align:center;"><code>height</code></td><td style="text-align:center;">数値</td><td style="text-align:left;">高さ</td><td style="text-align:center;">必須</td></tr><tr><td style="text-align:center;"><code>cssColor</code></td><td style="text-align:center;">CSS 色を表す文字列</td><td style="text-align:left;">塗りつぶす色</td><td style="text-align:center;">必須</td></tr><tr><td style="text-align:center;"><code>x</code></td><td style="text-align:center;">数値</td><td style="text-align:left;">X座標</td><td style="text-align:center;">任意<br>(初期値:<code>0</code>)</td></tr><tr><td style="text-align:center;"><code>y</code></td><td style="text-align:center;">数値</td><td style="text-align:left;">Y座標</td><td style="text-align:center;">任意<br>(初期値:<code>0</code>)</td></tr><tr><td style="text-align:center;"><code>opacity</code></td><td style="text-align:center;"><code>0.0</code>以上<code>1.0</code>以下<br>の数値</td><td style="text-align:left;">不透明度</td><td style="text-align:center;">任意 <br>(初期値:<code>1</code>)</td></tr><tr><td style="text-align:center;"><code>scaleX</code></td><td style="text-align:center;">数値</td><td style="text-align:left;">横方向の拡大率</td><td style="text-align:center;">任意 <br>(初期値:<code>1</code>)</td></tr><tr><td style="text-align:center;"><code>scaleY</code></td><td style="text-align:center;">数値</td><td style="text-align:left;">縦方向の拡大率</td><td style="text-align:center;">任意 <br>(初期値:<code>1</code>)</td></tr><tr><td style="text-align:center;"><code>angle</code></td><td style="text-align:center;">数値</td><td style="text-align:left;">回転角度(度)。回転の軸は矩形はアンカーポイント位置(指定されている場合)</td><td style="text-align:center;">任意 <br>(初期値:<code>0</code>)</td></tr><tr><td style="text-align:center;"><code>anchorX</code></td><td style="text-align:center;">数値または<code>undeifned</code></td><td style="text-align:left;">アンカーポイントの水平成分。<code>0.0</code>でエンティティの左端、<code>1.0</code>で右端。 <a href="./scale-anchor.html">詳細</a></td><td style="text-align:center;">任意 <br>(初期値:<code>0</code>)</td></tr><tr><td style="text-align:center;"><code>anchorY</code></td><td style="text-align:center;">数値または<code>undeifned</code></td><td style="text-align:left;">アンカーポイントの垂直成分。<code>0.0</code>でエンティティの上端、<code>1.0</code>で下端。 <a href="./scale-anchor.html">詳細</a></td><td style="text-align:center;">任意 <br>(初期値:<code>0</code>)</td></tr><tr><td style="text-align:center;"><code>compositeOperation</code></td><td style="text-align:center;"><code>g.CompositeOperation</code>の定数</td><td style="text-align:left;">描画時の既存部分との合成方法</td><td style="text-align:center;">任意 <br>(初期値: <code>SourceOver</code>)</td></tr><tr><td style="text-align:center;"><code>children</code></td><td style="text-align:center;">エンティティの配列</td><td style="text-align:left;">子エンティティ</td><td style="text-align:center;">任意 <br>(初期値:<code>[]</code>)</td></tr><tr><td style="text-align:center;"><code>hidden</code></td><td style="text-align:center;">真理値</td><td style="text-align:left;">非表示にするかどうか</td><td style="text-align:center;">任意 <br>(初期値: <code>false</code>)</td></tr><tr><td style="text-align:center;"><code>touchable</code></td><td style="text-align:center;">真理値</td><td style="text-align:left;">ポイントイベントに反応するかどうか</td><td style="text-align:center;">任意 <br>(初期値: <code>false</code>)</td></tr></tbody></table><p>表中のほとんどのプロパティは <code>FilledRect</code> 以外のオブジェクトでも共通です。 <code>FilledRect</code> 特有のプロパティは矩形の色を指定する <code>cssColor</code> のみです。また、他のエンティティと異なり <code>width</code> と <code>height</code> の指定が必須になっています。</p><p>それぞれのエンティティで指定可能な値や初期値は API リファレンスに書かれています。例えば <code>FilledRect</code> であれば<a href="/akashic-engine/v3/classes/FilledRect.html">こちら</a>のドキュメントに書かれています。</p><p>エンティティをシーンに追加する操作は、シーンの読み込み後に行う必要があります。シーンの読み込み完了のようなタイミングを通知するのに、 Akashic Engine はトリガー(<code>g.Trigger</code>)とよばれる仕組みを利用します。トリガーには <code>add()</code> メソッドで関数を登録することができます。トリガーに対応するイベントが発生すると、登録されたメソッドが呼び出されます。</p><p>シーンの読み込み完了のタイミングを知るには <code>scene.onLoad</code> トリガーを利用します。次の例では <code>handleSceneLoad()</code> 関数を <code>scene.onLoad</code> トリガーに登録しています。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.onLoad.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(handleSceneLoad);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleSceneLoad</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// シーンが読み込まれたときに行う処理</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({ game: g.game });</span></span>
<span class="line"><span style="color:#24292E;">scene.onLoad.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(handleSceneLoad);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleSceneLoad</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// シーンが読み込まれたときに行う処理</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>無名関数を利用すると、次のような書き方もできます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">scene.onLoad.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// シーンが読み込まれたときに行う処理</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({ game: g.game });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">scene.onLoad.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// シーンが読み込まれたときに行う処理</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>以下は、これまで説明した内容を利用して、座標 (50, 50) に幅 100、高さ 100 の赤色の矩形を表示するプログラムです。座標は初期状態ではシーンの左上が原点で、右に行くほど X の値が大きくなり、下に行くほど Y の値が大きくなります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene.onLoad.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRect</span><span style="color:#E1E4E8;">(scene);</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(rect);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  g.game.</span><span style="color:#B392F0;">pushScene</span><span style="color:#E1E4E8;">(scene);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scene</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">    x: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    y: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    cssColor: </span><span style="color:#9ECBFF;">&quot;red&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> main;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({ game: g.game });</span></span>
<span class="line"><span style="color:#24292E;">  scene.onLoad.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRect</span><span style="color:#24292E;">(scene);</span></span>
<span class="line"><span style="color:#24292E;">    scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(rect);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  g.game.</span><span style="color:#6F42C1;">pushScene</span><span style="color:#24292E;">(scene);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRect</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scene</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">    x: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    y: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    width: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    height: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    cssColor: </span><span style="color:#032F62;">&quot;red&quot;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> main;</span></span></code></pre></div><p>プログラムを <code>akashic-sandbox</code> で実行すると以下のように表示されます。</p>`,22),y=s(`<p>実行中にゲーム自身の情報を参照する際は <code>g.game</code> オブジェクトを利用します。 <code>g.game</code> オブジェクトはこれまでもシーンを作成する際の引数に登場していました。 Akashic Engine のいくつかのオブジェクトは明示的に <code>g.game</code> オブジェクトを渡す必要があります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({ game: g.game });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({ game: g.game });</span></span></code></pre></div><p><code>g.game</code> オブジェクトの <code>width</code> プロパティと <code>height</code> プロパティには、 <code>game.json</code> に指定したゲームの幅と高さが格納されています。この値を利用すると、例えば以下のようにゲーム全体を青色で塗りつぶすように矩形を配置できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">backgroundRect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: g.game.width,</span></span>
<span class="line"><span style="color:#E1E4E8;">  height: g.game.height,</span></span>
<span class="line"><span style="color:#E1E4E8;">  cssColor: </span><span style="color:#9ECBFF;">&quot;blue&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">backgroundRect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">  width: g.game.width,</span></span>
<span class="line"><span style="color:#24292E;">  height: g.game.height,</span></span>
<span class="line"><span style="color:#24292E;">  cssColor: </span><span style="color:#032F62;">&quot;blue&quot;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>複数の矩形を配置するには、<code>new g.FilledRect()</code> と <code>scene.append()</code> をそれぞれ複数回呼び出します。以下はループを使って矩形を格子状に並べるプログラムです。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rectHeight</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">rectWidth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">rectMargin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene.onLoad.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x, y, rect;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; y </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> g.game.height; y </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> rectHeight </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> rectMargin) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; x </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> g.game.width; x </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> rectWidth </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> rectMargin) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        rect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRect</span><span style="color:#E1E4E8;">(scene, x, y);</span></span>
<span class="line"><span style="color:#E1E4E8;">        scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(rect);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  g.game.</span><span style="color:#B392F0;">pushScene</span><span style="color:#E1E4E8;">(scene);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scene</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">    x: x,</span></span>
<span class="line"><span style="color:#E1E4E8;">    y: y,</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: rectWidth,</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: rectHeight,</span></span>
<span class="line"><span style="color:#E1E4E8;">    cssColor: </span><span style="color:#9ECBFF;">&quot;#7F3F3F&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> main;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rectHeight</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">40</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">rectWidth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">rectMargin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({ game: g.game });</span></span>
<span class="line"><span style="color:#24292E;">  scene.onLoad.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x, y, rect;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; y </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> g.game.height; y </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> rectHeight </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> rectMargin) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; x </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> g.game.width; x </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> rectWidth </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> rectMargin) {</span></span>
<span class="line"><span style="color:#24292E;">        rect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRect</span><span style="color:#24292E;">(scene, x, y);</span></span>
<span class="line"><span style="color:#24292E;">        scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(rect);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  g.game.</span><span style="color:#6F42C1;">pushScene</span><span style="color:#24292E;">(scene);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRect</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scene</span><span style="color:#24292E;">, </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">    x: x,</span></span>
<span class="line"><span style="color:#24292E;">    y: y,</span></span>
<span class="line"><span style="color:#24292E;">    width: rectWidth,</span></span>
<span class="line"><span style="color:#24292E;">    height: rectHeight,</span></span>
<span class="line"><span style="color:#24292E;">    cssColor: </span><span style="color:#032F62;">&quot;#7F3F3F&quot;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> main;</span></span></code></pre></div>`,6),E=s('<h2 id="image" tabindex="-1">画像を扱う <a class="header-anchor" href="#image" aria-label="Permalink to &quot;画像を扱う {#image}&quot;">​</a></h2><p>Akashic Engine では PNG 形式と JPEG 形式の画像を扱えます。ここでは以下の PNG 画像 (<code>player.png</code>) をシーンに追加します。</p><p><img src="'+l+`" alt="player"></p><p>Akashic Engine のゲームには推奨されるディレクトリ構造があります。このディレクトリ構造に従うことで、面倒な作業を自動化できます。例えば画像は、アセットとして <code>game.json</code> に登録する必要があります。追加したい画像が <code>image</code> ディレクトリに置かれている場合、次のコマンドで <code>game.json</code> にアセットの情報が追加されます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">akashic</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">scan</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">asset</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">akashic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">scan</span><span style="color:#24292E;"> </span><span style="color:#032F62;">asset</span></span></code></pre></div><p><code>akashic scan asset</code> がアセットを探すディレクトリは以下の 5 つで、それぞれ配置するアセットの種類が決まっています。</p><table><thead><tr><th style="text-align:center;">名前</th><th style="text-align:left;">役割</th></tr></thead><tbody><tr><td style="text-align:center;"><code>script</code></td><td style="text-align:left;">JavaScriptのコードを配置する</td></tr><tr><td style="text-align:center;"><code>image</code></td><td style="text-align:left;">PNG形式またはJPEG形式の画像を配置する</td></tr><tr><td style="text-align:center;"><code>audio</code></td><td style="text-align:left;">M4A(またはAAC)形式とOGG形式のオーディオファイルを配置する</td></tr><tr><td style="text-align:center;"><code>text</code></td><td style="text-align:left;">その他のデータ(テキスト形式)を配置する</td></tr><tr><td style="text-align:center;"><code>assets</code></td><td style="text-align:left;">上記 4 種類全てのアセットを配置できる<br>(v3 以降で利用可能。柔軟ですが他と扱いが違うため、詳細は <a href="./assetPaths.html">後述</a> します)</td></tr></tbody></table><p><code>akashic init</code> の JavaScript テンプレートを利用している場合、これらのディレクトリはすでに用意されています。 <code>akashic scan asset</code> を実行すると、これらのディレクトリ内に新しいファイルが見つかった場合は <code>game.json</code> に登録し、ディレクトリからファイルが削除されたら <code>game.json</code> から登録を解除します。</p><p><code>player.png</code> を <code>image</code> ディレクトリに置いて <code>akashic scan asset</code> を実行すると、画面に以下のように表示されます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">INFO:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Added</span><span style="color:#E1E4E8;"> (or </span><span style="color:#9ECBFF;">updated</span><span style="color:#E1E4E8;">) the declaration </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> player (</span><span style="color:#B392F0;">image/player.png</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">INFO:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Done!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">INFO:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Added</span><span style="color:#24292E;"> (or </span><span style="color:#032F62;">updated</span><span style="color:#24292E;">) the declaration </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> player (</span><span style="color:#6F42C1;">image/player.png</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">INFO:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Done!</span></span></code></pre></div><p><code>game.json</code> を開くと以下の項目が <code>assets</code> プロパティに追加されていることが確認できます。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;player&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;image&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;width&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">63</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;height&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;image/player.png&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;player&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;image&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;width&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">63</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;height&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">53</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;image/player.png&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以下はシーンに画像を表示するプログラムです。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    game: g.game,</span></span>
<span class="line"><span style="color:#E1E4E8;">    assetPaths: [</span><span style="color:#9ECBFF;">&quot;/image/player.png&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// シーン内で利用するアセットのファイルパス</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  scene.onLoad.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sprite</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">      src: scene.asset.</span><span style="color:#B392F0;">getImage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/image/player.png&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(sprite);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  g.game.</span><span style="color:#B392F0;">pushScene</span><span style="color:#E1E4E8;">(scene);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> main;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    game: g.game,</span></span>
<span class="line"><span style="color:#24292E;">    assetPaths: [</span><span style="color:#032F62;">&quot;/image/player.png&quot;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// シーン内で利用するアセットのファイルパス</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  scene.onLoad.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sprite</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">      src: scene.asset.</span><span style="color:#6F42C1;">getImage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/image/player.png&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(sprite);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  g.game.</span><span style="color:#6F42C1;">pushScene</span><span style="color:#24292E;">(scene);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> main;</span></span></code></pre></div>`,14),i=s(`<p>画像やオーディオなどのアセットは、シーンの生成時に、<code>assetPaths</code> プロパティで利用するアセットのパスを指定します。 スクリプトアセットは例外で、指定しなくても自動的に読み込まれます (<code>akashic scan</code> コマンドで登録した場合)。 <code>assetPaths</code> には glob のサブセット文法(<code>**</code>, <code>*</code>, <code>?</code>) を利用することができます。</p><p>画像を表示するには <code>Sprite</code> エンティティを使います。 <code>Sprite</code> エンティティのパラメータオブジェクトには <code>src</code> プロパティがあります。ここに画像アセットオブジェクトを指定すると、対応する画像を表示するエンティティが作成されます。</p><p>シーンに読み込んだアセットオブジェクトは、 <code>scene.asset</code> から取り出すことができます。ファイルパス形式で取得する場合、次のコードで参照できます。 アセットパスを用いてアセットを参照する場合、 <code>game.json</code> のあるディレクトリからの絶対パス表記を用いる必要があることに注意してください。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">scene.asset.</span><span style="color:#B392F0;">getImage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/image/player.png&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">scene.asset.</span><span style="color:#6F42C1;">getImage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/image/player.png&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>アセットの読み込みには <code>assetIds</code> プロパティで利用するアセット の ID を指定することもできます。Akashic Engine v2 以前では <code>assetPaths</code> はなく、アセット ID による指定のみが利用可能でした。</p><p>アセットの ID は <code>game.json</code> に登録されている名前です。 これはアセットを <code>akashic scan</code> で登録した場合は、ファイル名から拡張子をのぞいた文字列になっています。 例えば <code>player.png</code> の場合、アセット ID は <code>player</code> になります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  game: g.game,</span></span>
<span class="line"><span style="color:#E1E4E8;">  assetIds: [</span><span style="color:#9ECBFF;">&quot;player&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// シーン内で利用するアセット ID</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  game: g.game,</span></span>
<span class="line"><span style="color:#24292E;">  assetIds: [</span><span style="color:#032F62;">&quot;player&quot;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// シーン内で利用するアセット ID</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>アセット ID を用いてアセットを取得する場合は、次のコードで参照できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">scene.asset.</span><span style="color:#B392F0;">getImageById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;player&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">scene.asset.</span><span style="color:#6F42C1;">getImageById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;player&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div></div>`,5);function d(g,F,h,u,C,m){const n=p("PlaygroundElement");return o(),t("div",null,[r,a(n,{gameJsonUri:"/snippets/tutorial-2-basic-1/game.json",width:600,height:400}),y,a(n,{gameJsonUri:"/snippets/tutorial-2-basic-2/game.json",width:600,height:400}),E,a(n,{gameJsonUri:"/snippets/tutorial-2-basic-3/game.json",width:600,height:400}),i])}const A=e(c,[["render",d]]);export{b as __pageData,A as default};
