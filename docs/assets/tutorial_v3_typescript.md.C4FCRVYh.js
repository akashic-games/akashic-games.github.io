import{_ as i,c as s,o as a,a3 as t}from"./chunks/framework.DaCD_bki.js";const e="/assets/vscode-code-snippet.BWiwo6Gz.png",u=JSON.parse('{"title":"TypeScript での開発","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v3/typescript.md","filePath":"tutorial/v3/typescript.md"}'),p={name:"tutorial/v3/typescript.md"},n=t('<h1 id="typescript-での開発" tabindex="-1">TypeScript での開発 <a class="header-anchor" href="#typescript-での開発" aria-label="Permalink to &quot;TypeScript での開発&quot;">​</a></h1><p><a href="./introduction.html">akashic の導入</a>では JavaScript を利用しましたが TypeScript での開発もできます。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>このページでは TypeScript での開発手順を説明しているので、JavaScript で開発する方には関係ありません。</p></div><h2 id="what-typescript" tabindex="-1">TypeScript とは <a class="header-anchor" href="#what-typescript" aria-label="Permalink to &quot;TypeScript とは {#what-typescript}&quot;">​</a></h2><p><a href="https://www.typescriptlang.org/ja/" target="_blank" rel="noreferrer">TypeScript</a> は、JavaScript を拡張して作られたプログラミング言語です。TypeScript で書いたコードをコンパイルすると JavaScript のコードへと変換されるので、JavaScript が実行される環境であればすぐに使用できます。</p><p>TypeScript と JavaScript の大きな違いは型付けにあります。TypeScript はコンパイルが必要となりますが、型があることによってコードを書いている時点やコンパイル時にエラーに気付くことができます。 JavaScript は実行するまでエラーに気付きにくいという短所があります。</p><p>以下のコードは TypeScript でのコードの例となります。関数の引数や戻り値の型が指定されているので、指定した型と異なる値を指定した場合はエラーとなります。</p><div class="language-TypeScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `result=${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">multFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引数が足りないためコンパイル時にエラーとなる</span></span></code></pre></div><p>また、Visual Studio Code 等の高機能なエディターでコード補完機能も利用できます。</p><p><img src="'+e+'" alt="VSCode snippet"></p><div class="tip custom-block"><p class="custom-block-title">TypeScript か JavaScript か</p><p>Akashic Engine では、特に TypeScript を推奨 (JavaScript を非推奨) としてはいません。TypeScript の利用に必要な知識は JavaScript よりも少し多くなるためです。</p><p>初めてプログラミングに触れる方は「とりあえず動かしやすい」JavaScript で動くものを一度作ってみていただく方がハードルが低いかと思います。 逆にある程度慣れた方、既に JavaScript や他の型付きプログラミング言語 (Java や C# など) の経験がある方は、TypeScript にチャレンジしていただくとより便利に開発いただけるのではないかと思います。</p></div><h2 id="typescript-develop-flow" tabindex="-1">TypeScript での開発手順 <a class="header-anchor" href="#typescript-develop-flow" aria-label="Permalink to &quot;TypeScript での開発手順 {#typescript-develop-flow}&quot;">​</a></h2><h3 id="akashic-init-typescript" tabindex="-1">akashic init で Typescript のゲームを作成 <a class="header-anchor" href="#akashic-init-typescript" aria-label="Permalink to &quot;akashic init で Typescript のゲームを作成 {#akashic-init-typescript}&quot;">​</a></h3><p><code>akashic init</code> の <code>--type</code> オプションで <code>typescript</code> を指定し、ゲームに必要なファイルを作成します。コマンドを実行するとゲームに必要なファイルやディレクトリが作成されます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">akashic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span></span></code></pre></div><p><code>akashic init</code>　コマンドの詳細は <a href="./introduction.html#use-akashic-init">akashic init の利用</a>や <a href="/reference/tool/akashic-cli/init.html">akashic init</a>を参照してください。</p><h3 id="npm-install" tabindex="-1">必要ライブラリのインストール <a class="header-anchor" href="#npm-install" aria-label="Permalink to &quot;必要ライブラリのインストール {#npm-install}&quot;">​</a></h3><p><code>akashic init</code> コマンドで作成したディレクトリに移動し <code>npm install</code> コマンドを実行します。<code>npm install</code> コマンドは package.json の記述に沿ってゲームに必要なライブラリをインストールします。 インストールが正常終了するとカレントディレクトリに <code>node_modules</code> ディレクトリが生成され、インストールしたライブラリは <code>node_modules</code> に入っています。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h3 id="build" tabindex="-1">ビルド <a class="header-anchor" href="#build" aria-label="Permalink to &quot;ビルド {#build}&quot;">​</a></h3><p>ゲームの内容を記述するのは <code>src</code> ディレクトリにある <code>main.ts</code> となります。<code>main.ts</code> などの TypeScript ファイル を編集した後は必ずビルドする必要があります。</p><p>コードにエラーがある場合は、ビルド時にエラーが出力されます。正常にビルドが成功した場合は、<code>script</code> ディレクトリに <code>main.js</code> などの JavaScript ファイルが生成されます。</p><p>ビルドを行うには <code>npm run build</code> コマンドを実行します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h3 id="update-asset" tabindex="-1">アセット情報の更新 <a class="header-anchor" href="#update-asset" aria-label="Permalink to &quot;アセット情報の更新 {#update-asset}&quot;">​</a></h3><p>ゲームに必要な画像やスクリプトファイル等を追加/削除した場合に game.json のアセット情報を更新する必要があります。 <code>npm run update</code> コマンドを実行することにより game.json のアセットや各種ライブラリ情報を更新します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><h3 id="run-game" tabindex="-1">ゲームの実行 <a class="header-anchor" href="#run-game" aria-label="Permalink to &quot;ゲームの実行 {#run-game}&quot;">​</a></h3><p>作成したゲームを実行するには <code>npm start</code> コマンドを実行します。<code>npm start</code> コマンド実行すると akashic sandbox が起動し、Web ブラウザで <code>http://localhost:3000/game/</code> を開くことでゲームが実行されます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div>',30),h=[n];function l(c,r,d,o,k,y){return a(),s("div",null,h)}const F=i(p,[["render",l]]);export{u as __pageData,F as default};
