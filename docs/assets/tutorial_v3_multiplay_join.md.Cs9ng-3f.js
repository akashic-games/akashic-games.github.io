import{_ as s}from"./chunks/cli-serve.BXfEc_22.js";import{_ as a,c as i,o as e,a3 as n}from"./chunks/framework.B_s5ISUx.js";const y=JSON.parse('{"title":"Join と Leave","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v3/multiplay/join.md","filePath":"tutorial/v3/multiplay/join.md"}'),l={name:"tutorial/v3/multiplay/join.md"},p=n(`<h1 id="join-と-leave" tabindex="-1">Join と Leave <a class="header-anchor" href="#join-と-leave" aria-label="Permalink to &quot;Join と Leave&quot;">​</a></h1><p>このページのサンプルコードを<a href="https://github.com/akashic-contents/website-contents/releases/latest/download/tutorial-samples-v3-multiplay-sample-join.zip" target="_blank" rel="noreferrer">ダウンロード</a></p><h2 id="join" tabindex="-1">Join <a class="header-anchor" href="#join" aria-label="Permalink to &quot;Join {#join}&quot;">​</a></h2><p>各プレイヤーには「join しているか否か」という二値の状態が存在します。これは実行環境が規定する値です。「join しているプレイヤー」が何を意味するかは、実行環境によって定まります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>元々はその名の通り「ゲームに参加する」動作を表現するために作られた機能ですが、現在は実行環境依存の値になっています。 特に <strong>ニコニコ生放送では、放送者と視聴者を区別するために利用できます</strong> 。</p><p>詳細は <a href="/shin-ichiba/multi/broadcaster.html">ニコ生ゲームを作ろう » 放送者を判別する</a> を参照してください。</p></div><p>あるプレイヤーが join 状態になる時、 <code>g.game.onJoin</code> が fire され <code>g.JoinEvent</code> が与えられます。同様に join 状態でなくなる時、 <code>g.game.onLeave</code> が fire され <code>g.LeaveEvent</code> が与えられます。</p><p>次のコードは、最後に join したプレイヤーを記憶して参照する例です。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-0rrQ_" id="tab-Tu-VMcu" checked><label for="tab-Tu-VMcu">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastJoinedPlayerId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.onJoin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lastJoinedPlayerId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ev.player.id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scene.onPointDownCapture.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ev.player.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastJoinedPlayerId) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ニコニコ生放送上で動かす場合、イベントを生成した(＝画面を押下した)のが「放送者」である時のみ実行される</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (g.game.selfId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastJoinedPlayerId) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ニコニコ生放送上で動かす場合、この実行環境(インスタンス)が「放送者」のものである時のみ実行される</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div></div><p>なお <code>g.game.selfId</code> は、今そのゲームを実行している環境(インスタンス)のプレイヤー ID です。このコード例のように、あるイベントの生成元が自分(このインスタンス自身)かどうかを判断したい時に利用できます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>g.game.selfId</code> は必ずしも常に存在するとは限らないことに注意してください。存在しない場合、値は <code>undefined</code> になります。 マルチプレイのニコ生ゲームでは、サーバ側でもゲームを実行する関係上、必ず <code>g.game.selfId</code> が存在しないインスタンスがあります。</p></div><p><code>g.game.onJoin</code> や <code>g.game.onLeave</code> の動作確認は <code>akashic serve</code> コマンドでも行うことができます。</p><p><img src="`+s+`" alt="serve"></p><p>画面上側、ツールバー上の「Join Me」ボタンを押すと、そのウィンドウ(インスタンス)のプレイヤーが join します (<code>g.game.onJoin</code> が fire されます)。 join 済みの場合は「Leave Me」ボタンに切り替わり、 <code>g.game.onLeave</code> を fire させることができます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ここでは <code>g.game.onJoin</code> の説明のため扱っていませんが、Akashic Engine v3 では <code>g.game.joinedPlayerIds</code> を利用することもできます。 <code>g.game.joinedPlayerIds</code> は、そのゲームプレイ中に join した (leave していない) すべてのプレイヤー ID を保持する配列です。</p><p>そのため <code>lastJoindPlayerId</code> を自力で求めずとも、次のように書くことができます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group--JFgZ" id="tab-H1ey1A_" checked><label for="tab-H1ey1A_">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (g.game.joinedPlayerIds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ev.palyer.id)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ニコニコ生放送上で動かす場合、イベントを生成した(＝画面を押下した)のが「放送者」である時のみ実行される</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div></div><p>:::</p><h2 id="selfid-and-local" tabindex="-1">g.game.selfId とローカル処理 <a class="header-anchor" href="#selfid-and-local" aria-label="Permalink to &quot;g.game.selfId とローカル処理 {#selfid-and-local}&quot;">​</a></h2><p><code>g.game.selfId</code> は「プレイヤーごとに異なる値」です。そのため <strong>これを参照する条件分岐内の処理は <a href="/tutorial/v3/multiplay/each-player.html#local-operation">ローカル処理</a> になる</strong> ことに注意してください。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>g.game.selfId</code> は必ずしも常に存在するとは限らないことに注意してください。存在しない場合、値は <code>undefined</code> になります。 マルチプレイのニコ生ゲームでは、サーバ側でもゲームを実行する関係上、必ず <code>g.game.selfId</code> が存在しないインスタンスがあります。</p></div><p>先ほどのコードのこの部分がこれに該当します。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-stqvB" id="tab-1nvosBK" checked><label for="tab-1nvosBK">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (g.game.selfId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastJoinedPlayerId) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ニコニコ生放送上で動かす場合、この実行環境(インスタンス)が「放送者」のものである時のみ実行される</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>この if 文のブロックは、プレイヤーによって実行されるかどうかが異なります。 そのためローカルイベントに対する処理と同じく、「プレイヤー間で間接的に共有されている実行状態」を破壊してはいけません。 たとえば <code>g.Game#random</code> を利用したり、非ローカルなエンティティを生成・操作すると、他プレイヤーと実行状態がずれてしまい、マルチプレイが破綻します。</p><p>詳細は <a href="/tutorial/v3/multiplay/each-player.html">Akashic Engine 入門 » プレイヤーごとに異なる描画を行う</a> の <a href="/tutorial/v3/multiplay/each-player.html#local-operation">ローカル処理とその制限</a> を参照してください。</p><div class="danger custom-block"><p class="custom-block-title">IMPORTANT</p><p>なお、同じ先ほどのコードでも、こちらはローカル処理になりません (通常のシーンの場合)。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-2snLN" id="tab-pXPpqkr" checked><label for="tab-pXPpqkr">JavaScript/TypeScript</label></div><div class="blocks"><div class="language-JavaScript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ev.player.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastJoinedPlayerId) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ニコニコ生放送上で動かす場合、イベントを生成した(＝画面を押下した)のが「放送者」である時のみ実行される</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div></div><p>イベント <code>ev</code> は (ローディングシーン中など一部を除き) 全プレイヤーが共通して受け取る値です。 また <code>lastJoinedPlayerId</code> も <code>g.game.onJoin</code> という「全プレイヤーが共通して受け取る通知」から求められているので、プレイヤーに依存しません。 そのためこの条件分岐の中は、全プレイヤーが同じイベントを受け取った時には同じように実行されるはずです。</p><p>このように、ある条件分岐のブロックがローカル処理の制限を受けるかどうかは、参照する値がプレイヤー依存かどうかによって決まります。 :::</p>`,25),t=[p];function d(h,o,c,k,r,g){return e(),i("div",null,t)}const m=a(l,[["render",d]]);export{y as __pageData,m as default};
