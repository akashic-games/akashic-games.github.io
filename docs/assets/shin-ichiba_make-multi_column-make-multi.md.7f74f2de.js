import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.459ab1e9.js";const e="/assets/04-01.a7b7d7d1.png",o="/assets/04-02.0fb9bb90.png",p="/assets/04-03.a5f25029.png",b=JSON.parse('{"title":"実際にマルチプレイゲームを考えて作ろう","description":"","frontmatter":{},"headers":[],"relativePath":"shin-ichiba/make-multi/column-make-multi.md","filePath":"shin-ichiba/make-multi/column-make-multi.md"}'),t={name:"shin-ichiba/make-multi/column-make-multi.md"},i=l(`<h1 id="実際にマルチプレイゲームを考えて作ろう" tabindex="-1">実際にマルチプレイゲームを考えて作ろう <a class="header-anchor" href="#実際にマルチプレイゲームを考えて作ろう" aria-label="Permalink to &quot;実際にマルチプレイゲームを考えて作ろう&quot;">​</a></h1><p>前ページまでで、Akashic Engine + マルチプレイ なゲームを作るための大雑把な知識を導入し終わりました。 最後に、いままでのおさらいや考え方を軽く流した後に、こちらで用意したサンプルゲームの紹介をしていこうと思います。</p><h2 id="いままでのまとめ" tabindex="-1">いままでのまとめ <a class="header-anchor" href="#いままでのまとめ" aria-label="Permalink to &quot;いままでのまとめ&quot;">​</a></h2><p><strong>今までの連載を１項目につき一行で</strong>おさらいします。</p><ul><li>マルチプレイゲームとはどういうものか <ul><li>他人が同じ世界に存在し、共有物やお互いに干渉しあうゲーム</li></ul></li><li>他人と自分で違う状態を持つ方法 <ul><li>ローカル処理によって<strong>自分の PC だけで発生する処理</strong>、を記述できます</li></ul></li><li>自分の操作を他人へ伝える方法 <ul><li>raiseEvent によって、<strong>任意の情報を全員に送信</strong>することができます</li></ul></li><li>ニコ生上で動作させるための tips <ul><li>ゲーム起動直後の Join 処理によって、<strong>放送者を識別</strong>することができます</li></ul></li></ul><p>かなりの超特急にも感じますが、仕組みの解説は殆ど終わっています。 今回紹介するサンプルゲームも、今まで連載に出て来た以上のことはしていません。</p><h2 id="実際にゲーム作る" tabindex="-1">実際にゲーム作る <a class="header-anchor" href="#実際にゲーム作る" aria-label="Permalink to &quot;実際にゲーム作る&quot;">​</a></h2><p>実際のゲームの中身は皆さんに考えていただくとして、以上の知識があれば理論上はマルチプレイゲームが作れます。 したがって以下では、技術の話というよりはサンプルゲームを紹介しつつ、どのような流れで作り、何を気をつけたか、といった<strong>大まかな流れの部分</strong>を説明していこうと思います。</p><h3 id="ゲームを考えた" tabindex="-1">ゲームを考えた <a class="header-anchor" href="#ゲームを考えた" aria-label="Permalink to &quot;ゲームを考えた&quot;">​</a></h3><p>一番最初の記事に遡って、どんなゲームを作るか考えます。こういう時のコツは、目標や条件など定義して<strong>自らに制約を課す</strong>ことです。 今回は以下の制約を設定しました。</p><ul><li>ニコ生上で投稿ゲームとして動作させること（運営だけが使える機能みたいなのは使わない）</li><li>PC、スマホ両方で遊べること <ul><li>スマホ対応、という点からキーボードとマウスに依存しないこと</li><li>PC 対応、という点からマルチタッチに依存しないこと</li><li>以上より、指一本で遊べ、精密なタッチを要求しないこと <ul><li>小さいマス目を正確にタッチする、みたいなのはスマホではキツイ</li><li>綺麗な直線を素早く書く、みたいなのはマウスではキツイ</li></ul></li></ul></li><li>放送者を含む参加者全員のガチンコ勝負で、最後に一人だけ勝者が決まること</li><li>画面上に他人が存在すること</li><li>複雑なルールを要求しないこと</li></ul><p>こんな感じで設定しました。 最近のニコ生ではタワーが流行っています。少し前はつりっくまやだるまさんがホットでしたね。 タワーは協力ゲーム、だるまさんは放送者 vs 他全員、つりっくまは個人戦だけど他人の様子がよくわからない、という特徴を持っていました。 今回はそれのいずれとも性質の異なるゲームを作りたくて前述の制約となりました。</p><h2 id="jumpergame" tabindex="-1">JumperGame <a class="header-anchor" href="#jumpergame" aria-label="Permalink to &quot;JumperGame&quot;">​</a></h2><p>岩を避けながらジャンプし、少しずつ右へ進んでいくゲームを作りました。 最大３０人まで参加することができます。見た目はなんともですが</p><ul><li>放送者をゲームマスターとした参加、募集締め切り</li><li>参加者全員で同期したゲーム進行</li><li>自分のジャンプを全員に通知し同期させる</li></ul><p>といった、マルチプレイゲームに必要な要素はだいたい入っていると思います。</p><p>ソースコード一式は以下で入手できます。 <a href="https://github.com/akashic-contents/jumper-game" target="_blank" rel="noreferrer">https://github.com/akashic-contents/jumper-game</a></p><h3 id="ゲームの流れ" tabindex="-1">ゲームの流れ <a class="header-anchor" href="#ゲームの流れ" aria-label="Permalink to &quot;ゲームの流れ&quot;">​</a></h3><ol><li>ゲームが起動されると誰かの join を一回だけ待つ</li><li>join して来た人をゲームマスターとして設定</li><li>タイトル画面で参加者待ち受け開始</li><li>ゲームマスターが適当なタイミングでゲーム開始</li><li>ゲーム画面で遊ぶ</li><li>終了条件を満たしたら終わり</li><li>3 に戻る</li></ol><p>これを繰り返します。以下で個別に解説していきます。ゲームマスターや Join については第３回の記事が理解に役立つでしょう。</p><h3 id="ゲームマスターの-join-待ち" tabindex="-1">ゲームマスターの Join 待ち <a class="header-anchor" href="#ゲームマスターの-join-待ち" aria-label="Permalink to &quot;ゲームマスターの Join 待ち&quot;">​</a></h3><p>ゲーム起動直後のコードがこんな感じです。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onJoin</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// e.player.idを使って初期化処理</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">g.game.join.</span><span style="color:#B392F0;">addOnce</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">onJoin</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// joinを待ち受ける仮のシーン</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dummyScene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"><span style="color:#E1E4E8;">dummyScene.update.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">g.game.</span><span style="color:#B392F0;">pushScene</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({ game: g.game }));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onJoin</span><span style="color:#24292E;">(</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// e.player.idを使って初期化処理</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">g.game.join.</span><span style="color:#6F42C1;">addOnce</span><span style="color:#24292E;">(</span><span style="color:#E36209;">e</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">onJoin</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// joinを待ち受ける仮のシーン</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dummyScene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({ game: g.game });</span></span>
<span class="line"><span style="color:#24292E;">dummyScene.update.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">g.game.</span><span style="color:#6F42C1;">pushScene</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({ game: g.game }));</span></span></code></pre></div><p>Akashic Engine の仕組み上での Join を待ちます。ニコ生ではゲーム起動時に放送者のみが Join する、という仕組みになっていますので実際にはほぼ一瞬かと思います。</p><h3 id="タイトル画面" tabindex="-1">タイトル画面 <a class="header-anchor" href="#タイトル画面" aria-label="Permalink to &quot;タイトル画面&quot;">​</a></h3><p>タイトル画面の中身は解説記事第三回の中身ほぼそのままです。 ボタンを二つ初期化し、ゲームマスターには参加締め切りボタン、それ以外の人には参加ボタンを表示しています。</p><div style="display:flex;flex-flow:row nowrap;"><img src="`+e+'" width="300"><img src="'+o+'" width="300"></div><p>それぞれのボタンはローカルエンティティとなっていて</p><ul><li>開始ボタン：close メッセージを全員に送り、募集を終了する</li><li>参加ボタン：join メッセージを送り、募集に参加する</li></ul><p>という機能を持ちます。ここでいう join は Akashic Engine の Join とは関係ない、このゲーム独自の処理です。</p><h3 id="ゲーム画面" tabindex="-1">ゲーム画面 <a class="header-anchor" href="#ゲーム画面" aria-label="Permalink to &quot;ゲーム画面&quot;">​</a></h3><img src="'+p+'" width="600"><p>ゲームが開始されると、もし参加していればボタンが二つ表示され、自分のキャラ（Jumper）が赤くハイライトされます。 ここで重要なのは、<strong>何がローカルで何がグローバルなのか</strong>を考えることです。 Akashic Engine では特筆しない限りグローバルとなるので、この画面に存在するもののほとんどはグローバルであり、ローカルなものを抽出したほうが早いでしょう。</p><p>と言いつつ、ローカルなものは殆どありません。 敵の配置やラウンド進行、残り人数や順位といった、<strong>ほぼ全ての情報は同期してほしい</strong>ためグローバルになっています。 ローカルな分岐で破壊しないことに気をつけて書くだけで、全ての操作が同期するのは結構すごいことです。Akashic Engine の強みです。</p><p>一応以下に、意識してローカルエンティティを書いた部分をあげておきます。</p><h3 id="今回のゲームでローカルなもの" tabindex="-1">今回のゲームでローカルなもの <a class="header-anchor" href="#今回のゲームでローカルなもの" aria-label="Permalink to &quot;今回のゲームでローカルなもの&quot;">​</a></h3><h4 id="ボタン" tabindex="-1">ボタン <a class="header-anchor" href="#ボタン" aria-label="Permalink to &quot;ボタン&quot;">​</a></h4><p>まず、左下と右下にあるボタンは操作用のもので、これを押すと Jumper がジャンプしたり、挨拶したりします。 自分がジャンプボタンを押した時、<strong>自分の Jumper だけがジャンプしなければなりません。</strong></p><p>これを実現する方法は二つあります。</p><ol><li>ボタンが押された時の処理で誰が押したかを判定し、そのキャラだけをジャンプさせる</li><li>ボタンをローカルエンティティとして作り、メッセージを送信してそのメッセージでジャンプさせる</li></ol><p>どちらでも実現できます。1 のほうが処理が簡単なのですが追加条件として</p><p>a. ジャンプした後はしばらくボタンが押せない b. ジャンプできない場合、ボタンがグレーになる</p><p>をつけると話が変わってきます。a だけであればまだ 1 でも大丈夫でしたが、ボタンそのものの状態を各々変えるにはボタンをローカルエンティティにする必要があります。 そうするとボタンが押された時の処理にはグローバルなものが書けないため、2 の手法を取る必要があります。挨拶ボタンに関しても同様です。</p><h4 id="jumper" tabindex="-1">Jumper <a class="header-anchor" href="#jumper" aria-label="Permalink to &quot;Jumper&quot;">​</a></h4><p>Jumper の画像もローカルエンティティです。 Jumper の位置、生死、ジャンプしているかどうかなどといった情報は全てグローバルなものですが、<strong>自分の Jumper は強調表示されてほしい</strong>ため、Sprite はローカルエンティティで作ります。</p><h2 id="制作を進めていく上での注意点" tabindex="-1">制作を進めていく上での注意点 <a class="header-anchor" href="#制作を進めていく上での注意点" aria-label="Permalink to &quot;制作を進めていく上での注意点&quot;">​</a></h2><h3 id="raiseevent-の取り扱い" tabindex="-1">raiseEvent の取り扱い <a class="header-anchor" href="#raiseevent-の取り扱い" aria-label="Permalink to &quot;raiseEvent の取り扱い&quot;">​</a></h3><p>実際にゲームを作っていくとすぐにわかることなのですが、<strong>raiseEvent を使わなければならないシーンはかなり少ない</strong>です。 <strong>状態は何もしなくても他人と同期する</strong>という Akashic Engine の特徴があるためです。 同期していないもの、つまり<strong>他人が知り得ない情報が同期状態にあるものに影響を及ぼすとき</strong>初めて、raiseEvent の出番になります。 大体において、これは誰かがローカルなエンティティを操作した時が該当します。 <strong>自分だけの操作は他の人は知り得ない</strong>ので、操作した結果を通知する必要があるわけですね。</p><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><p>今回は今までのおさらいを軽くしつつ、いままでのまとめとして作ったマルチプレイゲームを掲載しました。 マルチプレイゲームの作成に基本的な知識は解説し終わりましたので、ここで一旦この記事は一区切りとなります。 ニコ生上でマルチプレイゲームを作るという試みは一見荒唐無稽ですが、ニコ生での新しい遊び方の一つとして今後も進めていきたいと考えています。 現時点でも、ニコ生上でゲームを動作させると以下のようなメリットがあります。</p><ul><li>サーバーを用意せず公開できる（生放送にきてもらう必要がありますが）</li><li>ログイン機構がいらない（ニコニコにログインしないとゲームが操作できない）</li><li>タイムシフトに対応する（Akashic Engine の機能でプレー内容が保存される）</li></ul><p>まだまだ機能が少なかったり、解説できていない機能もあったりしますが、この記事が少しでもニコ生ゲーム投稿の助けになれば幸いです。</p>',52),r=[i];function c(h,E,u,y,d,m){return a(),n("div",null,r)}const k=s(t,[["render",c]]);export{b as __pageData,k as default};
