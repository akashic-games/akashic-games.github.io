import{_ as e,c as a,o as i,a3 as t}from"./chunks/framework.B_s5ISUx.js";const u=JSON.parse('{"title":"ゲームを公開する","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v3/export.md","filePath":"tutorial/v3/export.md"}'),o={name:"tutorial/v3/export.md"},s=t('<h1 id="ゲームを公開する" tabindex="-1">ゲームを公開する <a class="header-anchor" href="#ゲームを公開する" aria-label="Permalink to &quot;ゲームを公開する&quot;">​</a></h1><p>作成したゲームを動かす方法としては akashic sandbox がありますが、 akashic sandbox はデバッグ用にローカルな環境で動作させるためのツールです。ゲームを公開するには、ゲームがスタンドアロンで動作するように変換・出力する必要があります。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>このページはシングルプレイゲームのための手順です。 マルチプレイゲームについては、 <a href="./multiplay/release-multiplay.html">Akashic Engine 入門 » マルチプレイゲームを公開する</a> を参照してください。</p></div><h2 id="export-for-standalone" tabindex="-1">スタンドアロン形式にエクスポート <a class="header-anchor" href="#export-for-standalone" aria-label="Permalink to &quot;スタンドアロン形式にエクスポート {#export-for-standalone}&quot;">​</a></h2><p><code>akashic</code>コマンドの<code>export</code>コマンドを利用します。コマンドは game.json ファイルのあるディレクトリで実行してください。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">akashic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> html</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --magnify</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../mygame</span></span></code></pre></div><p>保存するディレクトリを<code>--output</code>オプションで指定します。ゲームのディレクトリ内部に保存するディレクトリを指定することはできません。この例のようにゲームのディレクトリの外を指定してください。</p><p><code>--magnify</code> を指定すると、Akashic のゲーム画面がブラウザのゲーム表示領域に合わせて拡大されます。指定しない場合、描画サイズは game.json に記述されたゲームサイズに固定されます。</p><p><code>--minify</code> を指定すると、JavaScript のコードをミニファイします。圧縮してファイルサイズを削減したいときに利用できます。</p><p><code>--bundle</code> を指定すると、JavaScript のコードを 1 ファイルにまとめてファイル数を削減します。ゲームに含まれるファイル数が多いときにファイルアクセス数を減らすことができます。</p><p>上の例では使っていませんが、 <code>--hash-filename</code> を指定すると、エクスポート内容のファイル名を難読化します。</p><h3 id="exported-files" tabindex="-1">出力されるファイル <a class="header-anchor" href="#exported-files" aria-label="Permalink to &quot;出力されるファイル {#exported-files}&quot;">​</a></h3><p>エクスポートされるのは index.html と必要なアセットを含むディレクトリです。このディレクトリを適当な web サーバにアップロードし、ブラウザで index.html を閲覧するとゲームが動作します。index.html は iframe 要素で読み込むこともできます。</p><h2 id="export-for-nicolive" tabindex="-1">ニコニコ生放送で遊べるゲームとしてエクスポート <a class="header-anchor" href="#export-for-nicolive" aria-label="Permalink to &quot;ニコニコ生放送で遊べるゲームとしてエクスポート {#export-for-nicolive}&quot;">​</a></h2><p>Akashic Engine で作成したゲームは、<a href="https://live.nicovideo.jp/" target="_blank" rel="noreferrer">ニコニコ生放送</a> の配信上で遊ぶことができます。 この場合は専用のオプション <code>--nicolive</code> をつけて <code>akashic export zip</code> を利用します。</p><p>詳細は以下を参照してください。</p><ul><li><a href="/shin-ichiba/">ニコ生ゲームを作ろう</a></li></ul>',17),r=[s];function l(n,p,c,h,d,k){return i(),a("div",null,r)}const f=e(o,[["render",l]]);export{u as __pageData,f as default};
