import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.f1c0562b.js";const l="/assets/circle.7f24ba6f.svg",g=JSON.parse('{"title":"SVG ファイルを画像アセットとして利用する","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/asset/svg-asset.md","filePath":"reverse-reference/v3/asset/svg-asset.md"}'),p={name:"reverse-reference/v3/asset/svg-asset.md"},e=o(`<h1 id="svg-ファイルを画像アセットとして利用する" tabindex="-1">SVG ファイルを画像アセットとして利用する <a class="header-anchor" href="#svg-ファイルを画像アセットとして利用する" aria-label="Permalink to &quot;SVG ファイルを画像アセットとして利用する&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>この機能は現段階では実験的な立ち位置です。本文書にある注意事項を把握した上で利用するようにしてください。 また、将来的に仕様が変更/廃止される可能性があることをご留意ください。</p></div><p><code>akashic-engine@3.2.0</code> 以降では SVG ファイルを画像アセットとして利用することができます。 SVG ファイルを利用することで今まで Akashic Engine で表現することが難しかった <strong>円</strong> や <strong>曲線</strong> などの描画を手軽に実現することが可能になります。</p><h2 id="利用できる-svg-ファイルの仕様" tabindex="-1">利用できる SVG ファイルの仕様 <a class="header-anchor" href="#利用できる-svg-ファイルの仕様" aria-label="Permalink to &quot;利用できる SVG ファイルの仕様&quot;">​</a></h2><p>Akashic Engine では SVG ファイルを単一の画像データとしてのみ利用することができます。 したがって以下の機能は利用することができません。</p><ul><li>アニメーション (animation, transition など) を伴う機能</li><li>外部リンクへの遷移やスクリプト実行を伴う機能</li></ul><p>加えて実装の都合上、以下の条件を満たす必要があります。</p><ul><li>ルートの <code>&lt;svg&gt;</code> 要素に <code>width</code>, <code>height</code> 属性が存在し、単位として <code>px</code> が使われている (<code>%</code> や <code>mm</code> などではない)</li></ul><h2 id="svg-ファイル" tabindex="-1">SVG ファイル <a class="header-anchor" href="#svg-ファイル" aria-label="Permalink to &quot;SVG ファイル&quot;">​</a></h2><p>以下は 100x100 のベージュ色の円を表す Akashic Engine として妥当な SVG ファイルの記述例です。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">width</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;100&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">height</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;100&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">viewbox</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;0 0 100 100&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">version</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1.1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2000/svg&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">circle</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;#D2B48C&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cx</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;50&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cy</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;50&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;50&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">svg</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">width</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;100&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">height</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;100&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">viewbox</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;0 0 100 100&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.1&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2000/svg&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">circle</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;#D2B48C&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cx</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;50&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cy</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;50&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">r</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;50&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">svg</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><img src="`+l+`" alt="円"></p><h2 id="svg-ファイルのスキャン" tabindex="-1">SVG ファイルのスキャン <a class="header-anchor" href="#svg-ファイルのスキャン" aria-label="Permalink to &quot;SVG ファイルのスキャン&quot;">​</a></h2><p>akashic-cli v2.11.0 以降であれば <code>akashic scan</code> 時に <code>.svg</code> ファイルを <code>&quot;vector-image&quot;</code> アセットとしてスキャンできます。 ただし前述した制限に該当する SVG ファイルはスキャン時にリジェクトされます。</p><p>上記の SVG ファイルを <code>circle.svg</code> として保存し、 <code>image</code> ディレクトリや <code>assets</code> ディレクトリに格納しておくと、 <code>akashic scan asset</code> でスキャンできるようになります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;circle&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;vector-image&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;width&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;height&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;image/circle.svg&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;circle&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;vector-image&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;width&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;height&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;image/circle.svg&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="ゲームコンテンツからの利用" tabindex="-1">ゲームコンテンツからの利用 <a class="header-anchor" href="#ゲームコンテンツからの利用" aria-label="Permalink to &quot;ゲームコンテンツからの利用&quot;">​</a></h2><p>ゲームコンテンツから利用する場合、SVG の画像データを <code>g.Surface</code> に変換 (ラスタライズ) します。 ゲーム開発者自身が生成した <code>g.Surface</code> はエンジンによるリソース開放処理が行われません。 描画用メモリの枯渇を防ぐためにも、適切なタイミングで <code>g.Surface</code> を開放してください。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> asset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getVectorImageById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sample&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> surface </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> asset.</span><span style="color:#B392F0;">createSurface</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 当該の SVG 画像を 200x200 のサーフェスにラスタライズ</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">surface) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ! SVG が利用できない場合のフォールバック対応</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sprite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Surface</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">  src: surface </span><span style="color:#6A737D;">// g.Sprite のソース画像として利用</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">surface.</span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// ! 参照されなくなったタイミングで開放</span></span>
<span class="line"><span style="color:#6A737D;">// or</span></span>
<span class="line"><span style="color:#E1E4E8;">sprite.</span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// ! g.Sprite の場合は destroy() に引数 true を渡すことで g.Surface を開放可能</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> asset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getVectorImageById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sample&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> surface </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> asset.</span><span style="color:#6F42C1;">createSurface</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 当該の SVG 画像を 200x200 のサーフェスにラスタライズ</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">surface) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ! SVG が利用できない場合のフォールバック対応</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sprite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Surface</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">  src: surface </span><span style="color:#6A737D;">// g.Sprite のソース画像として利用</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">surface.</span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// ! 参照されなくなったタイミングで開放</span></span>
<span class="line"><span style="color:#6A737D;">// or</span></span>
<span class="line"><span style="color:#24292E;">sprite.</span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// ! g.Sprite の場合は destroy() に引数 true を渡すことで g.Surface を開放可能</span></span></code></pre></div><h2 id="注意事項" tabindex="-1">注意事項 <a class="header-anchor" href="#注意事項" aria-label="Permalink to &quot;注意事項&quot;">​</a></h2><p>SVG ファイルのサポートは現時点では実験段階です。 特に マルチプレイモード (<a href="/tutorial/v3/multiplay/introduction.html">参考リンク</a>) でゲームを作成する場合、サーバサイドで実行されるインスタンス上では <code>createSurface()</code> の戻り値が <code>null</code> となることがあります。 <code>null</code> を返すことを想定せず直接 <code>g.Sprite</code> の <code>src</code> に渡すなどしてしまうと思わぬエラーが発生する可能性があります。 そのため、以下のように <strong>必ず開発者自身でフォールバック対策を行う</strong> ようにしてください。</p><ul><li>空の <code>g.Surface</code> を利用する</li><li>SVG 画像データをソースとする <code>g.Sprite</code> などのエンティティを生成しない</li><li>代替の PNG 画像を読み込む</li></ul>`,22),t=[e];function c(r,E,y,i,u,d){return a(),n("div",null,t)}const h=s(p,[["render",c]]);export{g as __pageData,h as default};
