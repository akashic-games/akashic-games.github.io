import{_ as e,c as l,I as a,w as n,a3 as s,E as h,o as t,k as p}from"./chunks/framework.B_s5ISUx.js";const k="/assets/gw-lifegauge-before.f7j4kjRF.png",d="/assets/gw-lifegauge-after.CiBNNbIt.png",r="/assets/gw-lifegauge-after-x0.q59dv-ez.png",j=JSON.parse('{"title":"改造: 体力を増やしてみる","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"shin-ichiba/mod-galaxy-wars/change-life.md","filePath":"shin-ichiba/mod-galaxy-wars/change-life.md"}'),c={name:"shin-ichiba/mod-galaxy-wars/change-life.md"},E=s('<h1 id="改造-体力を増やしてみる" tabindex="-1">改造: 体力を増やしてみる <a class="header-anchor" href="#改造-体力を増やしてみる" aria-label="Permalink to &quot;改造: 体力を増やしてみる&quot;">​</a></h1><p>ソースコードを改変する改造で、もっとも単純なのは定数の変更でしょう。 ここではプログラムの「変数」と呼ばれる機能を紹介し、自機の初期体力を増やす改造をします。</p><h2 id="変数と定数" tabindex="-1">変数と定数 <a class="header-anchor" href="#変数と定数" aria-label="Permalink to &quot;変数と定数&quot;">​</a></h2><p>ゲーム中の処理で変化する値は、ソースコード上では <strong>変数</strong> として表現されます。 たとえば Galaxy Wars には次のような変数があります。</p><ul><li>自機の現在位置</li><li>現在の体力やスコア</li><li>ゲームの残り時間</li><li>今は爆発アニメーションの何フレーム目を表示しているか</li></ul><p>プログラムは、時間経過やプレイヤーの操作に応じて処理を行い、変数の値を変化させます。 変数の値に応じて変化する画面を (一秒間に数十回ずつ) 描画しつづけるのが、ゲームの典型的な形です。</p><p>一部の値は、ゲーム中にまったく変化しません。これを <strong>定数</strong> と呼びます。たとえば次のような値は定数です。</p><ul><li>自機の最大体力</li><li>敵の移動スピード</li><li>敵を倒して得られるスコア</li><li>弾の威力</li><li>タイトル画面の表示時間</li></ul><p>ソースコードから定数を見つけて書き換えれば、自機の性能や敵の挙動をある程度自由に変更することができます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ここではわかりやすさのため「数値」を扱う変数だけを挙げています。実際には「文字列」や、 ゲーム画面に表示される「画像データ」なども変数に代入して扱うことができます。 たとえば RPG でプレイヤーが指定する「主人公の名前」は、文字列の変数として表現されます。</p></div><h2 id="自機の体力を変更してみる" tabindex="-1">自機の体力を変更してみる <a class="header-anchor" href="#自機の体力を変更してみる" aria-label="Permalink to &quot;自機の体力を変更してみる&quot;">​</a></h2><p>ここでは定数を書き換える改造の例として、自機の体力を変更してみましょう。</p><p>自機の体力は画面左上に表示されています。ゲージの表示を数えると、どうやら初期値は 10 であることがわかります。</p>',13),g=p("img",{src:k},null,-1),o=s(`<h3 id="galaxy-wars-のスクリプト構成" tabindex="-1">Galaxy Wars のスクリプト構成 <a class="header-anchor" href="#galaxy-wars-のスクリプト構成" aria-label="Permalink to &quot;Galaxy Wars のスクリプト構成&quot;">​</a></h3><p>改造にあたっては「自機の体力」の定数がどこで定義されているか探さなければなりません。</p><p>Akashic Engine のゲームのプログラムは <code>script/</code> フォルダに格納されています。 Galaxy Wars のフォルダ構造を確認すると、次のようになっています。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GalaxyWars/</span></span>
<span class="line"><span>├── game.json</span></span>
<span class="line"><span>├── image/</span></span>
<span class="line"><span>│   ├── (中略)</span></span>
<span class="line"><span>│   └── title.png</span></span>
<span class="line"><span>├── script/</span></span>
<span class="line"><span>│   ├── AlphaEnemy.js</span></span>
<span class="line"><span>│   ├── Background.js</span></span>
<span class="line"><span>│   ├── BetaEnemy.js</span></span>
<span class="line"><span>│   ├── Bullet.js</span></span>
<span class="line"><span>│   ├── Enemy.js</span></span>
<span class="line"><span>│   ├── EnemyManager.js</span></span>
<span class="line"><span>│   ├── EntityType.js</span></span>
<span class="line"><span>│   ├── GameCore.js</span></span>
<span class="line"><span>│   ├── GameOverLogo.js</span></span>
<span class="line"><span>│   ├── GammaEnemy.js</span></span>
<span class="line"><span>│   ├── Global.js</span></span>
<span class="line"><span>│   ├── Item.js</span></span>
<span class="line"><span>│   ├── ItemGaugeTray.js</span></span>
<span class="line"><span>│   ├── ItemType.js</span></span>
<span class="line"><span>│   ├── Math.js</span></span>
<span class="line"><span>│   ├── Particle.js</span></span>
<span class="line"><span>│   ├── Player.js</span></span>
<span class="line"><span>│   ├── PlayerStatus.js</span></span>
<span class="line"><span>│   ├── ScreenEffector.js</span></span>
<span class="line"><span>│   ├── Shield.js</span></span>
<span class="line"><span>│   ├── bootScene.js</span></span>
<span class="line"><span>│   ├── emmitDamageEffect.js</span></span>
<span class="line"><span>│   ├── gameScene.js</span></span>
<span class="line"><span>│   ├── main.js</span></span>
<span class="line"><span>│   └── titleScene.js</span></span>
<span class="line"><span>└── text/</span></span>
<span class="line"><span>    ├── glyph_area.json</span></span>
<span class="line"><span>    └── version.txt</span></span></code></pre></div><p>.js ファイルが 25 個あり、すべて読むと大変ですが、ファイル名からある程度内容を推測できそうです。 たとえば <code>Bullet.js</code> は恐らく弾丸に関する処理、<code>Shield.js</code> はシールド、 <code>GameOverLogo.js</code> はゲームオーバー画面関連の処理が書かれていることでしょう。</p><h3 id="定数の書き換え" tabindex="-1">定数の書き換え <a class="header-anchor" href="#定数の書き換え" aria-label="Permalink to &quot;定数の書き換え&quot;">​</a></h3><p>「自機の体力」は自機関連の値なので <code>Player.js</code> か <code>PlayerStatus.js</code> に定義されている、と予想できそうです。 実際に <code>Player.js</code> を確認すると、ファイルの末尾付近に次のような行が見つかります。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// プレイヤー最大HP</span></span></code></pre></div><p>これは JavaScsript で「 <code>Player</code> の <code>MAX_HP</code> という変数に、 <code>10</code> を代入する」という意味の文です。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>等号 <code>=</code> の意味が数学とは少し異なることに注意してください。 数学において数式 <code>A = B</code> は「<code>A</code> と <code>B</code> は等しい」という意味です。 一方 JavaScript の <code>A = B</code> は <strong>「<code>A</code> という変数に <code>B</code> の値を代入する」</strong> という意味になります。 「等しい」というよりも「等しくする」ものだと考えてください。</p></div><p><code>MAX_HP</code> という変数名、<code>10</code> という値、そして <code>プレイヤー最大HP</code> というコメント (後述)、どれを見てもこれが自機の体力でしょう。 値を <code>30</code> に変えてみましょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line diff remove"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// プレイヤー最大HP</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// プレイヤー最大HP</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>// プレイヤー最大HP</code> の部分は「コメント」です。 JavaScript では <code>//</code> とそのあと行末までの文字はコメントになります。 コメントはプログラムの実行上無視されるもので、何でも書くことができます。 実際には、プログラムを読む際にわかりやすいよう補足説明などを書くために使われます。</p></div><p>ターミナルで <code>akashic sandbox</code> を実行し、動作がどう変化するか確認しましょう。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">akashic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sandbox</span></span></code></pre></div><p>Web ブラウザを確認すると、無事体力が増えたことがわかります。</p>`,16),y=p("img",{src:d},null,-1),b=s(`<h2 id="周辺コード解説" tabindex="-1">周辺コード解説 <a class="header-anchor" href="#周辺コード解説" aria-label="Permalink to &quot;周辺コード解説&quot;">​</a></h2><p><code>MAX_HP</code> が登場する他の箇所も眺めてみましょう。</p><p><code>Player.js</code> の中で、 <code>Player.MAX_HP</code> という記述が出てくる箇所は三つあります。 一つは先ほどの定義箇所で、値として <code>10</code> を設定 (代入) しています。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// プレイヤー最大HP</span></span></code></pre></div><h3 id="自機の状態をリセットする処理" tabindex="-1">自機の状態をリセットする処理 <a class="header-anchor" href="#自機の状態をリセットする処理" aria-label="Permalink to &quot;自機の状態をリセットする処理&quot;">​</a></h3><p>二つ目は、<code>class Player { ... }</code> という塊の中の <code>reset() { ... }</code> という塊の中です。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * Player初期化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EntityType_1.EntityType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PLAYER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> imgAsset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/image/player.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            x: (g.game.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgAsset.width) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            y: g.game.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgAsset.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.bulletCntr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.bulletInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>ここでは <code>class</code> などの詳細は省きますが、この <code>reset()</code> の塊 (6 行目から 18 行目) は「Player (自機) の状態を初期化 (リセット) する処理」になっています。 (行番号はここでの表示上のもので、実際のファイルの行番号とは異なります)</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>このことは「 <code>Player</code> の <code>reset</code> 」という名前から推測できるほか、 <code>reset()</code> のすぐ上のコメントからも読み取れます。 「<code>//</code> から行末まで」と同様、「<code>/*</code> から <code>*/</code> の間」も JavaScript の「コメント」です。 <code>//</code> と違い、こちらは複数行に渡ってコメントを書くことができます。</p></div><p>その中で <code>Player.MAX_HP</code> が登場するのはこの部分です。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>Player.MAX_HP</code> の定義箇所と同じように、これも <code>変数 = 値;</code> という形になっていることに気づきます。 これは「 <code>this</code> の <code>hp</code> という変数に <code>Player.MAX_HP</code> の値を代入する」という文です。 名前と文脈から見るに、自機の体力をリセットする (最大値に設定する) 処理でしょう。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>HP は「ヒットポイント」の略で、体力を表す言葉としてよく使われます。</p></div><div class="tip custom-block"><p class="custom-block-title">TIP: <code>this</code> について</p><p><code>Player.MAX_HP</code> は「自機の」最大体力、<code>this.hp</code> は「自機の」体力です。 ここで <code>Player</code> と <code>this</code> という二つの語が、どちらも「自機」を表していることに気づかれるかもしれません。 この違いの詳細はここでは説明しきれないのですが、<code>this</code> は「ゲーム開発者が定義しなくても使える」「書かれている場所によって意味が変わる」特殊な値です。</p><p>ここでは名前と文脈から「おそらく自機のことだろう」と推測できれば十分です。</p></div><h3 id="実験-初期位置を変えてみる" tabindex="-1">実験: 初期位置を変えてみる <a class="header-anchor" href="#実験-初期位置を変えてみる" aria-label="Permalink to &quot;実験: 初期位置を変えてみる&quot;">​</a></h3><p>自機のリセット処理 (<code>reset()</code>) の全体は複数の文でできています。 JavaScript の「文」とは、セミコロン <code>;</code> で終わるひとかたまりの記述です。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>セミコロン <code>;</code> は日本語の句点 <code>。</code> のようなものだと考えるとわかりやすいかもしれません。</p><p>ただし JavaScript にはセミコロンなしで終わる文もあります (ブロックを伴う if 文など)。 また場合によってはセミコロンを省略することもできます。ここではわかりやすさのため、セミコロンを省略しません。</p></div><p>再掲すると、<code>reset()</code> の全体像はこのようなものでした。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EntityType_1.EntityType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PLAYER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> imgAsset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/image/player.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            x: (g.game.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgAsset.width) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            y: g.game.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgAsset.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.bulletCntr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.bulletInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>複数の文は、原則上から順に実行されます。つまりこの「自機のリセット処理」は、まず以下の文を実行し、</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EntityType_1.EntityType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PLAYER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">2</span><br></div></div><p>次に以下の文を実行し、さらにその次の文を……と逐次実行していくものになっています。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> imgAsset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/image/player.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">3</span><br></div></div><p>ここだけ見てもよく分からない記述が大半ですが、たとえば以下の文は</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">8</span><br></div></div><p>名前から恐らくスコア (得点) を 0 にリセットしているだろう、ということが読み取れます。また以下のような複数行にわたる文もあります。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: (g.game.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgAsset.width) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: g.game.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgAsset.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>pos</code> は position (位置) の略、 <code>x</code>, <code>y</code> は画面の X, Y 座標に関係がありそうだと推測すると、この文は自機の位置をリセットしているものだと予想できます。</p><p>ためしに <code>x</code> のあとを <code>0</code> にしてみましょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line diff remove"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: (g.game.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgAsset.width) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: g.game.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgAsset.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>ターミナルで <code>akashic sandbox</code> を実行し、影響を確認します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">akashic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sandbox</span></span></code></pre></div><p>Web ブラウザを確認すると、無事 (？) 自機の初期位置が画面左端になりました。</p>`,33),F=p("img",{src:r},null,-1),u=s(`<p>改変した箇所は確かに自機の初期位置であることや、X 座標の 0 はどうやら画面の左端であるらしいことがわかります。 これはあくまで実験してみただけなので、 <code>x</code> の部分は元に戻しておきましょう。</p><div class="danger custom-block"><p class="custom-block-title">IMPORTANT</p><p>このようにコード改造は、<strong>名前から処理の内容を推測していく</strong> ことと、<strong>ためしに書き換えてみる</strong> ことが重要です。 ゲームが途中で止まるようになったり、画面が真っ白のままゲームが始まらなくなってしまうこともありますが、その場合はまた改造前のコードから始めましょう。 恐れず試行錯誤を重ねるのがおすすめです。</p></div><h3 id="回復アイテムの処理" tabindex="-1">回復アイテムの処理 <a class="header-anchor" href="#回復アイテムの処理" aria-label="Permalink to &quot;回復アイテムの処理&quot;">​</a></h3><p><code>Player.MAX_HP</code> が現れる三つ目の箇所は、回復アイテムの処理です。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onCollision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EntityType_1.EntityType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ITEM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.itemType) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemType_1.ItemType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RECOVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>次のページでは、このコードを簡単に解説しつつ、回復アイテムを強化してみます。</p>`,6);function m(C,A,v,_,B,P){const i=h("CaptionedFigure");return t(),l("div",null,[E,a(i,{caption:"Galaxy Wars の体力表示"},{default:n(()=>[g]),_:1}),o,a(i,{caption:"体力が変化した様子"},{default:n(()=>[y]),_:1}),b,a(i,{caption:"初期位置が横方向にずれた様子"},{default:n(()=>[F]),_:1}),u])}const x=e(c,[["render",m]]);export{j as __pageData,x as default};
