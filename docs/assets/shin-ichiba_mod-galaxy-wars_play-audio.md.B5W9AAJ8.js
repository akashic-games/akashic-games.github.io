import{c as i,I as a,a3 as s,o as n,ae as p,af as l}from"./chunks/framework.B_s5ISUx.js";import{_ as t}from"./chunks/TutorialDemoContentElement.vue_vue_type_script_setup_true_lang.Ck9Bzfs6.js";import"./chunks/theme.DqKlrJ2v.js";const e=s('<h1 id="改造-効果音を加えてみる" tabindex="-1">改造: 効果音を加えてみる <a class="header-anchor" href="#改造-効果音を加えてみる" aria-label="Permalink to &quot;改造: 効果音を加えてみる&quot;">​</a></h1><p>サンプルゲームである Galaxy Wars には BGM や効果音がありません。 ここでは効果音の追加を通して、JavaScript の「switch 文」と「関数呼び出し」を紹介します。</p><h2 id="素材の準備" tabindex="-1">素材の準備 <a class="header-anchor" href="#素材の準備" aria-label="Permalink to &quot;素材の準備&quot;">​</a></h2><p>効果音を鳴らすには音声ファイルが必要です。 次の 2 つのファイルをダウンロード (右クリックして「リンク先を別名で保存」など) してください。</p><ul><li><a href="/tutorial/mod-galaxy-wars/assets/SE_item.aac">SE_item.aac</a></li><li><a href="/tutorial/mod-galaxy-wars/assets/SE_item.ogg">SE_item.ogg</a></li></ul><p>内容はどちらも同じで、次のような音声です。</p><audio controls><source src="'+p+'" type="audio/aac"><source src="'+l+`" type="audio/ogg"></audio><p>ここではこれを「アイテムを取得した時の効果音」として鳴らしてみましょう。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>二種類の音声ファイルは <strong>両方</strong> 必要です。 これは環境によってサポートされている形式が違うためです。 Akashic Engine は拡張子だけが違う同名の音声ファイルをまとめて扱い、環境に応じて使い分けます。</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>この効果音は、サンプルゲーム『<a href="https://github.com/akashic-contents/niconicoSnake/" target="_blank" rel="noreferrer">ニコニコスネーク</a>』の効果音 SE_start.aac, .ogg を改名したものです。 ライセンス <a href="https://creativecommons.org/licenses/by/2.1/jp/" target="_blank" rel="noreferrer">CC BY 2.1 JP</a> に従って自由に利用できます。</p></div><p>Galaxy Wars のフォルダを開き、<code>audio</code> フォルダを作成して、その中にこの二つのファイルを置いてください。 次のようなフォルダ構成になります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GalaxyWars/</span></span>
<span class="line"><span>├── audio/</span></span>
<span class="line"><span>│   ├── SE_item.aac</span></span>
<span class="line"><span>│   └── SE_item.ogg</span></span>
<span class="line"><span>├── game.json</span></span>
<span class="line"><span>├── image/</span></span>
<span class="line"><span>│   └── (中略)</span></span>
<span class="line"><span>├── script/</span></span>
<span class="line"><span>│   └── (中略)</span></span>
<span class="line"><span>└── text/</span></span>
<span class="line"><span>    └── (中略)</span></span></code></pre></div><p>Akasshic Engine では、もう一つ準備作業が必要です。 ゲームで使う画像や音声ファイル (アセット) の情報を、設定ファイル (<code>game.json</code>) に記載しておく必要があるためです。</p><p><code>GalaxyWars</code> フォルダの <code>game.json</code> を開いて、次のように <code>&quot;SE_item&quot;: {</code> から対応する <code>},</code> までの行を追加してください。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;width&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">384</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;fps&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Galaxy Wars&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;画面をドラッグ(スワイプ)すると自機が移動します。自機の弾は自動で発射され、敵を倒すと様々なアイテムを落とします。左上のゲージがゼロになるとゲームオーバーです。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">こ&gt;のサンプルで使用している素材は[素材ページ](https://akashic-games.github.io/asset/material.html#GALAXYWARS)で公開・配布しています。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./script/main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;SE_item&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;audio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;audio/SE_item&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;global&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;systemId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sound&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;duration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1286</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script/main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;global&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP: アセットの半自動登録</p><p>ここでは紹介のため手動で game.json を編集していますが、通常この作業 (アセットの登録と削除) は <code>akashic scan</code> コマンドで半自動的に行えます。</p></div><h2 id="効果音を再生する箇所" tabindex="-1">効果音を再生する箇所 <a class="header-anchor" href="#効果音を再生する箇所" aria-label="Permalink to &quot;効果音を再生する箇所&quot;">​</a></h2><p>「アイテムを取得した時に効果音を再生する」には、まずアイテムの取得時に実行される箇所を探す必要があります。 今回は、前ページですでに「回復アイテムを取得した時の処理」を見つけているので、その近くを探せばよさそうだと推測できます。</p><p><code>script/Player.js</code> の「回復アイテムを取得した時の処理」付近を、改めて抜粋するとこのようなコードになっています。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 衝突イベントハンドラ</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onCollision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EntityType_1.EntityType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ITEM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> effectTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getter;</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.itemType) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -- (A)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemType_1.ItemType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHIELD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemType_1.ItemType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HOMING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                ...</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemType_1.ItemType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RECOVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -- (B)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p><code>(B)</code> の行からが「回復アイテム (RECOVER) を取得した時の処理」でした。 この処理は <code>(A)</code> の <code>switch (e.itemType) { ... }</code> というブロックに囲まれています。</p><h3 id="switch-文" tabindex="-1">switch 文 <a class="header-anchor" href="#switch-文" aria-label="Permalink to &quot;switch 文&quot;">​</a></h3><p><code>switch</code> のブロック内に <code>case</code>, <code>break</code> が現れるこの記述は、JavaScript の <strong>switch 文</strong> と呼ばれる構文です。 switch 文は次のような形をしています。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (条件値) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 値1:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    処理1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 値2:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    処理2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    デフォルト処理;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このように書くと、次のような意味になります。</p><ul><li>もし <code>条件値</code> が <code>値1</code> と一致するなら、 <code>処理1</code> を実行する</li><li>そうでなく、 <code>値2</code> と一致するなら、 <code>処理2</code> を実行する</li><li>(その後の <code>case</code> についても同様)</li><li>どの <code>case</code> の値とも一致しなければ、 <code>デフォルト処理</code> を実行する</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>default:</code> とその後の部分は省くこともできます。その場合、 <code>条件値</code> がどの <code>case</code> の値とも一致しなければ、何もせずに次に進みます。</li><li><code>break;</code> を忘れないようにしてください。<code>break;</code> の有無で動作が変わります。意図的に省くこともありますが、稀なのでここでは気にしないでください。</li><li>要は条件分岐なので、switch 文を使わず if-else 文で同じ処理を行うこともできます。 一つの <code>条件値</code> で値ごとに分岐したいことはよくあるので、専用の構文が用意されています。</li></ul></div><p>Galaxy Wars の先ほどの switch 文では、 <code>条件値</code> として <code>e.itemType</code> があり、以下のような <code>case</code> がありました。</p><ul><li><code>case ItemType_1.ItemType.SHIELD:</code></li><li><code>case ItemType_1.ItemType.HOMING:</code></li><li><code>case ItemType_1.ItemType.RECOVER:</code></li></ul><p>前後から察しがついていたかもしれませんが、つまりこれは「 <code>e.itemType</code> (<code>e</code> のアイテム種別) によって分岐する」コードです。 <code>e</code> は変数で、代入されている値はわかりませんが、文脈からすると「自機が今ぶつかった相手」でしょう。</p><p>さて、ここではアイテムの種類を問わず、何であれ同じ効果音を鳴らしたいのでした。 であれば効果音を再生する箇所は <strong>この switch 文の直前か直後</strong> が良さそうだとわかります。 プログラムは原則上から実行されるので、どのアイテムを取得していてもこの switch 文の直前の行や直後の行は実行されるでしょう。</p><h2 id="効果音を再生する" tabindex="-1">効果音を再生する <a class="header-anchor" href="#効果音を再生する" aria-label="Permalink to &quot;効果音を再生する&quot;">​</a></h2><p>効果音を再生するコード自体はごく簡潔です。 <code>script/Player.js</code> の switch 文の直前に、以下のように 2 行追加してください。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onCollision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EntityType_1.EntityType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ITEM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.hp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> effectTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getter;</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> seItemAsset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAudio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/audio/SE_item&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            g.game.audio.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seItemAsset); </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.itemType) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemType_1.ItemType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHIELD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>実行して動作を確認してみましょう。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">akashic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sandbox</span></span></code></pre></div><p>無音のプレイ中、アイテムを取得した時だけ効果音が再生されるややシュールなゲームになっていれば成功です。</p><h3 id="解説-変数定義と関数呼び出し" tabindex="-1">解説: 変数定義と関数呼び出し <a class="header-anchor" href="#解説-変数定義と関数呼び出し" aria-label="Permalink to &quot;解説: 変数定義と関数呼び出し&quot;">​</a></h3><p>追加した 2 行は次のようなものでした。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> seItemAsset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAudio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/audio/SE_item&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.audio.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seItemAsset);</span></span></code></pre></div><p>一行目の <code>const</code> は <strong>変数定義</strong> の構文 (の一つ) です。JavaScript では</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 変数名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 値;</span></span></code></pre></div><p>と書くと「<code>変数名</code> という名前の変数を定義し、その値として <code>値</code> を代入する」という意味になります。 つまりここでは、 <code>seItemAsset</code> という名前の変数を定義しています。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>const</code> による変数定義は、これまでに登場したある種の代入文とよく似ています。たとえば</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Player.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_HP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>という記述は、 <code>Player.MAX_HP</code> という名前で値 <code>10</code> を参照できるようになるので、おおむね変数定義のようなものでした。 このような代入と <code>const</code> の厳密な違いはここで解説しきれませんが、次のような点で異なります。</p><ul><li><code>const</code> は新たに変数を定義する。 <code>Player.MAX_HP = ...</code> は、すでにある <code>Player</code> に紐づく値 (プロパティ) を設定している。</li><li><code>const</code> で定義された変数は、それが書かれているブロックの中のコードでしか使えない。 <code>Player.MAX_HP</code> は <code>Player</code> にアクセスできる箇所ならどこでも使える。</li><li><code>const</code> で定義された変数には、後から <code>=</code> で別の値を代入することはできない。 <code>Player.MAX_HP</code> は、他の箇所で代入すれば書き換えることができる (定数として扱っているので実際は書き換えませんが) 。</li></ul></div><p><code>seItemAsset</code> に代入されている値は <code>g.game.asset.getAudio(&quot;/audio/SE_item&quot;)</code> です。</p><p>この名前のあとに括弧 <code>()</code> が続く表記は、JavaScript において <strong>関数の呼び出し</strong> を表します。 <strong>関数</strong> とは、処理をまとめたものです。 ここでは <code>g.game.asset.getAudio</code> という関数を呼び出していて、名前からこれは「音声 (オーディオ) アセットを取得する」関数だと推測できます。</p><p>関数は <strong>引数</strong> を取ることがあります。 たとえば今回の「音声アセットを取得する」関数には「どの音声を取得したいか」を指定する引数が必要です。 関数呼び出しの <code>()</code> の中に値を書くと、それは引数として関数に渡されます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>このあたりの言葉は、数学の関数 (e.g. sin(θ), log(x)) と同じです。 ただし JavaScript の関数はあくまでもプログラム＝処理のまとまりなので、値を返すだけでなく、画像を表示したり音声を再生したりという &quot;副作用&quot; を伴うことがあります。</p></div><p>ここで引数として与えられているのは <code>&quot;/audio/SE_item&quot;</code> という値です。 <code>&quot;&quot;</code> で括られた文字の並びは、JavaScript において「文字列」を表します。</p><p>まとめると 1 行目のこの文は、</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> seItemAsset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAudio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/audio/SE_item&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><code>g.game.asset.getAudio</code> (音声アセットを取得する関数) に、</li><li>引数として文字列 <code>&quot;/audio/SE_item&quot;</code> を与えて呼び出し、</li><li>その結果を、ここで定義した変数 <code>seItemAsset</code> に代入する</li></ul><p>という処理になっています。</p><p>2 行目は、単に関数呼び出しをしているだけです。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.audio.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seItemAsset);</span></span></code></pre></div><p><code>g.game.audio.play</code> は「音声アセットを再生する」関数で、引数として再生する対象を取ります。 1 行目で定義した変数を渡すことで、結果として <code>SE_item.ogg</code> (環境によっては <code>SE_item.aac</code>) にあたる音声アセットを再生する処理になっています。</p><div class="tip custom-block"><p class="custom-block-title">TIP: JavaScript と Akashic Engine</p><p>前ページまでで紹介した「変数」や「if 文」「演算子」「関数呼び出し」などは、全て JavaScript の言語機能です。 それらは JavaScript でプログラムを書く際には常に利用できます。</p><p>一方このページで扱った <code>g.game.asset.getAudio</code> と <code>g.game.audio.play</code> は、Akashic Engine が提供する関数です。 あくまで「Akashic Engine でゲームを作成する時」にしか利用できません。 非常に大雑把に言えば、Akashic Engine は「ゲームの作成に便利な JavaScript の関数詰め合わせ」のようなものです。</p><p>Akashic Engine の提供する機能は原則 <code>g.</code> で始まるようになっています。</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ここで 2 行に分けて書いたのは分かりやすさと解説のためで、変数を介さず 1 行で書いてしまうこともできます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.audio.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g.game.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAudio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/audio/SE_item&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div></div><h2 id="bgm-の場合" tabindex="-1">BGM の場合 <a class="header-anchor" href="#bgm-の場合" aria-label="Permalink to &quot;BGM の場合&quot;">​</a></h2><p>ここまでで効果音を追加することができました。 しかし効果音が一つだけなので、ゲームとしてはややシュールなものになってしまいました。 同じような改造で、他の効果音や BGM を加えることも難しくないので、よければチャレンジしてみてください。</p><p>ただし BGM は効果音と少しだけ違います。</p><h3 id="bgm-の登録" tabindex="-1">BGM の登録 <a class="header-anchor" href="#bgm-の登録" aria-label="Permalink to &quot;BGM の登録&quot;">​</a></h3><p>Akashic Engine での BGM と効果音の違いは、主にループ再生されるかどうかです。 BGM は効果音と同じ手順で扱えますが、game.json の登録内容が少し違います。</p><p>以下は BGM の音声アセット <code>audio/bgm.ogg</code>, <code>audio/bgm.aac</code> を置いた時の game.json の追記内容です。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;bgm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;audio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;audio/bgm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;global&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;systemId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;music&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>&quot;path&quot;</code> の値がファイル名に対応していることと、 <code>&quot;systemId&quot;</code> の値が効果音とは違うことに注意してください。 効果音は <code>&quot;systemId&quot;: &quot;sound&quot;,</code> でしたが、<strong>BGM の場合は <code>&quot;systemId&quot;: &quot;music&quot;,</code></strong> とする必要があります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>ここでは紹介していませんが、<code>akashic scan</code> コマンドで登録をした場合、音声は常に効果音として登録されます (<code>&quot;systemId&quot;</code> が <code>&quot;sound&quot;</code>) 。 BGM の場合は手動で <code>&quot;music&quot;</code> に変更してください。</li><li><code>&quot;systemId&quot;</code> の違いの他に、<code>&quot;duration&quot;</code> がなくなっていることに気づかれるかもしれません。 これは音声の長さをミリ秒で指定するものですが、音声ファイルの内容次第であることと、ここでは使っていないので省略しています。</li></ul></div><p>再生は効果音同様、アセットを取得して再生する関数を呼び出すだけです。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bgmAsset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAudio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/audio/bgm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.audio.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bgmAsset);</span></span></code></pre></div><h3 id="bgm-を再生する箇所" tabindex="-1">BGM を再生する箇所 <a class="header-anchor" href="#bgm-を再生する箇所" aria-label="Permalink to &quot;BGM を再生する箇所&quot;">​</a></h3><p>たとえばシューティングゲームの「ステージ開始時」に BGM 再生を始めるとします。 これまでの改造と異なり、これは自機とは関係ありません。 再生処理を書くべき場所は、 <code>Player.js</code> の中ではなさそうです。</p><p>改めてソースコードのファイル名を眺めてみましょう。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GalaxyWars/</span></span>
<span class="line"><span>├── script/</span></span>
<span class="line"><span>│   ├── AlphaEnemy.js</span></span>
<span class="line"><span>│   ├── Background.js</span></span>
<span class="line"><span>│   ├── BetaEnemy.js</span></span>
<span class="line"><span>│   ├── Bullet.js</span></span>
<span class="line"><span>│   ├── Enemy.js</span></span>
<span class="line"><span>│   ├── EnemyManager.js</span></span>
<span class="line"><span>│   ├── EntityType.js</span></span>
<span class="line"><span>│   ├── GameCore.js</span></span>
<span class="line"><span>│   ├── GameOverLogo.js</span></span>
<span class="line"><span>│   ├── GammaEnemy.js</span></span>
<span class="line"><span>│   ├── Global.js</span></span>
<span class="line"><span>│   ├── Item.js</span></span>
<span class="line"><span>│   ├── ItemGaugeTray.js</span></span>
<span class="line"><span>│   ├── ItemType.js</span></span>
<span class="line"><span>│   ├── Math.js</span></span>
<span class="line"><span>│   ├── Particle.js</span></span>
<span class="line"><span>│   ├── Player.js</span></span>
<span class="line"><span>│   ├── PlayerStatus.js</span></span>
<span class="line"><span>│   ├── ScreenEffector.js</span></span>
<span class="line"><span>│   ├── Shield.js</span></span>
<span class="line"><span>│   ├── bootScene.js</span></span>
<span class="line"><span>│   ├── emmitDamageEffect.js</span></span>
<span class="line"><span>│   ├── gameScene.js</span></span>
<span class="line"><span>│   ├── main.js</span></span>
<span class="line"><span>│   └── titleScene.js</span></span>
<span class="line"><span>└── (略)</span></span></code></pre></div><p>「ステージ開始」のようなゲーム進行に関係ありそうなものとしては、 <code>titleScene.js</code>, <code>gameScene.js</code> というファイルが目につきます。 &quot;title scene&quot; がタイトル画面のことだと予想すると、 &quot;game scene&quot; はメインゲームの画面に対応しているかもしれません。 また「シューティングゲームのコア部分」という意味で名付けられていそうな <code>GameCore.js</code> も気になります。</p><p>結果から言えば <code>gameScene.js</code>, <code>GameCore.js</code> どちらでも目的は果たせますが、わかりやすいのは <code>GameCore.js</code> の方でしょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GameCore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * ゲーム開始</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.background </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Background_1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.entities.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.background);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.itemGaugeTray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemGaugeTray_1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ItemGaugeTray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.entities.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.itemGaugeTray);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.player </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player_1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.entities.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.player);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.playerStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PlayerStatus_1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PlayerStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.entities.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.playerStatus);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.enemyManager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EnemyManager_1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnemyManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.entities.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.enemyManager);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ずばり「ゲーム開始」とコメントがついている <code>start()</code> が見つかります。 ここに BGM 再生のコードを追加すれば良さそうだと分かります。</p><h2 id="改造後のゲームコンテンツ" tabindex="-1">改造後のゲームコンテンツ <a class="header-anchor" href="#改造後のゲームコンテンツ" aria-label="Permalink to &quot;改造後のゲームコンテンツ&quot;">​</a></h2><p>ここまでの改造、最大 HP 増加・回復アイテム強化・効果音追加を行ったコンテンツが以下です。</p>`,79),h=s('<h2 id="次は" tabindex="-1">次は？ <a class="header-anchor" href="#次は" aria-label="Permalink to &quot;次は？&quot;">​</a></h2><p>サンプルゲーム Galaxy Wars の改造を通して、プログラミングの基本的な概念をいくつか紹介しました。 より本格的にニコ生ゲームを作成するための文書としては、以下も参照してみてください。</p><ul><li><a href="./../breakout/"><strong>ニコ生ゲームを作ろう » ブロック崩しを作ろう</strong></a><ul><li>改造ではなくゼロからニコ生ゲームを作るチュートリアルです。</li></ul></li><li>MDN の <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide" target="_blank" rel="noreferrer"><strong>JavaScript ガイド</strong></a> <small>(外部サイト)</small><ul><li>ここで扱いきれない JavaScript の各種文法が紹介されています。</li></ul></li></ul>',3),y=JSON.parse('{"title":"改造: 効果音を加えてみる","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"shin-ichiba/mod-galaxy-wars/play-audio.md","filePath":"shin-ichiba/mod-galaxy-wars/play-audio.md"}'),k={name:"shin-ichiba/mod-galaxy-wars/play-audio.md"},u=Object.assign(k,{setup(d){return(E,r)=>(n(),i("div",null,[e,a(t,{path:"mod-galaxy-wars/play-audio"}),h]))}});export{y as __pageData,u as default};
