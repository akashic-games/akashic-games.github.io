import{_ as n,C as l,o,c as p,H as e,Q as s}from"./chunks/framework.f1c0562b.js";const A=JSON.parse('{"title":"読み込んだアセットを取得する","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/asset/get-asset.md","filePath":"reverse-reference/v3/asset/get-asset.md"}'),t={name:"reverse-reference/v3/asset/get-asset.md"},c=s(`<h1 id="読み込んだアセットを取得する" tabindex="-1">読み込んだアセットを取得する <a class="header-anchor" href="#読み込んだアセットを取得する" aria-label="Permalink to &quot;読み込んだアセットを取得する&quot;">​</a></h1><p>読み込んだアセットを取得するには、<code>g.Scene#asset</code> の関数を利用します。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">player</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getImage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/assets/player/image.png&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// ファイルパス形式で取得</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bgm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getAudioById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bgm&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// アセット ID からの取得</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">thumbnails</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getAllImages</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/assets/**/*.png&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// ファイルパスのパターンから複数取得</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">player</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getImage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/assets/player/image.png&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// ファイルパス形式で取得</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bgm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getAudioById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bgm&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// アセット ID からの取得</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">thumbnails</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getAllImages</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/assets/**/*.png&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// ファイルパスのパターンから複数取得</span></span></code></pre></div><h2 id="利用例" tabindex="-1">利用例 <a class="header-anchor" href="#利用例" aria-label="Permalink to &quot;利用例&quot;">​</a></h2><p>次のコンテンツは、表示した画像をクリックすると効果音が再生されます。</p>`,6),r=s(`<h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><p>読み込み済みのアセットを種類別に取得する次のようなメソッドが利用できます。</p><ul><li>ファイルパス形式での取得 <ul><li>画像: <code>getImage()</code></li><li>音声: <code>getAudio()</code></li><li>テキスト: <code>getText()</code>, <code>getTextContent()</code>, <code>getJSONContent()</code></li></ul></li><li>ファイルパスのパターンから複数まとめて取得 <ul><li>画像: <code>getAllImages()</code></li><li>音声: <code>getAllAudios()</code></li><li>テキスト: <code>getAllTexts()</code></li></ul></li><li>アセット ID からの取得 <ul><li>画像: <code>getImageById()</code></li><li>音声: <code>getAudioById()</code></li><li>テキスト: <code>getTextById()</code>, <code>getTextContentById()</code>, <code>getJSONContentById()</code></li></ul></li></ul><p>ファイルパス形式で取得する場合、 <code>game.json</code> のあるディレクトリからの絶対パス表記を用いる必要があることに注意してください。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 画像アセットの取得</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">playerImage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getImage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/assets/player/image.png&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// オーディオアセットの取得</span></span>
<span class="line"><span style="color:#6A737D;">// (game.json での記述同様、オーディオアセットに限り、拡張子抜きで指定する必要があります)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bgm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getAudio</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/audio/bgm01&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 画像アセットの取得</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">playerImage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getImage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/assets/player/image.png&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// オーディオアセットの取得</span></span>
<span class="line"><span style="color:#6A737D;">// (game.json での記述同様、オーディオアセットに限り、拡張子抜きで指定する必要があります)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bgm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getAudio</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/audio/bgm01&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p><code>getAllImages()</code> などの glob による複数検索では、該当するアセットの配列を返します。 アセットの指定には <code>assetPaths</code> と同様に glob のサブセット文法(<code>**</code>, <code>*</code>, <code>?</code>) を利用できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 複数の画像アセットの取得</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">thumbnails</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getAllImages</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/assets/**/*.png&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> thumbnails.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">thumbnail</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">    src: thumbnails[i],</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: thumbnails[i].width,</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: thumbnails[i].height</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 複数のオーディオアセットの取得</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">audios</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getAllAudios</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/audio/bgm*&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> audios.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    audios[i].</span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 複数の画像アセットの取得</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">thumbnails</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getAllImages</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/assets/**/*.png&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> thumbnails.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">thumbnail</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">    src: thumbnails[i],</span></span>
<span class="line"><span style="color:#24292E;">    width: thumbnails[i].width,</span></span>
<span class="line"><span style="color:#24292E;">    height: thumbnails[i].height</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 複数のオーディオアセットの取得</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">audios</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getAllAudios</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/audio/bgm*&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> audios.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    audios[i].</span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>テキストアセットは、ほとんどの場合アセットそのものではなく、その内容のテキストデータを利用するでしょう。 <code>getTextContent()</code> を利用すると、アセットから直接テキストデータを取得できます。 またテキストアセットが .json ファイルの場合は、 <code>getJSONContent()</code> で内容を直接 JSON として取得できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getJSONContent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/assets/stages.json&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getJSONContent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/assets/stages.json&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p><code>getImageById()</code> や <code>getAudioById()</code> など、<code>〜ById</code> のつく関数は、アセット ID からアセットを取得します。 アセット ID とは <code>game.json</code> の <code>assets</code> プロパティに定義されている各オブジェクトのキーを指します。 詳しくは<a href="/reference/manifest/game-json.html">game.json の仕様を参照してください。</a></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// g.Scene#assets でのアセットの取得</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">imageWidth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (scene.assets[</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">g</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ImageAsset</span><span style="color:#E1E4E8;">).width;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// getImageById()での取得</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">imageWidth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getImageById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">).width;</span></span>
<span class="line"><span style="color:#6A737D;">// (返り値の型が ImageAsset になっているので、キャストなしで \`width\` にアクセスできます)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// g.Scene#assets でのアセットの取得</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">imageWidth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (scene.assets[</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">g</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ImageAsset</span><span style="color:#24292E;">).width;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// getImageById()での取得</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">imageWidth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getImageById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">).width;</span></span>
<span class="line"><span style="color:#6A737D;">// (返り値の型が ImageAsset になっているので、キャストなしで \`width\` にアクセスできます)</span></span></code></pre></div><h3 id="グローバルアセットの取得" tabindex="-1">グローバルアセットの取得 <a class="header-anchor" href="#グローバルアセットの取得" aria-label="Permalink to &quot;グローバルアセットの取得&quot;">​</a></h3><p>グローバルアセットも同様の方法で取得することができます。どのシーンでも取得できることを除いて、取得方法に特別な違いはまりません。</p><h3 id="scene-assets-からの取得" tabindex="-1">Scene#assets からの取得 <a class="header-anchor" href="#scene-assets-からの取得" aria-label="Permalink to &quot;Scene#assets からの取得&quot;">​</a></h3><p><code>g.Scene#assets</code> でもアセット ID からアセットを取得することができます。Akashic Engine v2 以前ではアセットを参照する唯一の方法でした。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.assets[</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.assets[</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">];</span></span></code></pre></div><p><code>g.Scene#assets</code> による取得では、TypeScript の場合は <code>as g.ImageAsset</code> などのダウンキャストが必要になります。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bgm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.assets[</span><span style="color:#9ECBFF;">&quot;bgm&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AudioAsset</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bgm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.assets[</span><span style="color:#032F62;">&quot;bgm&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AudioAsset</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="関連情報" tabindex="-1">関連情報 <a class="header-anchor" href="#関連情報" aria-label="Permalink to &quot;関連情報&quot;">​</a></h2><ul><li><a href="/akashic-engine/v3/classes/Scene.html#asset">API リファレンス</a></li></ul>`,20);function y(E,i,d,g,u,h){const a=l("PlaygroundElement");return o(),p("div",null,[c,e(a,{gameJsonUri:"/snippets/reverse-reference/asset/get-asset/game.json",width:600,height:400}),r])}const m=n(t,[["render",y]]);export{A as __pageData,m as default};
