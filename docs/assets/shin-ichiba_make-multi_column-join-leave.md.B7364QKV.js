import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.DaCD_bki.js";const t="/assets/03-01.C0F1n1ky.png",l="/assets/03-02.CDHISCYM.png",e="/assets/03-03.Bz5A2vLZ.png",p="/assets/03-04.BBsD4DTe.png",v=JSON.parse('{"title":"Join と Leave とニコ生の話","description":"","frontmatter":{},"headers":[],"relativePath":"shin-ichiba/make-multi/column-join-leave.md","filePath":"shin-ichiba/make-multi/column-join-leave.md"}'),h={name:"shin-ichiba/make-multi/column-join-leave.md"},k=n('<h1 id="join-と-leave-とニコ生の話" tabindex="-1">Join と Leave とニコ生の話 <a class="header-anchor" href="#join-と-leave-とニコ生の話" aria-label="Permalink to &quot;Join と Leave とニコ生の話&quot;">​</a></h1><h2 id="join-と-leave-の話" tabindex="-1">Join と Leave の話 <a class="header-anchor" href="#join-と-leave-の話" aria-label="Permalink to &quot;Join と Leave の話&quot;">​</a></h2><h3 id="join-と-leave" tabindex="-1">Join と Leave <a class="header-anchor" href="#join-と-leave" aria-label="Permalink to &quot;Join と Leave&quot;">​</a></h3><p>Akashic の世界では、プレイヤーはゲームに Join（参加）している状態と Leave（離脱）している状態の二つが存在します。 これは定義上存在しているだけで、基本的に <strong>どのように扱うかはゲーム開発者に委ねられています。</strong> 例えば前回で作った早押しゲームは Join、Leave に関係なく全てのプレイヤーがボタンに触ることができました。</p><p>Leave（離脱）しているのにボタンが押せたり画面が見えたりするのはおかしいと思うかもしれません。 世界観としてはボードゲームやババ抜きなどのカードゲームを想像してください。実際の参加者とは別に、 <strong>ゲームを観戦したりアドバイスしたりする人間は存在しうる</strong> はずです。 つまり実際に着席してゲームに参加している人と、場合によっては干渉してくる、ゲームを傍から見ている人を表す概念と理解できます。</p><p>たとえば前回の早押しゲームに、ボタンが押せなかった人はライフが減り 0 になったら参加できなくなる、というようなルールを追加しようとしたとき</p><ul><li>全てのプレイヤーは開始時に Join する</li><li>ライフが 0 になったプレイヤーは Leave する</li><li>Join していないユーザーがボタンを押しても何も起きない</li></ul><p>というような作り方ができれば実現できます。しかし別にフラグを設ける、ボタンを押したプレイヤーのライフを見て 0 なら何もしない、などの解決方法もあります。 Join と Leave の利用は <strong>マルチプレイゲームにおいて必須ではなく、</strong> 組み込みのフラグの一種という解釈をするといいかもしれません。</p><p>ここで前回のおさらいを少しします。 あるプレイヤーがゲームに Join するとイベントが発生します。このイベントはグローバル処理でしょうか、ローカル処理でしょうか。</p><p>正解はグローバル処理です。特定のプレイヤーがゲームに Join した、というイベントは全員に通知されます。</p><h3 id="join-の補足" tabindex="-1">Join の補足 <a class="header-anchor" href="#join-の補足" aria-label="Permalink to &quot;Join の補足&quot;">​</a></h3><p>重要なことですが、どのような条件で Join するかは <strong>サービス提供者に委ねられます。</strong> ゲームの開発者ではないことに注意です。 このことはあまり直感的ではないかもしれませんが仕組みとしてそのようになっています。 みなさんがローカルでマルチプレイのテストをするとき、サービス提供者とは akashic serve コマンドです。</p><p>akashic serve でアクセスできるブラウザではアクセス直後はジョインしておらず、手で join me を押す必要があります (デフォルトの場合)。 従って前述した「全てのプレイヤーは開始時に Join する」というようなことは実現できず、それ前提で組んだプログラムはテストできません。</p><p>これから解説しますが <strong>ニコ生に持っていっても動きません。</strong></p><h2 id="ニコ生ゲームの話" tabindex="-1">ニコ生ゲームの話 <a class="header-anchor" href="#ニコ生ゲームの話" aria-label="Permalink to &quot;ニコ生ゲームの話&quot;">​</a></h2><h3 id="ニコ生における-join" tabindex="-1">ニコ生における Join <a class="header-anchor" href="#ニコ生における-join" aria-label="Permalink to &quot;ニコ生における Join&quot;">​</a></h3><p>さて、 <strong>マルチプレイゲームを公開する現状唯一の手段</strong> は「ニコ生ゲーム」として公開することです。すなわちニコニコ生放送を使う事です。 自分でサーバーを用意し、akashic serve の仕組みを十分に理解し場合によっては手を加えるなどすれば可能かもしれませんが、大多数の方にとってはニコ生ゲームが現状唯一の手段でしょう。</p><p><a href="./../../tutorial/v3/multiplay/join.html">Akashic Engine 入門 » Join と Leave</a> にもありますが、ニコ生ゲームにおいては Join が発生するのは一度だけ。生主のみがゲームに Join し Leave することはありません。 （厳密に言えばゲームを起動した人、なのですが詳細は割愛します）</p><p>つまり世界観としては、Join した生主とそこに干渉する視聴者、という構図が出来上がります。絵を描きました。</p><p><img src="'+t+'" alt="絵"></p><p>この図はあくまでニコ生上での Join 状態を表した図です。このような構図を意識した視聴者全員 vs 生主ゲームを作ってもいいですし、まったく無視して全員参加のバトロワを作っても構いません。結局のところ使い方次第です。</p><h3 id="生主の区別と役割" tabindex="-1">生主の区別と役割 <a class="header-anchor" href="#生主の区別と役割" aria-label="Permalink to &quot;生主の区別と役割&quot;">​</a></h3><p>ニコニコ生放送において <strong>生主には以下の特権が与えられています。</strong></p><ul><li>カウンターからゲームを選んで起動できる</li><li>カウンターからゲームを強制終了できる</li></ul><p>兎にも角にも生主にゲームを起動してもらわないことには始まりません。自分のゲームが起動してもらえるようにアピールするか、自分で生主になるしかありません。 全く脈絡はありませんが nicocas アプリはスマホがあれば誰でも配信できるので一度試してみると良いでしょう。 <a href="http://site.nicovideo.jp/nicocas/app/" target="_blank" rel="noreferrer">http://site.nicovideo.jp/nicocas/app/</a></p><p>さて、前述した生主の特権と、生主はゲーム上に一人しか存在しない、という特性を考慮すると、 <strong>生主にゲームマスター的な役割を与えるのは自然な発想</strong> です。 以下に例を出してみましょう</p><ul><li>タイトル画面でスタートボタンをおす</li><li>参加者募集を終了し実際のゲーム画面に遷移する</li><li>圧倒的なパワーで視聴者を薙ぎ払う</li><li>参加者同士の対戦における審判の役割を負う</li></ul><p>現在公式に提供されているマルチプレイゲームでは、生主は実際に以下のような役割を担っていることがあります。</p><ul><li>だるま役となって片っ端から参加者をアウトにしていく</li><li>画面を動き回る参加者に向かって爆弾を落とす</li><li>投稿されたイラストを審査していくつか選んで発表する</li></ul><p>などなど。 生主に起動してもらうことを考えると生主には何かしらの特権があった方がいいかもしれません。しかし生主が強すぎるとそもそも人が集まらないためバランスは重要です。</p><h3 id="生主を区別する" tabindex="-1">生主を区別する <a class="header-anchor" href="#生主を区別する" aria-label="Permalink to &quot;生主を区別する&quot;">​</a></h3><p>生主にゲームマスター的な役割を持たせるサンプルコードを作ってみましょう。 ニコ生上でよくあるマルチプレイゲームを踏襲したものを作りました。 <img src="'+l+'" alt="master"><img src="'+e+'" alt="viewer"></p><p>見た目はやや残念ですが、放送者が募集役、それ以外の人が参加する、という <strong>最近のニコ生でありがちなシーン</strong> を再現しました。 前回の早押しゲームとは異なり、今回は放送者と視聴者で画面の状態がかなり異なるので、ローカル処理、ローカルなオブジェクト、を意識していくことが重要になります。</p><p>また今回より、ソースコードが長くなってきてしまったため全文掲載を見送ることにしました。サンプルコード全体は以下で公開されています。</p><p><a href="https://github.com/akashic-contents/with-game-master" target="_blank" rel="noreferrer">https://github.com/akashic-contents/with-game-master</a></p><h3 id="ゲームの流れ" tabindex="-1">ゲームの流れ <a class="header-anchor" href="#ゲームの流れ" aria-label="Permalink to &quot;ゲームの流れ&quot;">​</a></h3><ol><li>放送者の Join（一番最初の join）を待つ</li><li>ゲームが参加者募集状態になる。放送者は参加者を締め切ることができ、視聴者は参加することができる</li><li>放送者が募集を締め切るとゲームが開始される</li><li>数秒経つとゲームが終了し 2.に戻る</li></ol><p>ゲームの状態というのはマルチプレイに関係なく大事な考え方です。自分のゲームが今何をする状態なのか、例えばタイトル画面なのか、メニュー画面なのか、といったことを意識することが必要です。 今回のゲームは前回の早押しゲームとは異なり、先述した通り放送者待ち、募集中、プレイ中、などいくつかの状態を持ちます。いずれもニコ生においてはよくある流れです。 状態管理に複数のシーンを行き来する手法や main 関数を切り替える手法もありますが、今回は状態管理用の変数を使ってみたいと思います。</p><p>以下で個別に解説していきますが、コード全文を読む際にはゲームの状態変化の流れを追うとわかりやすいかもしれません。</p><h3 id="放送者の-join-と初期化処理" tabindex="-1">放送者の Join と初期化処理 <a class="header-anchor" href="#放送者の-join-と初期化処理" aria-label="Permalink to &quot;放送者の Join と初期化処理&quot;">​</a></h3><p>ゲームに誰かが join するとイベントが発生します。その時の処理を追加するコードが以下です。最初に一人だけ join する想定のため、addOnce を使うことで一回だけ処理が行われるようにしました。 ニコ生のみを想定するなら関係ありませんが、以後誰が join してもこの処理は行われません。最初の一度だけです。</p><p>ローカル環境で単純に akashic serve した場合、<strong>join は自動では行われません。</strong> 放送者相当の画面で、画面上部にある Join Me ボタンを押せばその画面のプレイヤーが join します。つまり今回のサンプルにおいて放送者と扱われます。</p><img src="'+p+`"><div class="tip custom-block"><p class="custom-block-title">追記</p><p>現在の <code>akashic serve</code> には、ニコニコ生放送と同じ感覚で使えるよう「自動的に最初の一人だけ join する」モードが追加されています。 <code>--target-service nicolive</code> をつけて起動してください。詳細は <a href="./../multi/#debug">ニコ生ゲームを作ろう » マルチプレイゲーム</a> を参照してください。</p></div><p>そしてこの処理の中で、Join した人の ID をゲームマスターの ID として覚え、以後使うようにします。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一番最初にJoinした人を覚える変数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gameMasterId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.join.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addOnce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  gameMasterId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.player.id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>あとはゲームのメインループ内でこの値の変化をチェックし、null じゃなくなったときに募集を開始すればいいわけです。gameStatus、つまりゲームの状態を初期化(initializing)に進めます。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 毎フレーム呼び出される処理。ゲームステータスで分岐する</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mainLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (gameStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;gameMasterWaiting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (gameMasterId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      onGameMasterArrive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      gameStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;initializing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // -- 略 --</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>onGameMasterArrive()の中は大まかに以下のようになっていて、自分がゲームマスターなのかどうかによって参加締め切りボタンか参加ボタンのいずれかを出しています。 またこの時に画面のテキストも変えています。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onGameMasterArrive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 自分のIDがゲームマスターIDかどうかで分岐。ここはローカル処理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (g.game.selfId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gameMasterId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(closeButton);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    infoLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;あなたが一番最初にjoinしました。あなたが放送者です。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">参加者の受付を終了することができます&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    infoLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entryButton);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    infoLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;あなたは視聴者です。ゲームに参加することができます。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    infoLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ゲームが募集状態の時、 <strong>ゲームマスター（放送者）と視聴者の役割は大きく異なります。</strong> ゲームマスターは参加募集を打ち切る権限を持ち、視聴者はゲームに参加するか否かの選択が行えます。次の節で、各々の操作、つまりローカルイベントによってゲーム全体へ影響を与える raiseEvent についてみてみましょう。</p><h3 id="参加待ちと-raiseevent-の話" tabindex="-1">参加待ちと raiseEvent の話 <a class="header-anchor" href="#参加待ちと-raiseevent-の話" aria-label="Permalink to &quot;参加待ちと raiseEvent の話&quot;">​</a></h3><p>上の方に貼った画像のように、ゲームマスターと視聴者それぞれが操作できるボタンを考えます。 ゲームマスターと視聴者のボタンはそれぞれ役割が違うので、ローカルエンティティにしておく必要があります。それぞれのボタンの役割は</p><ul><li>参加締め切りボタン：gameStatus を playStarting に変更する</li><li>参加ボタン：参加者テーブル（players）に自分の id を追加する</li></ul><p>となります。例えば、マスター側のボタン、参加締め切りボタンが押された時の処理を抜き出してみます。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">closeButton.pointDown.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(closeButton);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // このボタンの処理は放送者でしか発生しないので、ゲーム全体の進行のため全体に通知する</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">raiseEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MessageEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;EntryClosed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>処理の中で gameStatus を代入する代わりに、 <strong>raiseEvent</strong> を使っています。重要です。 なぜなら <strong>このイベントはマスターの PC 上でしか発生しない</strong> ため、視聴者全員の PC にある gameStatus が変わらないのです。 逆にマスター以外の PC ではシーンに closeButton がないため、ここでローカル処理として closeButton を消しています。</p><p>さて、raiseEvent については<a href="./../../tutorial/v3/multiplay/each-player.html#raise-event">Akashic Engine 入門 » プレイヤーごとに異なる描画を行う</a>にも説明がありますが少しみてみましょう。 ローカル処理のなかで全体へ影響を及ぼしたくなった場合は、raiseEvent で全員にイベントを送信するのが Akashic の流儀です。以下に受信側のコードを貼っていきます。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// raiseEventを処理するところ。raiseEvent時につけたmessage名で処理を分岐する</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scene.message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ev.data.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;EntryClosed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 募集締め切り</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gameStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;playStarting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 参加者が参加ボタンを押さなかった場合参加ボタンが残っているので消しとく</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entryButton);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ev.data.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Entry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> playerId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ev.player.id;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (players.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(playerId) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      players.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(playerId);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エントリーしたのが自分だった時。これはローカル処理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (playerId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.selfId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      infoLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;あなたは参加しました。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">放送者の受付終了を待っています&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      infoLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>raiseEvent によって <strong>全員にイベントが送信される</strong> ため、この処理は全員の PC で実行されます。なので募集締め切りのメッセージを受けた時に gameStatus を playStarting に進めます。 <strong>操作を共有し状態を変更するのは常に自分</strong> というのが Akashic の原則です。 全体で共有する情報を変更する際には　「こういう操作を行ったのでみなさんあとはわかっていますね？」　というメッセージだけを送り、受信した全員が自分で状態を変更するのがマルチプレイ作成時のルールです。全体で共有する情報、つまりグローバルを書き換える時は必ずこの段取りを踏みます。</p><p>さて、メッセージの受信処理の中で Entry という処理があることからもわかるように、視聴者側に表示される参加ボタンも同じように raiseEvent しています。その中で参加者テーブルへ書き込みを行います。 これを全員が自力でやるので、全員の PC 上の参加者テーブルが一致するのです。</p><p>RaiseEvent によるメッセージの送信はマルチプレイゲームを作る上でのもっとも重要な概念になります。 送るべきでない情報があったり、送るべきでないタイミングがあったり、ちょっと難しい部分もあります。今後解説するタイミングがあるかもしれません。</p><h3 id="ゲーム開始" tabindex="-1">ゲーム開始 <a class="header-anchor" href="#ゲーム開始" aria-label="Permalink to &quot;ゲーム開始&quot;">​</a></h3><p>ゲームマスターが募集を締め切ったらゲーム開始です。ゲーム画面では参加者一覧が表示されます。それだけです。 <strong>実際のゲームの中身はありません。</strong> ありませんが、基本的な流れはこれで全て整いました。ここから実際に動くゲームを考えていけばいいだけです。</p><p>しかしかなり長くなってきてしまったため、今回はこのぐらいにしておきましょう。次回以降、少しずつゲームを作っていければと思います。</p><h2 id="次は" tabindex="-1">次は <a class="header-anchor" href="#次は" aria-label="Permalink to &quot;次は&quot;">​</a></h2><p>Join と Leave の話に絡めて、ニコ生上でゲームを作る際のサンプルについて解説しました。 次回は、少しずつゲームの肉付けをしていきながら、気になった点を解説していければと思います。</p>`,67),r=[k];function E(o,d,g,c,y,u){return a(),i("div",null,r)}const m=s(h,[["render",E]]);export{v as __pageData,m as default};
