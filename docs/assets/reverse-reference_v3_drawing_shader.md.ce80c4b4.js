import{_ as c,C as a,o as r,c as t,k as s,H as n,w as E,a as l,Q as p}from"./chunks/framework.f1c0562b.js";const D=JSON.parse('{"title":"シェーダを利用する","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/drawing/shader.md","filePath":"reverse-reference/v3/drawing/shader.md"}'),y={name:"reverse-reference/v3/drawing/shader.md"},i=s("h1",{id:"シェーダを利用する",tabindex:"-1"},[l("シェーダを利用する "),s("a",{class:"header-anchor",href:"#シェーダを利用する","aria-label":'Permalink to "シェーダを利用する"'},"​")],-1),d=p(`<p>Akashic Engine v3 は、限定的にフラグメントシェーダをサポートしています。 シェーダを使うには、<code>g.ShaderProgram</code> を利用します。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fragmentShader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.assets[</span><span style="color:#9ECBFF;">&quot;shader&quot;</span><span style="color:#E1E4E8;">].data; </span><span style="color:#6A737D;">// テキストアセットからフラグメントシェーダを取得</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> shader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">ShaderProgram</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  fragmentShader: fragmentShader</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sprite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// その他のプロパティ</span></span>
<span class="line"><span style="color:#E1E4E8;">  shaderProgram: shader </span><span style="color:#6A737D;">// シェーダの指定</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> fragmentShader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.assets[</span><span style="color:#032F62;">&quot;shader&quot;</span><span style="color:#24292E;">].data; </span><span style="color:#6A737D;">// テキストアセットからフラグメントシェーダを取得</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> shader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">ShaderProgram</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  fragmentShader: fragmentShader</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sprite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// その他のプロパティ</span></span>
<span class="line"><span style="color:#24292E;">  shaderProgram: shader </span><span style="color:#6A737D;">// シェーダの指定</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">sprite.shaderProgram </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shader; </span><span style="color:#6A737D;">// 既存の sprite にシェーダを指定</span></span>
<span class="line"><span style="color:#E1E4E8;">sprite.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// modified() で表示に反映</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sprite.shaderProgram </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shader; </span><span style="color:#6A737D;">// 既存の sprite にシェーダを指定</span></span>
<span class="line"><span style="color:#24292E;">sprite.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// modified() で表示に反映</span></span></code></pre></div><h2 id="利用例" tabindex="-1">利用例 <a class="header-anchor" href="#利用例" aria-label="Permalink to &quot;利用例&quot;">​</a></h2><p>次のコンテンツは、画像をモノクロ化して表示します。</p>`,6),u=p(`<h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>以下、 WebGL のシェーダについての知識が必要です。</p></div><p>Akashic Engine は現在、フラグメントシェーダを限定的に利用することができます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>バーテックスシェーダは非サポートで、attribute も固定です。uniform は利用できます。 したがって現状の用途は、画像に対する単純なフィルタなどに限られます。</p></div><p>シェーダを利用するには、まず <code>game.json</code> の <code>renderers</code> に <code>webgl</code> を追加します。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;renderers&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;webgl&quot;</span><span style="color:#E1E4E8;">],</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;renderers&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;webgl&quot;</span><span style="color:#24292E;">],</span></span></code></pre></div><p>シェーダは <code>g.ShaderProgram</code> で表されます。<code>g.ShaderProgram</code> は <code>g.E</code> やそれを継承したクラス (<code>g.Sprite</code> , <code>g.Pane</code> など) に適用できます。</p><p>シェーダプログラムは親エンティティの値を継承します。そのため、シェーダプログラムを適用したエンティティに複数の子エンティティに追加することで、複数のエンティティに同一のシェーダプログラムを適用することができます。</p><p>下記のコードでは、テキストアセット <code>monochrome.glsl</code> を読み込み <code>Pane</code> に指定しています。<code>Pane</code> の子エンティティである <code>Sprite</code> と <code>FilledRect</code> にもシェーダが適応されます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#version </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">precision mediump float;</span></span>
<span class="line"><span style="color:#E1E4E8;">varying vec2 vTexCoord;</span></span>
<span class="line"><span style="color:#E1E4E8;">uniform sampler2D uSampler;</span></span>
<span class="line"><span style="color:#E1E4E8;">uniform float uAlpha;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 対象ピクセルの色情報を取得</span></span>
<span class="line"><span style="color:#E1E4E8;">  vec4 color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">texture2D</span><span style="color:#E1E4E8;">(uSampler, vTexCoord);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 対象ピクセルのRGB値を加算</span></span>
<span class="line"><span style="color:#E1E4E8;">  float sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dot</span><span style="color:#E1E4E8;">(color.rgb, </span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// モノクロ化</span></span>
<span class="line"><span style="color:#E1E4E8;">  vec3 outColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(sum </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 最終出力色</span></span>
<span class="line"><span style="color:#E1E4E8;">  gl_FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(outColor, color.a </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> uAlpha);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#version </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">precision mediump float;</span></span>
<span class="line"><span style="color:#24292E;">varying vec2 vTexCoord;</span></span>
<span class="line"><span style="color:#24292E;">uniform sampler2D uSampler;</span></span>
<span class="line"><span style="color:#24292E;">uniform float uAlpha;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 対象ピクセルの色情報を取得</span></span>
<span class="line"><span style="color:#24292E;">  vec4 color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">texture2D</span><span style="color:#24292E;">(uSampler, vTexCoord);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 対象ピクセルのRGB値を加算</span></span>
<span class="line"><span style="color:#24292E;">  float sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dot</span><span style="color:#24292E;">(color.rgb, </span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// モノクロ化</span></span>
<span class="line"><span style="color:#24292E;">  vec3 outColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(sum </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 最終出力色</span></span>
<span class="line"><span style="color:#24292E;">  gl_FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(outColor, color.a </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> uAlpha);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> scene </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({ game: g.game, assetIds: [</span><span style="color:#9ECBFF;">&quot;player&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;monochrome&quot;</span><span style="color:#E1E4E8;">] });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  scene.onLoad.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fragmentShader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.assets[</span><span style="color:#9ECBFF;">&quot;monochrome&quot;</span><span style="color:#E1E4E8;">].data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> shader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">ShaderProgram</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      fragmentShader: fragmentShader</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> pane </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Pane</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">      width: </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      height: </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      shaderProgram: shader</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sprite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">      src: scene.assets[</span><span style="color:#9ECBFF;">&quot;player&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      x: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      y: </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">      width: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      height: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      x: </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      cssColor: </span><span style="color:#9ECBFF;">&quot;red&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    pane.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(sprite);</span></span>
<span class="line"><span style="color:#E1E4E8;">    pane.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(rect);</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(pane);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  g.game.</span><span style="color:#B392F0;">pushScene</span><span style="color:#E1E4E8;">(scene);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> main;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> scene </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({ game: g.game, assetIds: [</span><span style="color:#032F62;">&quot;player&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;monochrome&quot;</span><span style="color:#24292E;">] });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  scene.onLoad.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> fragmentShader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.assets[</span><span style="color:#032F62;">&quot;monochrome&quot;</span><span style="color:#24292E;">].data;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> shader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">ShaderProgram</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      fragmentShader: fragmentShader</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> pane </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Pane</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">      width: </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      height: </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      shaderProgram: shader</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sprite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">      src: scene.assets[</span><span style="color:#032F62;">&quot;player&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      x: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      y: </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">      width: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      height: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      x: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      cssColor: </span><span style="color:#032F62;">&quot;red&quot;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    pane.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(sprite);</span></span>
<span class="line"><span style="color:#24292E;">    pane.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(rect);</span></span>
<span class="line"><span style="color:#24292E;">    scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(pane);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  g.game.</span><span style="color:#6F42C1;">pushScene</span><span style="color:#24292E;">(scene);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> main;</span></span></code></pre></div><p>.glsl 内で利用している <code>uAlpha</code>, <code>uSampler</code>, <code>vTexCoord</code> は固定で与えられます。 それぞれ opacity を反映した透明度、元の描画内容 (画像や <code>FilledRect</code> の単色) をテクスチャとして参照するサンプラー、そしてテクスチャ座標です。</p><p>設定したシェーダを戻したい場合、 <code>undefined</code> または <code>null</code> を指定します。 <code>undefined</code> と <code>null</code> は以下のように挙動が異なることにご留意ください。</p><ul><li><code>undefined</code>: 親エンティティのシェーダプログラムを利用する。(デフォルト)</li><li><code>null</code>: 親エンティティのシェーダプログラムを利用せず、常に初期のシェーダプログラム( <code>undefined</code> )を利用する。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">sprite.shaderProgram </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">sprite.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sprite.shaderProgram </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">sprite.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="変数" tabindex="-1">変数 <a class="header-anchor" href="#変数" aria-label="Permalink to &quot;変数 {#変数}&quot;">​</a></h3><p><code>akashic-engine@2.3.2</code> 移行では、以下の変数がエンジン側から暗黙的に与えられます。</p><ul><li><code>varying</code><ul><li><code>vec2 vTexCoord</code><ul><li>対象の描画元のテクスチャ座標</li><li>本値は 0 ～ 1.0 の範囲内で任意の矩形領域となり得ることに注意。</li></ul></li></ul></li><li><code>uniform</code><ul><li><code>sampler2D uSampler</code><ul><li>対象の描画元のテクスチャ番号</li></ul></li><li><code>float uAlpha</code><ul><li>透過度 (0 ～ 1.0 の範囲内)</li></ul></li></ul></li></ul><h3 id="ユーザ定義変数" tabindex="-1">ユーザ定義変数 <a class="header-anchor" href="#ユーザ定義変数" aria-label="Permalink to &quot;ユーザ定義変数 {#ユーザ定義変数}&quot;">​</a></h3><p>ユーザが独自に定義した変数をフラグメントシェーダに与えることができます。</p><p>先程のサンプルにおいて、各色の重み付けをコンテンツから指定した例が以下になります。</p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#version </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">precision mediump </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">varying</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">vec2</span><span style="color:#E1E4E8;"> vTexCoord;</span></span>
<span class="line"><span style="color:#F97583;">uniform</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sampler2D</span><span style="color:#E1E4E8;"> uSampler;</span></span>
<span class="line"><span style="color:#F97583;">uniform</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> uAlpha;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">uniform</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> redScale;</span></span>
<span class="line"><span style="color:#F97583;">uniform</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> greenScale;</span></span>
<span class="line"><span style="color:#F97583;">uniform</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> blueScale;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">vec3</span><span style="color:#E1E4E8;"> monoScale </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">vec3</span><span style="color:#E1E4E8;">(redScale, greenScale, blueScale);</span></span>
<span class="line"><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> monoScaleSum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dot</span><span style="color:#E1E4E8;">(monoScale, </span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 対象ピクセルの色情報を取得</span></span>
<span class="line"><span style="color:#E1E4E8;">  vec4 color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">texture2D</span><span style="color:#E1E4E8;">(uSampler, vTexCoord);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 対象ピクセルのRGB値を加算</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dot</span><span style="color:#E1E4E8;">(color.rgb, monoScale);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// モノクロ化</span></span>
<span class="line"><span style="color:#E1E4E8;">  vec3 outColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec3</span><span style="color:#E1E4E8;">(sum </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> monoScaleSum);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 最終出力色</span></span>
<span class="line"><span style="color:#E1E4E8;">  gl_FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(outColor, color.a </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> uAlpha);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#version </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">precision mediump </span><span style="color:#D73A49;">float</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">varying</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">vec2</span><span style="color:#24292E;"> vTexCoord;</span></span>
<span class="line"><span style="color:#D73A49;">uniform</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sampler2D</span><span style="color:#24292E;"> uSampler;</span></span>
<span class="line"><span style="color:#D73A49;">uniform</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> uAlpha;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">uniform</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> redScale;</span></span>
<span class="line"><span style="color:#D73A49;">uniform</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> greenScale;</span></span>
<span class="line"><span style="color:#D73A49;">uniform</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> blueScale;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">vec3</span><span style="color:#24292E;"> monoScale </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">vec3</span><span style="color:#24292E;">(redScale, greenScale, blueScale);</span></span>
<span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> monoScaleSum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dot</span><span style="color:#24292E;">(monoScale, </span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 対象ピクセルの色情報を取得</span></span>
<span class="line"><span style="color:#24292E;">  vec4 color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">texture2D</span><span style="color:#24292E;">(uSampler, vTexCoord);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 対象ピクセルのRGB値を加算</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dot</span><span style="color:#24292E;">(color.rgb, monoScale);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// モノクロ化</span></span>
<span class="line"><span style="color:#24292E;">  vec3 outColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec3</span><span style="color:#24292E;">(sum </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> monoScaleSum);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 最終出力色</span></span>
<span class="line"><span style="color:#24292E;">  gl_FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(outColor, color.a </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> uAlpha);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>redScale</code> , <code>greenScale</code> , <code>blueScale</code> が uniform 値として渡されるようにフラグメントシェーダを修正しています。</p><p><code>g.ShaderProgram</code> の生成時に利用する uniform を定義します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">shader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">ShaderProgram</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  fragmentShader: fragmentShader,</span></span>
<span class="line"><span style="color:#E1E4E8;">  uniforms: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    redScale: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      type: </span><span style="color:#9ECBFF;">&quot;float&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      value: </span><span style="color:#79B8FF;">0.299</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    greenScale: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      type: </span><span style="color:#9ECBFF;">&quot;float&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      value: </span><span style="color:#79B8FF;">0.587</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    blueScale: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      type: </span><span style="color:#9ECBFF;">&quot;float&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      value: </span><span style="color:#79B8FF;">0.114</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">shader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">ShaderProgram</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  fragmentShader: fragmentShader,</span></span>
<span class="line"><span style="color:#24292E;">  uniforms: {</span></span>
<span class="line"><span style="color:#24292E;">    redScale: {</span></span>
<span class="line"><span style="color:#24292E;">      type: </span><span style="color:#032F62;">&quot;float&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      value: </span><span style="color:#005CC5;">0.299</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    greenScale: {</span></span>
<span class="line"><span style="color:#24292E;">      type: </span><span style="color:#032F62;">&quot;float&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      value: </span><span style="color:#005CC5;">0.587</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    blueScale: {</span></span>
<span class="line"><span style="color:#24292E;">      type: </span><span style="color:#032F62;">&quot;float&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      value: </span><span style="color:#005CC5;">0.114</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>uniform</code> は、フラグメントシェーダで利用する際の変数名をキーとしたオブジェクトによって定義されます。各キーは <code>g.ShaderUniform</code> によって定義された形式で記述する必要があります。 <code>type</code> は対象の uniform の型、<code>value</code>はその値を示します。</p><p><code>type</code> には以下が指定できます。</p><ul><li><code>float</code></li><li><code>int</code></li><li><code>vec2</code></li><li><code>vec3</code></li><li><code>vec4</code></li><li><code>ivec2</code></li><li><code>ivec3</code></li><li><code>ivec4</code></li><li><code>mat2</code></li><li><code>mat3</code></li><li><code>mat4</code></li></ul><p>また、以下のように Array を利用することもできます。</p><p><strong>フラグメントシェーダ</strong></p><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">uniform</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">param</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">uniform</span><span style="color:#24292E;"> </span><span style="color:#E36209;">param</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span></code></pre></div><p><strong>コンテンツ</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">shader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">ShaderProgram</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  fragmentShader: fragmentShader,</span></span>
<span class="line"><span style="color:#E1E4E8;">  uniforms: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    param: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      type: </span><span style="color:#9ECBFF;">&quot;float&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      value: [</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.4</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">shader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">ShaderProgram</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  fragmentShader: fragmentShader,</span></span>
<span class="line"><span style="color:#24292E;">  uniforms: {</span></span>
<span class="line"><span style="color:#24292E;">    param: {</span></span>
<span class="line"><span style="color:#24292E;">      type: </span><span style="color:#032F62;">&quot;float&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      value: [</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.4</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>g.ShaderProgram#uniform#value</code> の値はプログラムの実行中に任意に変更できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">scene.update.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  shader.uniforms.time.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.game.age;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">scene.update.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  shader.uniforms.time.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.game.age;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="関連情報" tabindex="-1">関連情報 <a class="header-anchor" href="#関連情報" aria-label="Permalink to &quot;関連情報&quot;">​</a></h2><ul><li><a href="/akashic-engine/v3/classes/ShaderProgram.html">API リファレンス</a></li></ul>`,37);function F(h,g,m,v,C,A){const o=a("font"),e=a("PlaygroundElement");return r(),t("div",null,[i,s("p",null,[s("strong",null,[n(o,{color:"red"},{default:E(()=>[l("この文書は不完全です。また現在利用例のサンプルコードのシェーダが動作していません。")]),_:1})])]),d,n(e,{gameJsonUri:"/snippets/reverse-reference/drawing/shader/game.json",width:600,height:400}),u])}const S=c(y,[["render",F]]);export{D as __pageData,S as default};
