import{_ as a,C as l,o,c as p,H as e,Q as s}from"./chunks/framework.459ab1e9.js";const g=JSON.parse('{"title":"複雑な条件の当たり判定を調べる","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/logic/collision.md","filePath":"reverse-reference/v3/logic/collision.md"}'),c={name:"reverse-reference/v3/logic/collision.md"},t=s(`<h1 id="複雑な条件の当たり判定を調べる" tabindex="-1">複雑な条件の当たり判定を調べる <a class="header-anchor" href="#複雑な条件の当たり判定を調べる" aria-label="Permalink to &quot;複雑な条件の当たり判定を調べる&quot;">​</a></h1><p>複雑な条件の当たり判定を調べるには <code>collision-js</code> を利用します。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> co </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@akashic-extension/collision-js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 矩形を定義する</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> box1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  position: { x: </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">// 矩形の中心座標</span></span>
<span class="line"><span style="color:#E1E4E8;">  halfExtend: { x: </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">96</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">// 矩形の縦・横の半分の長さ</span></span>
<span class="line"><span style="color:#E1E4E8;">  angle: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 矩形の回転角度[radian]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> box2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  position: { x: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  halfExtend: { x: </span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  angle: </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isCollision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> co.</span><span style="color:#B392F0;">boxToBox</span><span style="color:#E1E4E8;">(box1, box2); </span><span style="color:#6A737D;">// box1 と box2 が衝突している場合は真を返す</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> co </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@akashic-extension/collision-js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 矩形を定義する</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> box1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  position: { x: </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> }, </span><span style="color:#6A737D;">// 矩形の中心座標</span></span>
<span class="line"><span style="color:#24292E;">  halfExtend: { x: </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">96</span><span style="color:#24292E;"> }, </span><span style="color:#6A737D;">// 矩形の縦・横の半分の長さ</span></span>
<span class="line"><span style="color:#24292E;">  angle: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 矩形の回転角度[radian]</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> box2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  position: { x: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  halfExtend: { x: </span><span style="color:#005CC5;">64</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  angle: </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isCollision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> co.</span><span style="color:#6F42C1;">boxToBox</span><span style="color:#24292E;">(box1, box2); </span><span style="color:#6A737D;">// box1 と box2 が衝突している場合は真を返す</span></span></code></pre></div><h2 id="利用例" tabindex="-1">利用例 <a class="header-anchor" href="#利用例" aria-label="Permalink to &quot;利用例&quot;">​</a></h2><p>次のコンテンツは、青のポリゴンをドラッグ/スワイプし緑のポリゴンと衝突すると青のポリゴンの色が赤に変わります。</p>`,6),r=s(`<h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><p><code>collision-js</code> を使うことで様々な形状の当たり判定を取得することができます。エンティティのような矩形の他に、AABB、円、直線、線分、点、ポリゴンなどの形状も判定に利用できます。また、利用できる形状の組み合わせに対して衝突判定関数を提供します。例えば線分と矩形の衝突判定を得たいのであれば、 <code>segmentToBox()</code> を利用することができます。</p><p>より簡単に衝突判定を行う方法として、Akashic Engine 標準の<a href="./intersect.html">g.Collision</a>を利用することもできます。</p><p><code>collision-js</code> は Akashic Engine での利用を念頭に開発されていますが、単体での利用も可能です。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> co </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@akashic-extension/collision-js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 矩形を定義する</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  position: { x: g.game.width </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, y: g.game.height </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  halfExtend: { x: </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">96</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  angle: Math.</span><span style="color:#79B8FF;">PI</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 線分を定義する</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> segment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  position: { x: </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  endPosition: { x: </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isCollision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> co.</span><span style="color:#B392F0;">segmentToBox</span><span style="color:#E1E4E8;">(segment, box);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> co </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@akashic-extension/collision-js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 矩形を定義する</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  position: { x: g.game.width </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, y: g.game.height </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  halfExtend: { x: </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">96</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  angle: Math.</span><span style="color:#005CC5;">PI</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 線分を定義する</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> segment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  position: { x: </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  endPosition: { x: </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isCollision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> co.</span><span style="color:#6F42C1;">segmentToBox</span><span style="color:#24292E;">(segment, box);</span></span></code></pre></div><p>それぞれの衝突判定関数と形状の利用方法は、 <a href="/demo/?title=collision-js">collision-js のサンプル</a> を参照してください。</p><h2 id="関連情報" tabindex="-1">関連情報 <a class="header-anchor" href="#関連情報" aria-label="Permalink to &quot;関連情報&quot;">​</a></h2><ul><li><a href="./intersect.html">エンティティ同士の当たり判定を調べる</a></li><li><a href="https://github.com/akashic-games/collision-js" target="_blank" rel="noreferrer">collision-js</a></li><li><a href="https://akashic-games.github.io/collision-js/api/" target="_blank" rel="noreferrer">collision-js の API リファレンス</a></li></ul>`,8);function E(y,i,h,d,F,C){const n=l("PlaygroundElement");return o(),p("div",null,[t,e(n,{gameJsonUri:"/snippets/reverse-reference/logic/collision/game.json",width:600,height:400}),r])}const A=a(c,[["render",E]]);export{g as __pageData,A as default};
