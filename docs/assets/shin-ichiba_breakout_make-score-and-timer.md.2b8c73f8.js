import{_ as s}from"./chunks/TutorialDemoContentElement.vue_vue_type_script_setup_true_lang.ca0eae9b.js";import{o as a,c as n,H as p,Q as l}from"./chunks/framework.f1c0562b.js";import"./chunks/PlaygroundElement.a7f5e5b9.js";const o="/assets/screenshot_make-score-and-timer_1.1e5f977a.png",e="/assets/screenshot_make-score-and-timer_2.7038e449.png",c="/assets/screenshot_make-score-and-timer_3.839f9228.png",t="/assets/screenshot_make-score-and-timer_4.d1efd190.png",r="/assets/tutorial_breakout_game_timeline.40e8a2f6.png",E="/assets/screenshot_make-score-and-timer_5.fadd2265.png",y=l(`<h1 id="スコアとタイマーの追加" tabindex="-1">スコアとタイマーの追加 <a class="header-anchor" href="#スコアとタイマーの追加" aria-label="Permalink to &quot;スコアとタイマーの追加&quot;">​</a></h1><p>ニコニコ生放送には、ニコ生ゲームでのスコアを放送者・視聴者がそれぞれ競い合い、その順位を表示してくれるランキング機能があります。 そのスコアを加算する部分のロジックを追加しましょう。</p><h2 id="スコア加算のルール" tabindex="-1">スコア加算のルール <a class="header-anchor" href="#スコア加算のルール" aria-label="Permalink to &quot;スコア加算のルール&quot;">​</a></h2><p>ランキングゲームはたくさんの人が同じルールで競い合い、より高いスコアを獲得することが目的です。 一方で、ここまで作成してきたブロックくずしは「パドルを操作してブロックを破壊する」という操作しかプレイヤー側に与えられていません。 例えば「ブロックを破壊するごとにスコアを <code>100</code> を加算する」というルールにすると、全てのブロックを破壊したプレイヤー全員が同率 1 位になってしまいます。 これではゲームを競い合うモチベーションが上がりません。</p><p>したがって、スコアはなるべくプレイによってバラけることが望ましいです。 理想はすべてのプレイヤーのスコアが異なることです。 そこで今回は <strong>ボールがパドルに衝突してから次にパドルに衝突するまでの間に、より多くのブロックを破壊したらその分のボーナスを加算する</strong> というルールでスコアを加算するようにしましょう。</p><h2 id="スコア加算処理" tabindex="-1">スコア加算処理 <a class="header-anchor" href="#スコア加算処理" aria-label="Permalink to &quot;スコア加算処理&quot;">​</a></h2><p>ニコ生ゲームではコードの先頭の方で定義されている <code>game.vars.gameState.score</code> がそのままゲームのスコアとなります。 この値をスコアを加算したいタイミングで適宜加算していきます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">param</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">game</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> g.game; </span><span style="color:#6A737D;">// よくアクセスするため変数に保持しておく</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        game,</span></span>
<span class="line"><span style="color:#E1E4E8;">        assetPaths: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;/assets/images/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;/assets/se/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line highlighted warning"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ニコ生ゲームのランキングモードでは g.game.vars.gameState.score の値がスコアとして扱われる</span></span>
<span class="line highlighted warning"><span style="color:#E1E4E8;">    game.vars.gameState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { score: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">main</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">param</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">game</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> g.game; </span><span style="color:#6A737D;">// よくアクセスするため変数に保持しておく</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        game,</span></span>
<span class="line"><span style="color:#24292E;">        assetPaths: [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;/assets/images/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;/assets/se/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line highlighted warning"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ニコ生ゲームのランキングモードでは g.game.vars.gameState.score の値がスコアとして扱われる</span></span>
<span class="line highlighted warning"><span style="color:#24292E;">    game.vars.gameState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { score: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span></code></pre></div><h2 id="スコアの表示" tabindex="-1">スコアの表示 <a class="header-anchor" href="#スコアの表示" aria-label="Permalink to &quot;スコアの表示&quot;">​</a></h2><h3 id="ビットマップフォントの作成" tabindex="-1">ビットマップフォントの作成 <a class="header-anchor" href="#ビットマップフォントの作成" aria-label="Permalink to &quot;ビットマップフォントの作成&quot;">​</a></h3><p>スコアは 0 から ９ までの数字しか使いません。 このように表示する値が事前に決まっているフォントの表示には <strong>ビットマップフォント</strong> が適しています。</p><p>ビットマップフォントとは、文字 (グリフ) として使いたい文字を敷き詰めて作った画像を指します。 あらかじめビットマップフォントを作成しておくことで、どのような端末でも同一のデザインのフォントが表示できる利点があります。</p><p>今回は、 TrueType 形式 (.ttf) のフォントデータからスコア表示用のビットマップフォントを作成してみます。 ビットマップフォントの作成には <a href="https://github.com/akashic-games/bmpfont-generator" target="_blank" rel="noreferrer">bmpfont-generator</a> を利用します。 <a href="https://github.com/akashic-games/bmpfont-generator" target="_blank" rel="noreferrer">bmpfont-generator</a> は、 .ttf 形式のフォントデータを画像化して Akashic Engine 用のビットマップフォントデータを生成するツールです。</p><p>次のコマンドを実行することでインストールできます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@akashic/bmpfont-generator</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@akashic/bmpfont-generator</span></span></code></pre></div><p>インストールが正常に行われたかを確認するため、以下のコマンドを実行します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bmpfont-generator</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--version</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bmpfont-generator</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--version</span></span></code></pre></div><p>正常にインストールされていれば、バージョン番号 (執筆時点では <code>4.0.5</code>) が表示されます。 以降の説明ではバージョンが <code>4.0.5</code> であることを前提としているため、 <code>4.0.5</code> よりも小さい場合は上記コマンドで再インストールしておきましょう。</p><p>スコア表示用のフォントとして、今回は <a href="http://jikasei.me/font/rounded-mplus/" target="_blank" rel="noreferrer">自家製 Rounded M+</a> にて配布されている rounded-mplus-2p-black を利用します。 以下からフォントデータをダウンロードして game.json と同一ディレクトリに保存してください。</p><ul><li><a href="/tutorial/breakout/assets/rounded-mplus-2p-black.ttf">rounded-mplus-2p-black.ttf</a></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>bmpfont-generator を使う際には、必ずフォントの配布元でライセンスを確認してください。 ライセンスによっては無償・有償にかかわらず商用での利用を禁止していたり、または画像化して配布することを禁止している場合があります。</p></div><p>ビットマップフォントのデータの保存先として、<code>assets</code> ディレクトリ内に <code>fonts</code> ディレクトリを作成しておきましょう。 作成後、game.json のディレクトリへ移動して以下のコマンドを実行します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bmpfont-generator</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rounded-mplus-2p-black.ttf</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-F</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;#fff&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-S</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;#000&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--stroke-width</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0123456789+-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-H</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">45</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-w</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assets/fonts/font-number.png</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bmpfont-generator</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rounded-mplus-2p-black.ttf</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-F</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;#fff&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-S</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;#000&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--stroke-width</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0123456789+-&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-H</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">45</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-w</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assets/fonts/font-number.png</span></span></code></pre></div><p><code>-H</code> にはフォントの高さ (<code>px</code>) を指定します。 <code>-w</code> にはフォントの幅 (<code>px</code>) を指定します。 <code>-F</code> にはフォントの色を指定します。 <code>-S</code> にはフォントの枠色を指定します。 <code>--stroke-width</code> には枠の太さ (<code>px</code>) を指定します。 <code>-c</code> は画像化するフォントの文字列を指定します。 ここでは数字を利用するので <code>&quot;0123456789+-&quot;</code> を指定します。 最後の <code>assets/fonts/font-number.png</code> はビットマップフォントの出力先です。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>コマンドで指定できる引数を調べたい場合は <code>--help</code> をつけて実行してみましょう。 大体のコマンドにおいて、サポートする引数や使い方などを表示してくれます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bmpfont-generator</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--help</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bmpfont-generator</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--help</span></span></code></pre></div></div><p><code>assets/fonts</code> ディレクトリに <code>font-number.png</code> と <code>font-number_glyphs.json</code> が出力されていることを確認します。 <code>font-number_glyphs.json</code> には Akashic Engine で利用するためのグリフ情報が格納されています。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">assets</span></span>
<span class="line"><span style="color:#e1e4e8;">└── fonts</span></span>
<span class="line"><span style="color:#e1e4e8;">    ├── font-number.png</span></span>
<span class="line"><span style="color:#e1e4e8;">    └── font-number_glyphs.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">assets</span></span>
<span class="line"><span style="color:#24292e;">└── fonts</span></span>
<span class="line"><span style="color:#24292e;">    ├── font-number.png</span></span>
<span class="line"><span style="color:#24292e;">    └── font-number_glyphs.json</span></span></code></pre></div><p><img src="`+o+`" alt=""></p><p>再び <code>akashic scan</code> コマンドを実行します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">akashic</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">scan</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">asset</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">akashic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">scan</span><span style="color:#24292E;"> </span><span style="color:#032F62;">asset</span></span></code></pre></div><h3 id="ビットマップフォントの利用" tabindex="-1">ビットマップフォントの利用 <a class="header-anchor" href="#ビットマップフォントの利用" aria-label="Permalink to &quot;ビットマップフォントの利用&quot;">​</a></h3><p>ビットマップフォントを使えるようにコードを修正します。 ビットマップフォントを読み込ませるため <code>assetPaths</code> を修正します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        game,</span></span>
<span class="line"><span style="color:#E1E4E8;">        assetPaths: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;/assets/images/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;/assets/se/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;/assets/fonts/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        game,</span></span>
<span class="line"><span style="color:#24292E;">        assetPaths: [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;/assets/images/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;/assets/se/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;/assets/fonts/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span></code></pre></div><p>次に <code>g.BitmapFont</code> を生成します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">blockContainer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(blockContainer);</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// スコア用のビットマップフォントの作成</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">font</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">BitmapFont</span><span style="color:#E1E4E8;">({</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            scene,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            src: scene.asset.</span><span style="color:#B392F0;">getImage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/assets/fonts/font-number.png&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            glyphInfo: scene.asset.</span><span style="color:#B392F0;">getJSONContent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/assets/fonts/font-number_glyphs.json&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// paddle を作成</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">paddle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(paddle); </span><span style="color:#6A737D;">// paddle をシーンに追加</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">blockContainer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(blockContainer);</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// スコア用のビットマップフォントの作成</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">font</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">BitmapFont</span><span style="color:#24292E;">({</span></span>
<span class="line diff add"><span style="color:#24292E;">            scene,</span></span>
<span class="line diff add"><span style="color:#24292E;">            src: scene.asset.</span><span style="color:#6F42C1;">getImage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/assets/fonts/font-number.png&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line diff add"><span style="color:#24292E;">            glyphInfo: scene.asset.</span><span style="color:#6F42C1;">getJSONContent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/assets/fonts/font-number_glyphs.json&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line diff add"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// paddle を作成</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">paddle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(paddle); </span><span style="color:#6A737D;">// paddle をシーンに追加</span></span></code></pre></div><p><code>src</code> には bmpfont-generator で生成した画像アセットを指定します。 <code>glyphInfo</code> には同時に生成された <code>font-number_glyphs.json</code> を指定します。 <code>scene.asset.getJSONContent()</code> は引数に指定したパスのテキストアセットを JSON の形式にパースした結果を返します。</p><p>以上で <code>g.BitmapFont</code> が生成できました。 次にこのビットマップフォントを実際に描画してみましょう。 ビットマップフォントの描画には <code>g.Label</code> を利用します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">blockContainer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(blockContainer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// スコア用のビットマップフォントの作成</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">font</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">BitmapFont</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// スコア表示エンティティの作成</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scoreLabel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Label</span><span style="color:#E1E4E8;">({</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            scene,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            font,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            fontSize: font.size,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            text: </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">game</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">vars</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">gameState</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">score</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            x: game.width </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            y: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            anchorX: </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            anchorY: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        });</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(scoreLabel);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// paddle を作成</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">paddle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(paddle); </span><span style="color:#6A737D;">// paddle をシーンに追加</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">blockContainer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(blockContainer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// スコア用のビットマップフォントの作成</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">font</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">BitmapFont</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// スコア表示エンティティの作成</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scoreLabel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Label</span><span style="color:#24292E;">({</span></span>
<span class="line diff add"><span style="color:#24292E;">            scene,</span></span>
<span class="line diff add"><span style="color:#24292E;">            font,</span></span>
<span class="line diff add"><span style="color:#24292E;">            fontSize: font.size,</span></span>
<span class="line diff add"><span style="color:#24292E;">            text: </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">game</span><span style="color:#032F62;">.</span><span style="color:#24292E;">vars</span><span style="color:#032F62;">.</span><span style="color:#24292E;">gameState</span><span style="color:#032F62;">.</span><span style="color:#24292E;">score</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">            x: game.width </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">            y: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">            anchorX: </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">            anchorY: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">        });</span></span>
<span class="line diff add"><span style="color:#24292E;">        scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(scoreLabel);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// paddle を作成</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">paddle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(paddle); </span><span style="color:#6A737D;">// paddle をシーンに追加</span></span></code></pre></div><p><code>font</code> には先ほど生成した <code>g.BitmapFont</code> を指定します。 <code>fontSize</code> には <code>font.size</code> の値をそのまま指定します。 <code>text</code> には実際に表示する文字列を指定します。 <code>anchorX</code> を <code>1.0</code> に指定することで、画面の右端へ寄せるように配置しています。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>\`\${game.vars.gameState.score}\`</code> はテンプレートリテラルと呼ばれる構文で、文字列をバッククオート記号 <code>\`</code> で定義することで利用できます。 テンプレートリテラル内では <code>\${変数名}</code> のように <code>\${}</code> で変数を囲むと、その変数が自動的に展開された状態で文字列を解決してくれます。 ここでは <code>game.vars.gameState.score</code> の値を文字列に変換しています。</p></div><p>ゲームを実行してみましょう。 画面の右上にスコアが表示されていれば成功です。</p><p><img src="`+e+`" alt=""></p><h3 id="スコアの加算" tabindex="-1">スコアの加算 <a class="header-anchor" href="#スコアの加算" aria-label="Permalink to &quot;スコアの加算&quot;">​</a></h3><p>ブロックの破壊時にスコアを加算してみましょう。 まず、スコア加算時に <code>scoreLabel</code> の表示を更新する関数 <code>updateScoreLabel()</code> を定義しておきましょう。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// スコア表示エンティティの作成</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scoreLabel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Label</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(scoreLabel);</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// スコア表示を更新する</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateScoreLabel</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            scoreLabel.text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">game</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">vars</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">gameState</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">score</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            scoreLabel.</span><span style="color:#B392F0;">invalidate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        }</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// スコア表示エンティティの作成</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scoreLabel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Label</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(scoreLabel);</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// スコア表示を更新する</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateScoreLabel</span><span style="color:#24292E;">() {</span></span>
<span class="line diff add"><span style="color:#24292E;">            scoreLabel.text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">game</span><span style="color:#032F62;">.</span><span style="color:#24292E;">vars</span><span style="color:#032F62;">.</span><span style="color:#24292E;">gameState</span><span style="color:#032F62;">.</span><span style="color:#24292E;">score</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line diff add"><span style="color:#24292E;">            scoreLabel.</span><span style="color:#6F42C1;">invalidate</span><span style="color:#24292E;">();</span></span>
<span class="line diff add"><span style="color:#24292E;">        }</span></span></code></pre></div><p>実は <code>scoreLabel</code> の <code>text</code> の内容を変更しただけでは、描画内容は更新されません。 描画内容を更新するには <code>text</code> の変更後 <code>scoreLabel.invalidate()</code> を呼びます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>invalidate()</code> はキャッシュされている描画内容を更新する関数です。 <code>g.Label</code> など、描画内容をキャッシュするエンティティに存在します。 これには、不要なキャッシュ更新を避けることでパフォーマンス低下を防ぐという目的があります。 描画内容はそのままで、単に座標や角度を変更するだけの場合は <code>modified()</code> を呼び出してください。</p></div><p>ボールとブロックの衝突処理の部分でスコアを加算します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isCollided) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 破壊可能のボールと衝突していたら</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (block.tag.mapNumber </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        block.</span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// ブロックを破壊</span></span>
<span class="line"><span style="color:#E1E4E8;">                        seBlock.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">();</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                        game.vars.gameState.score </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// スコアを加算</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">updateScoreLabel</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// スコア表示の更新</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 一度のフレームで一つのブロックのみを削除</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isCollided) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 破壊可能のボールと衝突していたら</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (block.tag.mapNumber </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        block.</span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// ブロックを破壊</span></span>
<span class="line"><span style="color:#24292E;">                        seBlock.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">();</span></span>
<span class="line diff add"><span style="color:#24292E;">                        game.vars.gameState.score </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// スコアを加算</span></span>
<span class="line diff add"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">updateScoreLabel</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// スコア表示の更新</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 一度のフレームで一つのブロックのみを削除</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span></code></pre></div><p>加算した後、忘れずに <code>updateScoreLabel()</code> を実行してスコア表示を更新します。</p><p>ゲームを実行してみましょう。 ブロックを破壊するたびにスコアが加算されていれば成功です。</p><p><img src="`+c+`" alt=""></p><h3 id="ボーナスの実装" tabindex="-1">ボーナスの実装 <a class="header-anchor" href="#ボーナスの実装" aria-label="Permalink to &quot;ボーナスの実装&quot;">​</a></h3><p>さて、冒頭でも説明した通り</p><blockquote><p>ボールがパドルに衝突してから次にパドルに衝突するまでの間に、より多くのブロックを破壊したらその分のボーナスを加算する</p></blockquote><p>というルールでスコアにボーナスを加えてみることにします。 まず「パドルに衝突してから、ブロックを破壊した個数」として <code>bonusCount</code> という変数を定義します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> direction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bonusCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        scene.onUpdate.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> direction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bonusCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        scene.onUpdate.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span></code></pre></div><p>ブロックの破壊時にボーナス分のスコアを追加で加算します。 ここでは <code>連続で破壊した個数 * 50</code> をボーナス分として加算します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isCollided) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 破壊可能のボールと衝突していたら</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (block.tag.mapNumber </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        block.</span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// ブロックを破壊</span></span>
<span class="line"><span style="color:#E1E4E8;">                        seBlock.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">();</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">                        game.vars.gameState.score </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// スコアを加算</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bonusScore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bonusCount </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//ボーナスとして加算するスコア</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                        game.vars.gameState.score </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> bonusScore; </span><span style="color:#6A737D;">// スコアを加算</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">updateScoreLabel</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// スコア表示の更新</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                        bonusCount</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 一度のフレームで一つのブロックのみを削除</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isCollided) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 破壊可能のボールと衝突していたら</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (block.tag.mapNumber </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        block.</span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// ブロックを破壊</span></span>
<span class="line"><span style="color:#24292E;">                        seBlock.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">();</span></span>
<span class="line diff remove"><span style="color:#24292E;">                        game.vars.gameState.score </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// スコアを加算</span></span>
<span class="line diff add"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bonusScore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bonusCount </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//ボーナスとして加算するスコア</span></span>
<span class="line diff add"><span style="color:#24292E;">                        game.vars.gameState.score </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> bonusScore; </span><span style="color:#6A737D;">// スコアを加算</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">updateScoreLabel</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// スコア表示の更新</span></span>
<span class="line diff add"><span style="color:#24292E;">                        bonusCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 一度のフレームで一つのブロックのみを削除</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span></code></pre></div><p>ボールが画面の下端に到達したら <code>bonusCount</code> をリセットします。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// ボールが画面の下端に到達したとき</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ball.y </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> game.height </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ball.height </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                isStarted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                seMiss.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">();</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                bonusCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// ボールが画面の下端に到達したとき</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ball.y </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> game.height </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ball.height </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                isStarted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                seMiss.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">();</span></span>
<span class="line diff add"><span style="color:#24292E;">                bonusCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span></code></pre></div><p>同様にパドルと衝突したら <code>bonusCount</code> をリセットします。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// ボールとパドルが衝突したとき</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">intersect</span><span style="color:#E1E4E8;">(paddle, ball)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">h</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">direction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">([ball.x </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> paddle.x, </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">(ball.y </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> (paddle.y </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> h))]);</span></span>
<span class="line"><span style="color:#E1E4E8;">                vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                sePaddle.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">();</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                bonusCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// ボールとパドルが衝突したとき</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">intersect</span><span style="color:#24292E;">(paddle, ball)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">h</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">direction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">([ball.x </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> paddle.x, </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">(ball.y </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> (paddle.y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> h))]);</span></span>
<span class="line"><span style="color:#24292E;">                vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                sePaddle.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">();</span></span>
<span class="line diff add"><span style="color:#24292E;">                bonusCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span></code></pre></div><p>再びゲームを実行してみましょう。 ブロックを連続で破壊するたびにボーナススコアが加算されていれば成功です。</p><p><img src="`+t+`" alt=""></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>スコアがどのように加算されているのかを、それとなくプレイヤーに仄めかすことも重要です。 以下は解決策の一例として、ボーナススコアが加算された際に破壊したブロック付近に一定時間 <code>+50</code>、<code>+100</code> のようなボーナススコアを表示する方法です。 このような演出により、ボーナス加算の条件をプレイ中に気づかせることが可能になるかもしれません。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isCollided) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 破壊可能のボールと衝突していたら</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (block.tag.mapNumber </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        block.</span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// ブロックを破壊</span></span>
<span class="line"><span style="color:#E1E4E8;">                        seBlock.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bonusScore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bonusCount </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        game.vars.gameState.score </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> bonusScore; </span><span style="color:#6A737D;">// スコアを加算</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">updateScoreLabel</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// スコア表示の更新</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// ボーナススコアの表示</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bonusCount </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bonusLabel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Label</span><span style="color:#E1E4E8;">({</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                                scene,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                                font,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                                fontSize: font.size,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                                text: </span><span style="color:#9ECBFF;">\`+\${</span><span style="color:#E1E4E8;">bonusScore</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                                x: block.x,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                                y: block.y </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> block.height </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                                anchorX: </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                                anchorY: </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                            });</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                            </span><span style="color:#6A737D;">// 500 ミリ秒後に削除</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                            scene.</span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                                bonusLabel.</span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">();</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                            }, </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">);</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                            scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(bonusLabel);</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                        bonusCount</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 一度のフレームで一つのブロックのみを削除</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isCollided) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 破壊可能のボールと衝突していたら</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (block.tag.mapNumber </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        block.</span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// ブロックを破壊</span></span>
<span class="line"><span style="color:#24292E;">                        seBlock.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bonusScore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bonusCount </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        game.vars.gameState.score </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> bonusScore; </span><span style="color:#6A737D;">// スコアを加算</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">updateScoreLabel</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// スコア表示の更新</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// ボーナススコアの表示</span></span>
<span class="line diff add"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bonusCount </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line diff add"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bonusLabel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Label</span><span style="color:#24292E;">({</span></span>
<span class="line diff add"><span style="color:#24292E;">                                scene,</span></span>
<span class="line diff add"><span style="color:#24292E;">                                font,</span></span>
<span class="line diff add"><span style="color:#24292E;">                                fontSize: font.size,</span></span>
<span class="line diff add"><span style="color:#24292E;">                                text: </span><span style="color:#032F62;">\`+\${</span><span style="color:#24292E;">bonusScore</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">                                x: block.x,</span></span>
<span class="line diff add"><span style="color:#24292E;">                                y: block.y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> block.height </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">                                anchorX: </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">                                anchorY: </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">                            });</span></span>
<span class="line diff add"><span style="color:#24292E;">                            </span><span style="color:#6A737D;">// 500 ミリ秒後に削除</span></span>
<span class="line diff add"><span style="color:#24292E;">                            scene.</span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line diff add"><span style="color:#24292E;">                                bonusLabel.</span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">();</span></span>
<span class="line diff add"><span style="color:#24292E;">                            }, </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">);</span></span>
<span class="line diff add"><span style="color:#24292E;">                            scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(bonusLabel);</span></span>
<span class="line diff add"><span style="color:#24292E;">                        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                        bonusCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 一度のフレームで一つのブロックのみを削除</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span></code></pre></div></div><h2 id="タイマーの実装" tabindex="-1">タイマーの実装 <a class="header-anchor" href="#タイマーの実装" aria-label="Permalink to &quot;タイマーの実装&quot;">​</a></h2><p>残り時間を示すタイマーも表示しましょう。</p><p>ランキングモードで起動されるニコ生ゲームには制限時間があります。</p><p>この制限時間は、テンプレート上部にある変数 <code>param</code> から取得することができます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">param</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">game</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> g.game; </span><span style="color:#6A737D;">// よくアクセスするため変数に保持しておく</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        game,</span></span>
<span class="line"><span style="color:#E1E4E8;">        assetPaths: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;/assets/images/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;/assets/se/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;/assets/fonts/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 制限時間</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (param.sessionParameter.totalTimeLimit) {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> param.sessionParameter.totalTimeLimit; </span><span style="color:#6A737D;">// セッションパラメータで制限時間が指定されたらその値を使用</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">main</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">param</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">game</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> g.game; </span><span style="color:#6A737D;">// よくアクセスするため変数に保持しておく</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        game,</span></span>
<span class="line"><span style="color:#24292E;">        assetPaths: [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;/assets/images/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;/assets/se/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;/assets/fonts/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line diff add"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 制限時間</span></span>
<span class="line diff add"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (param.sessionParameter.totalTimeLimit) {</span></span>
<span class="line diff add"><span style="color:#24292E;">        time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> param.sessionParameter.totalTimeLimit; </span><span style="color:#6A737D;">// セッションパラメータで制限時間が指定されたらその値を使用</span></span>
<span class="line diff add"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>セッションパラメータについての詳細は <a href="/shin-ichiba/ranking/#session-parameter">セッションパラメータとランキング対応ゲームテンプレート</a> を参照してください。</p></div><p>変数 <code>time</code> は <strong>ゲームが起動してから終了までの全ての時間</strong> を意味しています。 したがって、この値からゲームリソースの読み込み時間・オープニング演出時間・エンディング演出時間を差し引いた部分が実質的なゲーム実行時間、すなわちタイマーとして表示すべき値にあたります。</p><p><img src="`+r+`" alt=""></p><p>全体の起動時間は game.json を直接編集することでその値を変更することができます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>詳細については <a href="/shin-ichiba/ranking/ranking-by-template.html#declare-timelimit">テンプレートでわかるランキングゲーム#制限時間の申告</a> も併せて参照してください。</p></div><p>ゲームリソースの読み込み時間・オープニング演出時間・エンディング演出時間は制作するゲームによって様々です。 オープニング演出・エンディング演出の追加については後章で説明しますが、今の段階ではそれらの合計が <strong>15秒</strong> と仮定し、ゲームの時間が50秒となるように <code>totalTimeLimit</code> の値を65秒に変更しておきましょう。</p><p>game.json を開き、以下のように修正します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;environment&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;sandbox-runtime&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;nicolive&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;supportedModes&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&quot;ranking&quot;</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">			]</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">			],</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;preferredSessionParameters&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&quot;totalTimeLimit&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">65</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;environment&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;sandbox-runtime&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;nicolive&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;supportedModes&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&quot;ranking&quot;</span></span>
<span class="line diff remove"><span style="color:#24292E;">			]</span></span>
<span class="line diff add"><span style="color:#24292E;">			],</span></span>
<span class="line diff add"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;preferredSessionParameters&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line diff add"><span style="color:#24292E;">				</span><span style="color:#032F62;">&quot;totalTimeLimit&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">65</span></span>
<span class="line diff add"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span></code></pre></div><p>これでゲームの実行時間が65秒へと変更されました。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>nicolive</code> というキーが <code>niconico</code> になっている場合、それは古い仕様のままです。 <code>nicolive</code> へと修正してください。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;environment&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;sandbox-runtime&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;niconico&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;nicolive&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;supportedModes&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#9ECBFF;">&quot;ranking&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">			]</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;environment&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;sandbox-runtime&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line diff remove"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;niconico&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line diff add"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;nicolive&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;supportedModes&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#032F62;">&quot;ranking&quot;</span></span>
<span class="line"><span style="color:#24292E;">			]</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span></code></pre></div></div><p>以上を踏まえ、スコアエンティティ作成部分の直後に次のコードを追加します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// スコア用のビットマップフォントの作成</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">font</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">BitmapFont</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// スコア表示エンティティの作成</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scoreLabel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Label</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(scoreLabel);</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 残り時間 (合計時間から15秒の猶予を持たせる)</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> remainingTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;"> </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// タイマー表示エンティティの作成</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">timerLabel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Label</span><span style="color:#E1E4E8;">({</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            scene,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            font,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            fontSize: font.size,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            text: </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">remainingTime</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            x: </span><span style="color:#79B8FF;">70</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            y: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            width: </span><span style="color:#79B8FF;">70</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            anchorX: </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            anchorY: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        });</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        scene.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(timerLabel);</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// スコア用のビットマップフォントの作成</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">font</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">BitmapFont</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// スコア表示エンティティの作成</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scoreLabel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Label</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(scoreLabel);</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 残り時間 (合計時間から15秒の猶予を持たせる)</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> remainingTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">;</span></span>
<span class="line diff add"><span style="color:#24292E;"> </span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// タイマー表示エンティティの作成</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">timerLabel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Label</span><span style="color:#24292E;">({</span></span>
<span class="line diff add"><span style="color:#24292E;">            scene,</span></span>
<span class="line diff add"><span style="color:#24292E;">            font,</span></span>
<span class="line diff add"><span style="color:#24292E;">            fontSize: font.size,</span></span>
<span class="line diff add"><span style="color:#24292E;">            text: </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">remainingTime</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">            x: </span><span style="color:#005CC5;">70</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">            y: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">            width: </span><span style="color:#005CC5;">70</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">            anchorX: </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">            anchorY: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line diff add"><span style="color:#24292E;">        });</span></span>
<span class="line diff add"><span style="color:#24292E;">        scene.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(timerLabel);</span></span></code></pre></div><p><code>remainingTime</code> はゲームの残り時間を示す変数です。</p><p>残り時間を更新する関数 <code>updateTimer()</code> も作成します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// スコア表示を更新する</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateScoreLabel</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// タイマー表示を更新する</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateTimer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            timerLabel.text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">remainingTime</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            timerLabel.</span><span style="color:#B392F0;">invalidate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        }</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// スコア表示を更新する</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateScoreLabel</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// タイマー表示を更新する</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateTimer</span><span style="color:#24292E;">() {</span></span>
<span class="line diff add"><span style="color:#24292E;">            timerLabel.text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">remainingTime</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line diff add"><span style="color:#24292E;">            timerLabel.</span><span style="color:#6F42C1;">invalidate</span><span style="color:#24292E;">();</span></span>
<span class="line diff add"><span style="color:#24292E;">        }</span></span></code></pre></div><p>残り時間を減らす処理も追加します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> direction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bonusCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 残り時間の更新</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">timer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.</span><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            remainingTime</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (remainingTime </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                scene.</span><span style="color:#B392F0;">clearInterval</span><span style="color:#E1E4E8;">(timer); </span><span style="color:#6A737D;">// タイマーの停止</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// ボールの停止</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// ボールの停止</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// TODO: 終了処理</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            }</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">updateTimer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        }, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> direction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bonusCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 残り時間の更新</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">timer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.</span><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line diff add"><span style="color:#24292E;">            remainingTime</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (remainingTime </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line diff add"><span style="color:#24292E;">                scene.</span><span style="color:#6F42C1;">clearInterval</span><span style="color:#24292E;">(timer); </span><span style="color:#6A737D;">// タイマーの停止</span></span>
<span class="line diff add"><span style="color:#24292E;">                vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// ボールの停止</span></span>
<span class="line diff add"><span style="color:#24292E;">                vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// ボールの停止</span></span>
<span class="line diff add"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// TODO: 終了処理</span></span>
<span class="line diff add"><span style="color:#24292E;">            }</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">updateTimer</span><span style="color:#24292E;">();</span></span>
<span class="line diff add"><span style="color:#24292E;">        }, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span></code></pre></div><p><code>scene.setInterval()</code> はある処理を定期的に実行するメソッドです。 第1引数には処理を指定します。 第2引数の <code>1000</code> は実行間隔のミリ秒を指定します。 1ミリ秒は 1/1000 秒 のため、1000ミリ秒は1秒を示します。 したがって、ここでは1秒毎に <code>remainingTime</code> を1ずつ減らしています。</p><p>また、<code>scene.setInterval()</code> は戻り値にタイマーの ID を返します。 この値を <code>scene.clearInterval()</code> に渡すことで、定期処理を停止することができます。 <code>remainingTime</code> が 0 となったときの部分はまだ実装しないので <code>// TODO:</code> で始まるコメントのみを先に置いておきます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>このようにコメント内にメタデータを持たせることを <strong>アノテーションコメント</strong> といい、ゲーム開発に関わらずプログラミングにおいてはしばしば使われています。 IDE などで <code>TODO:</code> を検索することで、後にコードを追加する際に素早く該当箇所に移動することができます。</p><p>アノテーションコメントには <code>TODO:</code> 以外にも <code>NOTE:</code> (補足説明) や <code>FIXME:</code> (できるだけ早い段階で修正すべきコード) などがよく使われます。 ただしアノテーションコメントは仕様規格が定まっているわけではないため、人によって様々な使われ方がされています。</p></div><p>ついでにゲームの残り時間が0となったときにスワイプ操作を禁止しましょう。 <code>scene.onPointMoveCapture</code> で <code>remainingTime</code> を判定し、0 であれば <code>return</code> させます。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>scene.onPointMoveCapture</code> などのハンドラ内の関数で <code>true</code> を返すと、そのハンドラの登録が削除されます。</p></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// スワイプでパドルが左右に動くようにする</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">paddleMargin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> paddle.width </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        scene.onPointMoveCapture.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (remainingTime </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 終了後は動かさない</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            paddle.x </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> event.prevDelta.x;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// パドルの移動範囲を制限</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (paddle.x </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> paddleMargin) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                paddle.x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> paddleMargin;</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (paddle.x </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> game.width </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> paddleMargin) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                paddle.x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> game.width </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> paddleMargin;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            paddle.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// スワイプでパドルが左右に動くようにする</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">paddleMargin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> paddle.width </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        scene.onPointMoveCapture.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">((</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (remainingTime </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 終了後は動かさない</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            paddle.x </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> event.prevDelta.x;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// パドルの移動範囲を制限</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (paddle.x </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> paddleMargin) {</span></span>
<span class="line"><span style="color:#24292E;">                paddle.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paddleMargin;</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (paddle.x </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> game.width </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> paddleMargin) {</span></span>
<span class="line"><span style="color:#24292E;">                paddle.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> game.width </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> paddleMargin;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            paddle.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span></code></pre></div><p>ゲームを実行してみます。 左上のタイマーがカウントダウンされていれば成功です。</p><p><img src="`+E+'" alt=""></p><h2 id="実行例とソースコード" tabindex="-1">実行例とソースコード <a class="header-anchor" href="#実行例とソースコード" aria-label="Permalink to &quot;実行例とソースコード&quot;">​</a></h2>',97),h=JSON.parse('{"title":"スコアとタイマーの追加","description":"","frontmatter":{},"headers":[],"relativePath":"shin-ichiba/breakout/make-score-and-timer.md","filePath":"shin-ichiba/breakout/make-score-and-timer.md"}'),i={name:"shin-ichiba/breakout/make-score-and-timer.md"},m=Object.assign(i,{setup(d){return(F,f)=>(a(),n("div",null,[y,p(s,{name:"make-score-and-timer"})]))}});export{h as __pageData,m as default};
