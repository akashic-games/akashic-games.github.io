import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.B_s5ISUx.js";const n="data:image/svg+xml,%3csvg%20width='100'%20height='100'%20viewbox='0%200%20100%20100'%20version='1.1'%20xmlns='http://www.w3.org/2000/svg'%3e%3ccircle%20fill='%23D2B48C'%20cx='50'%20cy='50'%20r='50'%20/%3e%3c/svg%3e",y=JSON.parse('{"title":"SVG ファイルを画像アセットとして利用する","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/asset/svg-asset.md","filePath":"reverse-reference/v3/asset/svg-asset.md"}'),h={name:"reverse-reference/v3/asset/svg-asset.md"},e=t(`<h1 id="svg-ファイルを画像アセットとして利用する" tabindex="-1">SVG ファイルを画像アセットとして利用する <a class="header-anchor" href="#svg-ファイルを画像アセットとして利用する" aria-label="Permalink to &quot;SVG ファイルを画像アセットとして利用する&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>この機能は現段階では実験的な立ち位置です。本文書にある注意事項を把握した上で利用するようにしてください。 また、将来的に仕様が変更/廃止される可能性があることをご留意ください。</p></div><p><code>akashic-engine@3.2.0</code> 以降では SVG ファイルを画像アセットとして利用することができます。 SVG ファイルを利用することで今まで Akashic Engine で表現することが難しかった <strong>円</strong> や <strong>曲線</strong> などの描画を手軽に実現することが可能になります。</p><h2 id="利用できる-svg-ファイルの仕様" tabindex="-1">利用できる SVG ファイルの仕様 <a class="header-anchor" href="#利用できる-svg-ファイルの仕様" aria-label="Permalink to &quot;利用できる SVG ファイルの仕様&quot;">​</a></h2><p>Akashic Engine では SVG ファイルを単一の画像データとしてのみ利用することができます。 したがって以下の機能は利用することができません。</p><ul><li>アニメーション (animation, transition など) を伴う機能</li><li>外部リンクへの遷移やスクリプト実行を伴う機能</li></ul><p>加えて実装の都合上、以下の条件を満たす必要があります。</p><ul><li>ルートの <code>&lt;svg&gt;</code> 要素に <code>width</code>, <code>height</code> 属性が存在し、単位として <code>px</code> が使われている (<code>%</code> や <code>mm</code> などではない)</li></ul><h2 id="svg-ファイル" tabindex="-1">SVG ファイル <a class="header-anchor" href="#svg-ファイル" aria-label="Permalink to &quot;SVG ファイル&quot;">​</a></h2><p>以下は 100x100 のベージュ色の円を表す Akashic Engine として妥当な SVG ファイルの記述例です。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">svg</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;100&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;100&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewbox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0 0 100 100&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xmlns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.w3.org/2000/svg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">circle</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#D2B48C&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;50&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;50&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;50&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">svg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="`+n+`" alt="円"></p><h2 id="svg-ファイルのスキャン" tabindex="-1">SVG ファイルのスキャン <a class="header-anchor" href="#svg-ファイルのスキャン" aria-label="Permalink to &quot;SVG ファイルのスキャン&quot;">​</a></h2><p>akashic-cli v2.11.0 以降であれば <code>akashic scan</code> 時に <code>.svg</code> ファイルを <code>&quot;vector-image&quot;</code> アセットとしてスキャンできます。 ただし前述した制限に該当する SVG ファイルはスキャン時にリジェクトされます。</p><p>上記の SVG ファイルを <code>circle.svg</code> として保存し、 <code>image</code> ディレクトリや <code>assets</code> ディレクトリに格納しておくと、 <code>akashic scan asset</code> でスキャンできるようになります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;circle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vector-image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;width&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/circle.svg&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="ゲームコンテンツからの利用" tabindex="-1">ゲームコンテンツからの利用 <a class="header-anchor" href="#ゲームコンテンツからの利用" aria-label="Permalink to &quot;ゲームコンテンツからの利用&quot;">​</a></h2><p>ゲームコンテンツから利用する場合、SVG の画像データを <code>g.Surface</code> に変換 (ラスタライズ) します。 ゲーム開発者自身が生成した <code>g.Surface</code> はエンジンによるリソース開放処理が行われません。 描画用メモリの枯渇を防ぐためにも、適切なタイミングで <code>g.Surface</code> を開放してください。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene.asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVectorImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/image/sample.svg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> surface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSurface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当該の SVG 画像を 200x200 のサーフェスにラスタライズ</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">surface) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ! SVG が利用できない場合のフォールバック対応</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sprite </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Surface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  src: surface </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// g.Sprite のソース画像として利用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">surface.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ! 参照されなくなったタイミングで開放</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sprite.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ! g.Sprite の場合は destroy() に引数 true を渡すことで g.Surface を開放可能</span></span></code></pre></div>`,19),l=[e];function k(p,r,E,d,g,c){return a(),i("div",null,l)}const F=s(h,[["render",k]]);export{y as __pageData,F as default};
