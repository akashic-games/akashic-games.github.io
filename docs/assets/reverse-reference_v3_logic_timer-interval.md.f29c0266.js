import{_ as a,C as n,o as l,c as o,H as t,Q as s}from"./chunks/framework.f1c0562b.js";const m=JSON.parse('{"title":"定期的に処理を実行する","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/logic/timer-interval.md","filePath":"reverse-reference/v3/logic/timer-interval.md"}'),p={name:"reverse-reference/v3/logic/timer-interval.md"},c=s(`<h1 id="定期的に処理を実行する" tabindex="-1">定期的に処理を実行する <a class="header-anchor" href="#定期的に処理を実行する" aria-label="Permalink to &quot;定期的に処理を実行する&quot;">​</a></h1><p>定期的に処理を行う場合は、<code>scene.setInterval()</code> を利用します。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1 秒ごとに行う処理</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1 秒ごとに行う処理</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span></code></pre></div><p>一定時間後に処理を実行する場合は <a href="./timer-timeout.html"><code>scene.setTimeout()</code> を利用してください。</a></p><h2 id="利用例" tabindex="-1">利用例 <a class="header-anchor" href="#利用例" aria-label="Permalink to &quot;利用例&quot;">​</a></h2><p>次のコンテンツは、表示されている矩形の色が 1 秒毎にランダムで変わります。</p>`,7),r=s(`<h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><p><code>scene.setInterval()</code> ではミリ秒単位で時間を指定できますが、実際にはフレーム単位で処理が行われます。例えばゲームが 30 FPS、つまり 1 秒間に 30 フレーム描画している場合、1 フレームの長さは約 33 ミリ秒なので、実際の処理時間は 33 ミリ秒単位に切り上げられます。 <code>scene.setInterval()</code> に登録した関数は <code>scene.clearInterval()</code> で登録を解除できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> intervalId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.</span><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1 秒毎に行う処理</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">clearInterval</span><span style="color:#E1E4E8;">(intervalId); </span><span style="color:#6A737D;">// scene.setIntervalで作成した定期処理を解除</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> intervalId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.</span><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1 秒毎に行う処理</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">clearInterval</span><span style="color:#24292E;">(intervalId); </span><span style="color:#6A737D;">// scene.setIntervalで作成した定期処理を解除</span></span></code></pre></div><p><code>scene.setInterval()</code> ではない、グローバルの <code>setInterval()</code> や、同じくグローバルの <code>setTimeout()</code> は使用しないよう注意してください。 これは、Aksahic Engine のコンテンツは、現実の時間とは違う速度で実行されることがあるためです (例えば、Akashic Engine のゲームは、ニコニコ生放送上で実行されることがあります。その場合、タイムシフトではシークバーに連動する形で動作します)。この時、 <code>scene.setInterval()</code> は実行速度を踏まえて経過時間を処理するのですが、 グローバルの <code>setInterval()</code> は指定した時間そのままの時間経過で処理するため、処理の実行タイミングがずれてしまうことがあり得ます。</p><h2 id="関連情報" tabindex="-1">関連情報 <a class="header-anchor" href="#関連情報" aria-label="Permalink to &quot;関連情報&quot;">​</a></h2><ul><li><a href="/tutorial/v3/animation.html#timer-function">チュートリアル</a></li><li><a href="/akashic-engine/v3/classes/Scene.html#setInterval">API リファレンス</a></li></ul>`,6);function i(d,E,y,h,v,_){const e=n("PlaygroundElement");return l(),o("div",null,[c,t(e,{gameJsonUri:"/snippets/reverse-reference/logic/interval/game.json",width:600,height:400}),r])}const g=a(p,[["render",i]]);export{m as __pageData,g as default};
