import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.f1c0562b.js";const u=JSON.parse('{"title":"プレイヤーごとに異なる表示を行う","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/multiplay/each-player.md","filePath":"reverse-reference/v3/multiplay/each-player.md"}'),p={name:"reverse-reference/v3/multiplay/each-player.md"},o=l(`<h1 id="プレイヤーごとに異なる表示を行う" tabindex="-1">プレイヤーごとに異なる表示を行う <a class="header-anchor" href="#プレイヤーごとに異なる表示を行う" aria-label="Permalink to &quot;プレイヤーごとに異なる表示を行う&quot;">​</a></h1><p>プレイヤーごとに異なる表示を行うには、ローカルエンティティを利用します。ローカルエンティティは、エンティティのコンストラクタ引数の <code>local</code> プロパティに <code>true</code> を与えることで生成できます。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">localRect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">FilledRect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// その他プロパティ</span></span>
<span class="line"><span style="color:#E1E4E8;">  local: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ローカルであることを指定</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">localRect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">FilledRect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// その他プロパティ</span></span>
<span class="line"><span style="color:#24292E;">  local: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ローカルであることを指定</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><p>ローカルエンティティを使うと、プレイヤーごとに異なる表示を行えます。 詳細は <a href="./local-entity.html">逆引きリファレンス » ローカルエンティティを使う</a> を参照してください。</p><p>プレイヤーごとに異なる表示を行う状況としては、例えば次のようなものが考えられます。</p><ul><li>対戦型のゲームで、アイテム切り替えの UI を自分にだけ表示する</li><li>ニコ生ゲームで、ゲーム開始時に放送者にだけ難易度選択 UI を表示する</li></ul><p>次のコード例は、プレイヤー画像をクリックした時にクリックしたプレイヤーのみの処理を行う例です。<code>g.Sprite</code> がローカルエンティティなのでクリックしたプレイヤーのみ処理が実行されます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">scene.onLoad.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">player</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene:scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">    src: scene.asset.</span><span style="color:#B392F0;">getImage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/image/player.png&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    touchable:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// クリック・タッチ操作できるエンティティにする</span></span>
<span class="line"><span style="color:#E1E4E8;">    local: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ローカルであることを指定</span></span>
<span class="line"><span style="color:#E1E4E8;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  player.onPointDown.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 画像をクリックした時にクリックしたプレイヤーのみの処理を行う</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }); </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">scene.onLoad.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">player</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    scene:scene,</span></span>
<span class="line"><span style="color:#24292E;">    src: scene.asset.</span><span style="color:#6F42C1;">getImage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/image/player.png&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    touchable:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// クリック・タッチ操作できるエンティティにする</span></span>
<span class="line"><span style="color:#24292E;">    local: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ローカルであることを指定</span></span>
<span class="line"><span style="color:#24292E;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  player.onPointDown.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 画像をクリックした時にクリックしたプレイヤーのみの処理を行う</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  }); </span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>特にニコ生ゲームで、放送者専用の UI や動作を作る場合は、併せて <code>g.game.selfId</code> を利用する必要があります。 詳細は <a href="./streamer.html">逆引きリファレンス » (ニコ生ゲーム) 放送者の端末でのみ処理する</a> を参照してください。</p>`,11),e=[o];function c(t,r,E,y,i,d){return a(),n("div",null,e)}const F=s(p,[["render",c]]);export{u as __pageData,F as default};
