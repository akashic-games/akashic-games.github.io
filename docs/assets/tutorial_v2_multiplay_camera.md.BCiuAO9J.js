import{_ as e,c as a,o as c,a3 as o}from"./chunks/framework.B_s5ISUx.js";const u=JSON.parse('{"title":"プレイヤーごとに異なる位置を表示する","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v2/multiplay/camera.md","filePath":"tutorial/v2/multiplay/camera.md"}'),d={name:"tutorial/v2/multiplay/camera.md"},s=o(`<h1 id="プレイヤーごとに異なる位置を表示する" tabindex="-1">プレイヤーごとに異なる位置を表示する <a class="header-anchor" href="#プレイヤーごとに異なる位置を表示する" aria-label="Permalink to &quot;プレイヤーごとに異なる位置を表示する&quot;">​</a></h1><p>広いフィールドの一部を画面に表示するようなゲームの場合、マルチプレイではプレイヤーごとに異なる場所を表示したくなることが考えられます。そのような場合のために、Akashic Engine は <code>g.Camera</code> を提供しています。</p><h2 id="camera" tabindex="-1">カメラ <a class="header-anchor" href="#camera" aria-label="Permalink to &quot;カメラ {#camera}&quot;">​</a></h2><p>カメラは、インターフェース <code>g.Camera</code> で表現されます。現在の Akashic Engine が実装を提供する唯一のカメラは <code>g.Camera2D</code> です。これは 2D ゲーム用途のカメラであり、次のように生成することができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var camera = new g.Camera2D({ game: g.game });</span></span></code></pre></div><p>生成されたカメラは、そのままでは描画に影響を与えません。カメラを <code>g.Game#focusingCamera</code> に設定することで、ゲーム画面の描画に対してカメラの設定を適用することができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>g.game.focusingCamera = camera;</span></span>
<span class="line"><span>g.game.modified = true;</span></span></code></pre></div><p><code>Game#focusingCamera</code> の値を変更した場合、 <code>Game#modified</code> に真を設定する必要があります。 (他クラスの同名の値と異なり、 <code>Game#modified</code> は関数ではなく <code>boolean</code> であることに気をつけてください。これは歴史的経緯によるものです。)</p><p>この状態で <code>camera</code> のプロパティを変更することで、ゲーム画面全体の描画内容を制御することができます。</p><p><code>Camera2D</code> は <code>Object2D</code> を実装しており、<code>x</code>, <code>y</code> によって描画位置のオフセットや、<code>scaleX</code>, <code>scaleY</code> によって描画結果の拡大率を設定できます。たとえば以下のような記述により、画面全体を 30 度傾けることができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>camera.angle = 30;</span></span>
<span class="line"><span>camera.modified();</span></span></code></pre></div><p><code>Camera2D</code> のオフセットや回転角度は、エンティティとは逆方向に作用することに注意してください。すなわち、たとえば X 座標のオフセット <code>Camera2D#x</code> を 10 に設定した場合、移動するのは描画される範囲です。その中で描画されるエンティティの描画位置は元の位置から (右ではなく) 左に 10 ピクセルずれます。</p><p>エンティティなどと同様、カメラの値の変更後には <code>modified()</code> を呼び出す必要があります。なお <code>Game#focusingCamera</code> に対して <code>modified()</code> を呼び出した場合は、上述の <code>game.modified</code> への真の代入は省略できます。 <code>Game#focusingCamera</code> の既定値は <code>undefined</code> です。</p><h2 id="ignore-camera" tabindex="-1">カメラの transform の無視 <a class="header-anchor" href="#ignore-camera" aria-label="Permalink to &quot;カメラの transform の無視 {#ignore-camera}&quot;">​</a></h2><p>現在の Akashic Engine は、カメラの transform(<code>x</code>, <code>y</code> による描画位置オフセットなど)を無視する方法を直接には提供していません。すべてのエンティティは <code>Game#focusingCamera</code> のオフセットや拡大の影響を受けます。</p><p>画面中央に自機を固定したい場合や、「現在のスコア」のようなカメラの影響を受けないエンティティを作成したい場合は、ゲーム開発者が自力でカメラのオフセットなどを引いた(逆変換した)位置に置く必要があります。</p><p>別の方法としては、描画処理 <code>E#renderSelf()</code> をオーバーライドしてこの逆変換するエンティティ (<code>E</code>) の派生クラスを作り、それを使うこともできます。この方法の実装例としては akashic-engine の <code>DefaultLoadingScene</code> のソースコードを参照してください。ただし将来的には、この仕様は変更される可能性があります。</p>`,17),i=[s];function n(t,r,p,m,l,g){return c(),a("div",null,i)}const f=e(d,[["render",n]]);export{u as __pageData,f as default};
