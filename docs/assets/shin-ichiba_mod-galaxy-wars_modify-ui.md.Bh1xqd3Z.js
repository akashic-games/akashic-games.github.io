import{_ as h,c as e,I as t,w as n,k as s,a as i,a3 as l,E as p,o as k}from"./chunks/framework.B_s5ISUx.js";const d="/assets/gw-highscore.CG-Mu-Ko.png",E="/assets/modify-ui-0-searchbox.DBnd1wgv.png",o="/assets/modify-ui-1-dots.CQJUXmFJ.png",r="/assets/modify-ui-2-explorer-menu.ajbcLjbC.png",c="/assets/modify-ui-3-dialog.BVraVQVg.png",g="/assets/modify-ui-4-result.D0PfV9l0.png",y="/assets/modify-ui-5-timegauge.BugI0QcU.png",F="/assets/modify-ui-6-error.rGcucUpW.png",u="/assets/modify-ui-7-timeframe.Ce3jq-2W.png",C="/assets/modify-ui-8-time.C_VhNHzP.png",m="/assets/modify-ui-9-sin.osv_0XIW.png",b="/assets/modify-ui-10-gauge.DJGTpjsQ.png",ds=JSON.parse('{"title":"改造: 残り時間を表示してみる","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"shin-ichiba/mod-galaxy-wars/modify-ui.md","filePath":"shin-ichiba/mod-galaxy-wars/modify-ui.md"}'),A={name:"shin-ichiba/mod-galaxy-wars/modify-ui.md"},D=s("h1",{id:"改造-残り時間を表示してみる",tabindex:"-1"},[i("改造: 残り時間を表示してみる "),s("a",{class:"header-anchor",href:"#改造-残り時間を表示してみる","aria-label":'Permalink to "改造: 残り時間を表示してみる"'},"​")],-1),_=s("p",null,"Galaxy Wars の画面右上には、ハイスコア表示があります。 しかしサンプルデモにはスコアを保存する機能がないので、特に意味のない表示になっています。",-1),B=s("img",{src:d,width:"450"},null,-1),v=l('<p>ここでは、ニコ生ゲームでより意味のある「残り時間」を表示するよう改造し、 関連する Akashic Engine の機能と時間経過の扱いを紹介します。</p><h2 id="ハイスコアを表示するコード" tabindex="-1">ハイスコアを表示するコード <a class="header-anchor" href="#ハイスコアを表示するコード" aria-label="Permalink to &quot;ハイスコアを表示するコード&quot;">​</a></h2><p>ハイスコアを残り時間に変えるには、まずハイスコアの表示を行っている箇所を探す必要があります。 ここまで、処理を探す際はファイル名であたりをつけてきました。 しかし今回の場合、&quot;score&quot; を含むようなファイルは見当たりません。</p><p>角度を変えて、<code>script/</code> フォルダ内の全ファイルからテキスト検索してみましょう。 ゲーム画面を見るとハイスコアは <code>HI </code> と表示されているので、その処理の近くには恐らく <code>HI </code> という記述があるはずです。</p><p>実際に <code>HI </code> (末尾の空白に注意してください) で検索してみると、 <code>scirpt/</code> フォルダ内では <code>PlayerStatus.js</code> にしかこの並びがないことが分かります。</p>',5),q={class:"details custom-block"},f=s("summary",null,"詳細: Windows でフォルダ内のテキストを検索する手順",-1),G=s("p",null,"フォルダ内のファイルの内容からテキストを検索する方法は環境によります。",-1),x=s("p",null,"Windows の場合、エクスプローラーの検索機能が使えます。 .zip ファイルを展開してできたフォルダを開き、右上の入力欄に文字を入力すると、そのフォルダを検索できます。",-1),P=s("img",{src:E,width:"400"},null,-1),S=s("p",null,[i("ただしデフォルトでは、この検索機能はフォルダ内の「ファイル名」しか検索できません。 ここでは「ファイルの内容」を検索したいので、準備が必要です。 ツールバーの "),s("code",null,"..."),i(" ボタンを押して、メニューから "),s("code",null,"オプション"),i(" を選択してください。")],-1),T=s("img",{src:o,width:"400"},null,-1),j=s("img",{src:r,width:"400"},null,-1),I=s("p",null,[s("code",null,"フォルダーオプション"),i(" ダイアログが表示されるので、 "),s("code",null,"検索"),i(" タブの "),s("code",null,"ファイル名と内容を常に検索する (C) (数分かかる場合があります)"),i(" にチェックを入れてください。")],-1),M=s("img",{src:c,width:"300"},null,-1),L=s("p",null,[s("code",null,"OK"),i(" ボタンでダイアログを閉じて、右上のテキストボックスに "),s("code",null,'"HI "'),i(" と入力すると、 "),s("code",null,"PlayerStatus.js"),i(" だけが表示され、このテキストを含むファイルが一つしかないことがわかります。 (残念ながら "),s("code",null,"HI "),i(" だけでは空白文字を検索できないようなので、ここでは "),s("code",null,'"HI "'),i(" で検索する必要がありました)")],-1),w=s("img",{src:g,width:"500"},null,-1),R=s("p",null,[i("今後ファイルの内容まで検索する動作が不要な場合は、同じ手順で "),s("code",null,"フォルダーオプション"),i(" ダイアログを開き、"),s("code",null,"ファイル名と内容を常に検索する (C) (数分かかる場合があります)"),i(" のチェックを外しておきましょう。 "),s("code",null,"OK"),i(" ボタンを押してダイアログを閉じるのを忘れないようにしてください。")],-1),W=s("p",null,"なおここでは、他のツールを導入しないで済むようにエクスプローラーの機能を使いました。 本格的にゲームを開発する場合は、Visual Studio Code のようなエディタの検索機能など、より便利で手軽な (ただし事前準備が必要な) 方法をおすすめします。",-1),V=l(`<p><code>PlayerStatus.js</code> の内容を確認すると、 次の部分に <code>HI </code> が見つかります。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlayerStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 状態更新</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scoreLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SCORE &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;00000&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.player.score).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scoreLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hiScoreLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;HI &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;00000&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.hiScore).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hiScoreLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scales</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hpGauge.children;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scales.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scales[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            scale.cssColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.player.hp) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Yellow&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            scale.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>問題の行を抜き出すとこのような形になっています。<code>=</code> 演算子を使った代入文です。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hiScoreLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;HI &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (何か);</span></span></code></pre></div><p><code>&quot;HI &quot; + (何か)</code> という値を、<code>this.hiScoreLabel.text</code> に 代入していることがわかります。 いかにもハイスコアを表示していそうな名前です。 ここに代入した内容が画面右上に反映されるプログラムになっているのでしょう。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>「ハイスコア」は &quot;high score&quot; なので、 &quot;hi score&quot; だと英語的には正しくありません。 しかしソースコード内で一貫してこの表記なので、ここではそのまま hiScore という名前を使っています。</p></div><p>代入されているのは <code>&quot;HI &quot; + (何か)</code> の形なので、二つの値を <code>+</code> した結果です。 その左辺 <code>&quot;HI &quot;</code> は <strong>文字列</strong> です。 ダブルクォート (<code>&quot;</code>) に囲まれた記号列は、JavaScript では「その記号列を表す文字列」という意味になります。</p><div class="tip custom-block"><p class="custom-block-title">TIP 文字列</p><p>ここまであまり説明なく使っていますが、 <strong>文字列</strong> はプログラミングによく登場する概念で、その名のとおり文字 (記号) の列です。 文字列は、キャラクター名やアイテムの説明文のような「ゲーム画面に表示するテキストデータ」や、 画像や音声ファイルのパス (アセットパス) のような「ゲーム内の処理で使う文字情報」を扱うために利用します。</p></div><p>JavaScript の <code>+</code> 演算子は、対象が文字列の場合 (数値の加算ではなく) 「二つの文字列を連結する」という意味になります。 画面に表示されるものとの見比べると、<code>&quot;HI &quot; + (何か)</code> の <code>(何か)</code> 部分がハイスコアの値に対応しているだろうと想像できます。</p><div class="tip custom-block"><p class="custom-block-title">TIP 文字列と算術演算子</p><p>一般的な数学のイメージとは異なり、JavaScript では <code>+</code> に文字列を与えると、文字列の連結処理になります。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; 7 (数値の加算)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Akashic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; &quot;Hello Akashic&quot; (文字列の連結)</span></span></code></pre></div><p>また <code>+</code> の右辺と左辺どちらかが文字列の場合は、もう一方を文字列に変換して連結します。 (厳密には他にもさまざまな条件を考慮しますが、大雑把には)</p><p>たとえば数値は、文字列に変換すると「その値を表す文字列」(e.g. <code>7</code> なら <code>&quot;7&quot;</code>) になります。 そのため次のようなコードを書くことができます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;足したら &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; &quot;足したら 7&quot;</span></span></code></pre></div><p>なおこれは <code>+</code> だけの特徴です。 <code>-</code> (減算) や、このあと登場する <code>*</code> (乗算) と <code>/</code> (除算) などの演算子は、文字列に対して使っても特別な効果はありません。</p></div><div class="tip custom-block"><p class="custom-block-title">文字列の記法</p><p>JavaScript の文字列はダブルクォート (<code>&quot;</code>) の他、シングルクォート (<code>&#39;</code>) やバッククォート (<code>\`</code>) で囲む記法で書かれることもあります (例: <code>&#39;メニュー&#39;</code>, <code>\`アイテム\`</code>) 。 それぞれ若干異なる部分がありますが、この記事では <code>&quot;</code> しか使わないので詳細は割愛します。 どの記法で書かれたものでも結局は文字列なので、処理上の扱いは同じです。</p></div><h2 id="残り時間表示への変更" tabindex="-1">残り時間表示への変更 <a class="header-anchor" href="#残り時間表示への変更" aria-label="Permalink to &quot;残り時間表示への変更&quot;">​</a></h2><p>ではこのハイスコアを表示するコードを、残り時間の表示処理に変えていきましょう。次のような作業が必要になりそうです。</p><ul><li>変数の名前を変える</li><li><code>HI </code> の部分を <code>TIME </code> に変える</li><li>ハイスコアの代わりに残り時間を表示させる</li></ul><p>順に見ていきましょう。</p><h3 id="変数の名前を変える" tabindex="-1">変数の名前を変える <a class="header-anchor" href="#変数の名前を変える" aria-label="Permalink to &quot;変数の名前を変える&quot;">​</a></h3><p>まず <code>hiScoreLabel</code> という変数名を変更しましょう。 &quot;Label&quot; はともかく &quot;hiScore&quot; の部分は「残り時間」とは関係ないためです。 代わりに <code>timeLabel</code> と呼ぶことにします。</p><p><code>PlayerStatus.js</code> 中の <code>hiScoreLabel</code> をすべて <code>timeLabel</code> に書き換えてください。</p><div class="tip custom-block"><p class="custom-block-title">TIP 変数名の重複</p><p>変数 <code>hiScoreLabel</code> は、本当は他のファイルに登場する可能性もあります。 そのため厳密には<code>script/</code> フォルダの全テキストから検索して <code>hiScoreLabel</code> の利用箇所を探すのが確実です。 また逆に、同じ <code>hiScoreLabel</code> という名前でも、別の箇所で定義された「別の変数」であることもあり得ます。 そのため機械的に変数名を置換すると、本来変えたかったもの以外も巻き込んでしまうことがあります。</p><p>このあたりは都度前後のプログラムを読み解いて考える必要があります。 今回のケースでは幸い、 <code>hiScoreLabel</code> はすべて一つの同じ変数で、 <code>PlayerStatus.js</code> の中にしか現れませんでした。</p></div><div class="tip custom-block"><p class="custom-block-title">TIP 名前の重要性</p><p>厳密にはこの変数名を変える改造は必須ではありません。 変数の名前はあくまでもプログラム上のもので、原則的にゲーム画面に表示されたりすることはないからです。 <code>hiScoreLabel</code> という名前のまま、残り時間を扱うプログラムにすることも、技術的には可能です。</p><p>ただしこれは一般的にはおすすめしません。ここまで見てきたとおり、プログラムを理解するには変数名やファイル名が大きな手がかりになります。 常に意味のある、処理の内容を反映した名前をつけることをおすすめします。</p></div><h3 id="固定の文字列を書き換える" tabindex="-1">固定の文字列を書き換える <a class="header-anchor" href="#固定の文字列を書き換える" aria-label="Permalink to &quot;固定の文字列を書き換える&quot;">​</a></h3><p>二つ目の作業もごく単純です。 単に先ほどの <code>&quot;HI &quot;</code> の部分を <code>&quot;TIME &quot;</code> に書き換えるだけです。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scoreLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SCORE &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;00000&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.player.score).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scoreLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;HI &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;00000&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.hiScore).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TIME &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;00000&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.hiScore).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h3 id="ハイスコアの代わりに残り時間を表示させる" tabindex="-1">ハイスコアの代わりに残り時間を表示させる <a class="header-anchor" href="#ハイスコアの代わりに残り時間を表示させる" aria-label="Permalink to &quot;ハイスコアの代わりに残り時間を表示させる&quot;">​</a></h3><p>さて三つ目の作業が本題でしょう。 ここまでの変更と合わせると、以下のようなコードになれば良さそうです。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TIME &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (残り時間);</span></span></code></pre></div><p>この <code>(残り時間)</code> の部分に何を書けばいいのか、考える必要があります。</p><p>ゲーム画面をよく見ると画面の上側に、時間経過に応じて減っていくゲージがあります。 ということは、このゲーム内のどこかで残り時間は既に求めているはずです。</p>`,28),H=s("img",{src:y,width:"400"},null,-1),X=l(`<p>この処理を探してみましょう。 ただしハイスコアの <code>HI </code> と異なり、画面上には検索できそうな文字列の手掛かりはありません。 仕方がないので変数名を予想して検索することにします。 「残り時間」は英語で &quot;remaining time&quot; や &quot;time left&quot; なので <code>time</code> と <code>remain</code> 、 あるいは「経過時間」の &quot;elapsed time&quot; から <code>elapse</code> などが候補になりそうです。</p><p><code>time</code> で検索してみると、7 つの .js ファイルが該当しました。</p><ul><li>bootScene.js</li><li>GameCore.js</li><li>gameScene.js</li><li>GammaEnemy.js</li><li>Player.js</li><li>PlayerStatus.js</li><li>titleScene.js</li></ul><p>このうち、<code>PlayerStatus.js</code> は今書き換えた <code>timeLabel</code> が見つかっているだけです。 また <code>titleScene.js</code> はタイトル画面、 <code>bootScene.js</code> の &quot;boot&quot; はきっと起動直後のことでしょうから関係なさそうです。 <code>GammaEnemy.js</code> も &quot;enemy&quot; つまり敵キャラ関係の処理でしょうから、ゲーム全体に関わる残り時間の処理ではなさそうです。</p><p>残ったファイルを実際に開いて、 <code>time</code> が現れる箇所を探すと、次のような状況でした。</p><table tabindex="0"><thead><tr><th style="text-align:center;">ファイル名</th><th style="text-align:left;">主な &quot;time&quot; の出現箇所</th></tr></thead><tbody><tr><td style="text-align:center;">GameCore.js</td><td style="text-align:left;"><code>GameCore.MAX_PLAYTIME = 60;</code></td></tr><tr><td style="text-align:center;">gameScene.js</td><td style="text-align:left;"><code>timeGauge</code>, <code>timeGaugeWidth</code></td></tr><tr><td style="text-align:center;">Player.js</td><td style="text-align:left;"><code>effectTime</code></td></tr></tbody></table><p><code>GameCore.js</code> と <code>gameScene.js</code> が「当たり」のようです。 <code>MAX_PLAYTIME</code> が最大プレイ時間 60 秒を表しているのでしょう。 そのものずばり <code>timeGauge</code> (時間ゲージ) は、画面上の残り時間ゲージを表していそうです。</p><p><code>gameScene.js</code> を開いて、 <code>timeGauge</code> に関わるコードを確認すると、次のようになっています。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createGameScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.onLoad.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeGaugeWidth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.width;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeGauge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FilledRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            width: timeGaugeWidth,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cssColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeGauge);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scene.onUpdate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> maxPlayTimeInFPS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GameCore_1.GameCore.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_PLAYTIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> remainTimeRate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxPlayTimeInFPS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxPlayTimeInFPS;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            timeGauge.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeGaugeWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remainTimeRate; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            timeGauge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>残り時間ゲージは時間経過で 幅 (width) が縮んでいくことからすると、<code>width</code> に代入するこの部分が重要そうです。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timeGauge.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeGaugeWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remainTimeRate;</span></span></code></pre></div><p><code>*</code> は乗算の演算子です (<code>A * B</code> は <code>A</code> と <code>B</code> の積) 。 積の左辺の <code>timeGaugeWidth</code> は、上の方で以下のように定義されています。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeGaugeWidth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.width;</span></span></code></pre></div><p><code>g.game.width</code> は Akashic Engine の提供する変数で、「ゲーム画面の幅 (ピクセル数)」を表します。 また <code>timeGaugeWidth</code> は <code>const</code> で定義されているので、後から代入で変更されることはありません。 つまりこの <code>timeGaugeWidth</code> は「時間ゲージの基本の幅」という意味合いの定数なのでしょう。</p><p>一方、積の右辺の <code>remainTimeRate</code> は、名前からすると「残り時間 (ramining time) の割合 (rate)」でしょう。 つまり <code>timeGauge.width</code> に代入する文は次のような処理だと推測できます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (時間ゲージの幅) = (時間ゲージの基本の幅) * (残り時間の割合)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timeGauge.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeGaugeWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remainTimeRate;</span></span></code></pre></div><p>これは時間経過でゲージが縮んでいく挙動とも整合的です。</p><p><code>(残り時間の割合)</code> は、割合なので <code>(残り時間) / (最大プレイ時間)</code> のような値だと推測できます。 実際 <code>remainTimeRate</code> はこのすぐ上で次のように定義されています。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> remainTimeRate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxPlayTimeInFPS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxPlayTimeInFPS;</span></span></code></pre></div><p>つまり、次のような対応関係が読み取れます。</p><table tabindex="0"><thead><tr><th style="text-align:left;">意味</th><th style="text-align:left;">対応する部分</th></tr></thead><tbody><tr><td style="text-align:left;"><code>(残り時間？)</code></td><td style="text-align:left;"><code>Math.max(maxPlayTimeInFPS - Global_1.Global.gameCore.cntr, 0)</code></td></tr><tr><td style="text-align:left;"><code>(最大プレイ時間？)</code></td><td style="text-align:left;"><code>maxPlayTimeInFPS</code></td></tr></tbody></table><p>さて、これでやっと目的の <code>(残り時間)</code> らしきものが見つかりました。 すぐ近くで定義されている <code>maxPlayTimeInFPS</code> と一緒に、この式をコピーして <code>PlayerStatus.js</code> を書き換えましょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> maxPlayTimeInFPS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GameCore_1.GameCore.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_PLAYTIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>実際には、この <code>(残り時間？)</code> はまだ目的の <code>(残り時間)</code> そのものではありません。 しかしいったん画面に反映して動くところまでこの値で進めてみましょう。</p></div><p><code>PlayerStatus.js</code> を次のように変更します。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlayerStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scoreLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SCORE &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;00000&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.player.score).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scoreLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> maxPlayTimeInFPS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GameCore_1.GameCore.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_PLAYTIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps; </span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TIME &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;00000&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.hiScore).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TIME &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxPlayTimeInFPS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="動作確認とデバッグ" tabindex="-1">動作確認とデバッグ <a class="header-anchor" href="#動作確認とデバッグ" aria-label="Permalink to &quot;動作確認とデバッグ&quot;">​</a></h3><p>ここで動作確認してみましょう。<code>akashic sandbox</code> を実行します。 するとタイトル画面を終えてメインゲームが始まった瞬間、次のような画面で固まってしまいました。</p>`,28),Y=s("img",{src:F,width:"500"},null,-1),N=l(`<p><code>akashic sandbox</code> では、ゲーム実行中にエラーが発生すると右下にエラーメッセージを表示します。 ここでは「<code>GameCore_1 is not defined</code>」(GameCore_1 は定義されていない) と表示されているので、 定義していない変数を使ってしまったようだと分かります。</p><p>先ほどまで動いていたゲームなので、原因は間違いなく今書き換えた部分にあるはずです。</p><p>改造部分で <code>GameCore_1</code> が登場するのは、先ほど <code>PlayerStatus.js</code> にコピーしてきたこの箇所だけでした。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlayerStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scoreLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SCORE &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;00000&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.player.score).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scoreLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> maxPlayTimeInFPS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GameCore_1.GameCore.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_PLAYTIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps; </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TIME &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxPlayTimeInFPS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このコードは違うファイルからコピーしてきたので、このファイルには <code>GameCore_1</code> という変数がありません。 これが原因でしょう。コピー元の <code>gameScene.js</code> を確認すると、次のような定義が見つかります。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GameCore_1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./GameCore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>require()</code> は、「指定された .js ファイルを読み込み、その結果を取得する」というような機能を持つ関数です。 拡張子は省略できるので <code>&quot;./GameCore&quot;</code> とだけ書かれていますが、この記述で <code>&quot;./GameCore.js&quot;</code> を読み込みます。</p><p><code>PlayerStatus.js</code> でも、ファイル冒頭に <code>require()</code> している行が並んでいるので、そこに同じ行を追加しましょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__esModule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.PlayerStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Global_1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./Global&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Player_1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./Player&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GameCore_1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./GameCore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlayerStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>require()</code> に与えている引数の <code>./</code> の部分は、「このファイルと同じフォルダ」を意味する表記です。 つまり <code>&quot;./GameCore.js&quot;</code> は「このファイルと同じフォルダにある <code>GameCore.js</code> 」という意味です。</p><p>今回はコピー元の <code>gameScene.js</code> もコピー先の <code>PlayerStatus.js</code> も同じフォルダにあるので、 コピー先でも <code>require(&quot;./GameCore.js&quot;)</code> のままで正しく動作します。 違うフォルダにコピーした場合は、引数を書き換える必要があります。</p></div><h3 id="残り時間部分の修正" tabindex="-1">残り時間部分の修正 <a class="header-anchor" href="#残り時間部分の修正" aria-label="Permalink to &quot;残り時間部分の修正&quot;">​</a></h3><p><code>akashic sandbox</code> で改めて動作確認しましょう。 今度は正しくゲームを始めることができました。 画面右上も <code>TIME</code> 表記に変わっていて、時間経過で数字が減っていくのがわかります。</p>`,12),J=s("img",{src:u,width:"450"},null,-1),O=l(`<p>しかしまだ気になる点があります。残り時間の数字が大きすぎますし、数字が減るペースも速すぎます。</p><p>この数字は先ほど <code>(残り時間？)</code> としていた値です。改めて式を確認しましょう。</p><table tabindex="0"><thead><tr><th style="text-align:left;">意味</th><th style="text-align:left;">対応する部分</th></tr></thead><tbody><tr><td style="text-align:left;"><code>(残り時間？)</code></td><td style="text-align:left;"><code>Math.max(maxPlayTimeInFPS - Global_1.Global.gameCore.cntr, 0)</code></td></tr><tr><td style="text-align:left;"><code>(最大プレイ時間？)</code></td><td style="text-align:left;"><code>maxPlayTimeInFPS</code></td></tr></tbody></table><p>まずこの値は <code>Math.max(値A, 値B)</code> という形になっています。 <code>Math.max()</code> は与えられた引数の中で一番大きい値を返す関数です。 ここでは第二引数が <code>0</code> になっているので、「第一引数が <code>0</code> 以上ならその値、<code>0</code> 未満なら <code>0</code>」という意味になります。 要は <code>0</code> が下限になるように値を制限しているだけです。</p><div class="tip custom-block"><p class="custom-block-title">TIP Math について</p><p><code>Math</code> は JavaScript の仕様で定義された値で、<code>max()</code> の他にも数学関連の関数や定数を提供しています。 最小値を返す <code>Math.min()</code> や、三角関数 sin() の値を求める <code>Math.sin()</code>, 円周率 π の近似値 <code>Math.PI</code> などが利用できます。</p></div><p>つまり <code>(残り時間？)</code> の本体は、 <code>Math.max()</code> の第一引数として書かれている <code>maxPlayTimeInFPS - Global_1.Global.gameCore.cntr</code> の部分です。 この減算の式が「残り時間」であるなら、それは最大プレイ時間から現在のプレイ時間を引くものでしょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (最大プレイ時間？) - (現在のプレイ時間？)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">maxPlayTimeInFPS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr</span></span></code></pre></div><p>しかし <code>maxPlayTimeInFPS</code> という名前が示唆するとおり、この式の単位は「秒」ではなく「フレーム数」になっています。 これは定義から確認できます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> maxPlayTimeInFPS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GameCore_1.GameCore.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_PLAYTIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps;</span></span></code></pre></div><p><code>MAX_PLAYTIME</code> は先ほど見た通り、<code>60</code> を代入する箇所が <code>GameCore.js</code> にありました。単位は秒でしょう。 <code>g.game.fps</code> は Akashic Engine の提供する変数で、「(このゲームの) 1 秒あたりのフレーム数 (FPS)」を表します。 その積は明らかに「フレーム数」です。</p><div class="tip custom-block"><p class="custom-block-title">TIP フレームと FPS</p><p>ゲームプログラムは通常、一定速度で画面の描画を繰り返しています。 また描画と同じ回数だけ、ゲームロジックの処理 (ボタンが押された時の処理や、敵との衝突判定、衝突した時の処理など) も行います。 この一回分の処理 (と描画) を行う時間を、<strong>1 フレーム</strong> と呼びます。フレームはゲーム内の時間の最小単位です。</p><p>多くのゲームでは、1 フレームは 1/60 秒です。つまり 1 秒間に 60 フレーム分の処理を行います。 60 は固定ではなく、より大きい値を設定で選べるゲームもありますし、逆にカジュアルなゲームでは 30 ということもあります。 この「1 秒あたりのフレーム数」を <strong>FPS</strong> (frame per seconds) と呼びます。</p><p>Akashic Engine のゲームでは、設定ファイル <code>game.json</code> の <code>&quot;fps&quot;</code> の項目で FPS を指定できます。 ここで改造している Galaxy Wars では、 <code>30</code> になっています。</p></div><p>この <code>maxPlayTimeInFPS</code> から引かれている <code>Global_1.Global.gameCore.cntr</code> も、 減算した結果も、単位は「フレーム数」ということになります。 「残り時間」にしては大きすぎる値だったのはこのためです。 ここまで <code>(残り時間？)</code> と書いてきたのは、正しくは <code>(残りフレーム数)</code> でした。</p><p>フレーム数を秒に換算するには、単に FPS で割るだけです。つまり <code>(残り時間)</code> は次の式で求まります。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ((全体フレーム数) - (経過フレーム数)) / FPS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxPlayTimeInFPS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps</span></span></code></pre></div><p>ただし <code>maxPlayTimeInFPS</code> は <code>GameCore_1.GameCore.MAX_PLAYTIME</code> に <code>g.game.fps</code> を掛けた値だったので、無駄を省くと次のように書けます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (全体プレイ時間) - ((経過フレーム数) / FPS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GameCore_1.GameCore.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_PLAYTIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps)</span></span></code></pre></div><p>さらに、この式は除算 <code>/</code> が入っているので整数にならないことがあります (0.33333333... など)。 画面上の残り時間は整数で表示したいので、小数部を切り捨てる関数 <code>Math.floor()</code> を使います。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Math.floor((全体プレイ時間) - ((経過フレーム数) / FPS))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GameCore_1.GameCore.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_PLAYTIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps)</span></span></code></pre></div><p>これを改めて <code>PlayerStatus.js</code> に反映しましょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlayerStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scoreLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SCORE &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;00000&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.player.score).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.scoreLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line diff remove"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> maxPlayTimeInFPS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GameCore_1.GameCore.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_PLAYTIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps; </span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TIME &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxPlayTimeInFPS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TIME &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GameCore_1.GameCore.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_PLAYTIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>利用箇所のなくなった変数 <code>maxPlayTimeInFPS</code> の定義も削除しています。</p><p>改めて <code>akashic sandbox</code> で実行すると、次のような表示になります。</p>`,22),U=s("img",{src:C,width:"450"},null,-1),Q=l(`<p>これで「残り時間」を表示することができました。</p><h2 id="解説" tabindex="-1">解説 <a class="header-anchor" href="#解説" aria-label="Permalink to &quot;解説&quot;">​</a></h2><h3 id="timelabel-とエンティティ" tabindex="-1">timeLabel とエンティティ <a class="header-anchor" href="#timelabel-とエンティティ" aria-label="Permalink to &quot;timeLabel とエンティティ&quot;">​</a></h3><p>今回使った <code>this.timeLabel</code> は「<code>.text</code> に文字列を代入するとそれがゲーム画面に反映される」ものになっていました。 これが何なのか、定義箇所を見てみましょう。</p><p>先ほどから改造している <code>PlayerStatus.js</code> には次のようなコードがあります。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlayerStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timeLabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scene: Global_1.Global.gameCore.scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        font: Global_1.Global.bmpFont,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fontSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        x: g.game.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>代入されているのは <code>new g.Label(...)</code> した値だとわかります。</p><p><code>new</code> は JavaScript の機能で、</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> クラス</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(引数)</span></span></code></pre></div><p>の形式で書くと、その <code>クラス</code> のインスタンスを新たに作る、という意味になります。</p><div class="tip custom-block"><p class="custom-block-title">TIP クラスとインスタンス</p><p><strong>クラス</strong> と <strong>インスタンス</strong> は、 JavaScript に限らないプログラミング用語です。 その詳細はここでは書ききれないのですが、しばしば次のように説明されます。</p><table tabindex="0"><thead><tr><th style="text-align:left;">用語</th><th style="text-align:left;">意味合い</th></tr></thead><tbody><tr><td style="text-align:left;">関数</td><td style="text-align:left;">処理をひとまとめにしたもの</td></tr><tr><td style="text-align:left;">インスタンス</td><td style="text-align:left;">データとそれを操作する関数をひとまとめにしたもの</td></tr><tr><td style="text-align:left;">クラス</td><td style="text-align:left;">インスタンスを作るための雛形・テンプレート</td></tr></tbody></table><p>「データとそれを操作する関数」と書くと抽象的ですが、たとえば「RPG の街のキャラクター」を考えるとわかりやすいかもしれません。 RPG のキャラクターには現在位置という「データ」があるはずです。 キャラクターは街の中を歩くので、現在位置を変更する (移動する) 「関数」も必要でしょう。 この時、データと関数をばらばらに扱うより、「キャラクター」という単位でまとめてしまおう、 というのがクラスやインスタンスを考えるモチベーションです。</p><p>そうしてデータと関数をまとめたものがインスタンスで、クラスはその雛形・テンプレートのようなものだと考えてください。 上の例で言えば、まさに「RPG の街のキャラクター」をクラスとしてプログラムすることができます。 この場合インスタンスは、実際に登場する各キャラクターです。 各キャラクターというインスタンスは、同じ「RPG の街のキャラクター」という雛形から生成され、 しかしそれぞれが異なるキャラ画像・現在位置・話す内容などのデータを持ちます。</p><p>Akashic Engine の機能の一部は、クラスとして提供されています。</p></div><p>ここでクラスとして指定されている <code>g.Label</code> は (<code>g.</code> で始まることから分かるとおり) Akashic Engine の機能で、「文字列を表示するエンティティ」です。</p><p>Akashic Engine では「画面に表示するもの」を <strong>エンティティ</strong> と呼んでいて、 <code>g.Label</code> はその一つです。 他には画像を表示する <code>g.Sprite</code>, パラパラアニメを表示するための <code>g.FrameSprite</code> や、 単に複数のエンティティをまとめるための <code>g.E</code> などがあります。</p><h3 id="残り時間のリアルタイム更新" tabindex="-1">残り時間のリアルタイム更新 <a class="header-anchor" href="#残り時間のリアルタイム更新" aria-label="Permalink to &quot;残り時間のリアルタイム更新&quot;">​</a></h3><p>今回の改造は、最終的にほぼ <code>this.timeLabel.text</code> に代入する値を変えただけのものになりました。 動作確認でわかる通り、これだけで「残り時間表示がリアルタイムに更新される」処理になっています。 特に「残り時間の変化」を検出しているわけでもないのに、なぜこれでリアルタイムに反映されるのか、不思議に思われるかもしれません。</p><p>これは今回変更した <code>PlayerStatus.js</code> のコード、 <code>class PlayerStatus</code> の <code>update()</code> 部分が都合よく「毎フレーム必ず実行される処理」になっていたためです。 残り時間 (の秒数) が変化していてもしていなくても、毎フレーム必ず表示を更新するので、結果的にリアルタイムで残り時間が反映されているというわけです。</p><p>Akashic Engine を含め大抵のゲームエンジンには「1 フレーム分の時間が経過する度に何か処理を実行する」機能があります。 もし <code>PlayerStatus.js</code> に都合のよい箇所がなければ、この機能を使って毎フレーム処理させるところから書く必要がありました。</p><h2 id="残り時間ゲージの演出を加える" tabindex="-1">残り時間ゲージの演出を加える <a class="header-anchor" href="#残り時間ゲージの演出を加える" aria-label="Permalink to &quot;残り時間ゲージの演出を加える&quot;">​</a></h2><p>残り時間の値がわかるようになったので、もう一つ別のエンティティの紹介を兼ねて、残り時間ゲージの演出も少し変えてみましょう。</p><p>残り時間がわずかなことにプレイヤーに伝わりやすいよう、</p><ul><li>初期状態ではゲージを緑にする</li><li>残り時間が少なくなったら白に変え、さらに明滅する</li></ul><p>ようにしてみます。</p><p>先ほどの改造で探したとおり、時間ゲージの処理は <code>gameScene.js</code> にありました。 変数 <code>timeGauge</code> が現れる箇所を中心に、改めて抜き出すと次のようになります。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createGameScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ game: g.game });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.onLoad.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeGaugeWidth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.width;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeGauge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FilledRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            width: timeGaugeWidth,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cssColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeGauge);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scene.onUpdate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            timeGauge.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeGaugeWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remainTimeRate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            timeGauge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="初期状態を緑色にする" tabindex="-1">初期状態を緑色にする <a class="header-anchor" href="#初期状態を緑色にする" aria-label="Permalink to &quot;初期状態を緑色にする&quot;">​</a></h3><p><code>timeGauge</code> の代入箇所を見ると、この時間ゲージの実態が <code>g.FilledRect</code> だとわかります。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeGauge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FilledRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            width: timeGaugeWidth,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cssColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span></code></pre></div><p><code>g.FilledRect</code> は Akashic Engine の提供するエンティティの一種です。 名前のとおり、指定した色で塗りつぶされた (filled) 矩形 (rect) を描画するエンティティになっています。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本格的なゲームでは、画面に表示されるものは大抵が画像か文字になるので、 <code>g.FilledRect</code> はそれほど多用されるエンティティではありません。 今回のようなシンプルなゲージや、背景を半透明の黒で塗りつぶしたい場合などに登場します。</p></div><p><code>cssColor: &quot;Red&quot;</code> という部分で、赤色が指定されているのだろうと推測できます。</p><p><code>g.FilledRect</code> の <code>cssColor</code> には、CSS の色指定と同じ形で色を与えることができます。 これには <code>&quot;Red&quot;</code> のような色名の他、 <code>rgb(0, 255, 0)</code> のような RGB 値での指定が含まれます。</p><p>背景に合わせて少し暗めの緑色にしておきます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeGauge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FilledRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            scene: scene,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            width: timeGaugeWidth,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line diff remove"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cssColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cssColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rgb(0, 160, 0)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP RGB と CSS の色指定</p><p>RGB は、光の三原色 (赤 red, 緑 green, 青 blue) の頭文字をとったものです。 コンピュータではしばしばこの三つの成分の組で任意の色を指定します。</p><p>CSS の色指定の場合、R, G, B それぞれ 0 以上 255 以下の値をとることができます。 <code>rgb(赤成分, 緑成分, 青成分)</code> で指定するので、たとえば <code>rgb(255, 255, 255)</code> は白に、 <code>rgb(128, 0, 255)</code> は青みの強い紫になります。</p></div><h3 id="残り時間が少ない時の演出を加える" tabindex="-1">残り時間が少ない時の演出を加える <a class="header-anchor" href="#残り時間が少ない時の演出を加える" aria-label="Permalink to &quot;残り時間が少ない時の演出を加える&quot;">​</a></h3><p>残り時間が少なくなった時の演出は、時間ゲージが縮んでいく処理と同じ場所に書けばよさそうです。 この処理は毎フレーム実行されているので、都度チェックして処理すればよいはずです。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scene.onUpdate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            timeGauge.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeGaugeWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remainTimeRate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            timeGauge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span></code></pre></div><p>残り時間の割合 <code>remainTimeRate</code> が既に求められているので、これが 0.2 (20%) を切ったら色を変え、0.1 (10%) を切ったら明滅するようにします。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scene.onUpdate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> maxPlayTimeInFPS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GameCore_1.GameCore.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_PLAYTIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.fps;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> remainTimeRate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxPlayTimeInFPS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxPlayTimeInFPS;</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (remainTimeRate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // 残り時間が 10% 未満なら明滅させる</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              timeGauge.opacity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.75</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (remainTimeRate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // 残り時間が 20% 未満なら白に変える</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              timeGauge.cssColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;white&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            timeGauge.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeGaugeWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remainTimeRate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            timeGauge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span></code></pre></div><p>if, else if は <a href="./enhance-recover.html#条件分岐-if-else-文">改造: 回復アイテムを強化してみる</a> の「条件分岐: if...else 文」でも登場したので、紹介が必要なのは明滅処理の部分でしょう。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 残り時間が 10% 未満なら明滅させる</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timeGauge.opacity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Global_1.Global.gameCore.cntr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.75</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>timeGauge.opacity</code> の <code>.opacity</code> は、エンティティ共通の機能で、不透明度を表します。 0 を代入すると透明に、0.5 なら半透明、1 なら完全不透明になります。 この値を毎フレーム変化させて、不透明と半透明の間をいったりきたりすることで、明滅を表現しています。</p><p>代入されている左辺の式は次のような形になっています。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.75</span></span></code></pre></div><p><code>Math.sin()</code> は三角関数 sin(θ) を求める関数です。 sin(θ) は引数 θ の値に応じて -1 から 1 の範囲をとる関数で、θ を増やしていくと以下のように振動します。</p>`,45),$=s("img",{src:m,width:"400"},null,-1),z=s("p",null,[i("この sin(θ) である "),s("code",null,"Math.sin()"),i(" に、 "),s("code",null,"Global_1.Global.gameCore.cntr"),i(" (経過フレーム数) を含む値を与えることで、 時間経過で値が振動するようにしています。そしてこの振動を不透明度として使ってゲージを明滅させているというわけです。")],-1),K=s("p",null,[s("code",null,"Math.sin(...) / 4 + 0.75"),i(" の後半の "),s("code",null,"/ 4 + 0.75"),i(" の部分は、不透明度に代入するために値を調整しています。 sin(θ) は -1 以上 1 以下の値をとるので、4 で割ると -0.25 以上 0.25 以下の値になります。 これに 0.75 を足すと、0.5 以上 1.0 以下の範囲で振動する値になります。")],-1),Z=s("p",null,"実際に動かしてみると、ゲージが白くなり明滅する様子が確認できます。",-1),ss=s("img",{src:b,width:"400"},null,-1),is=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"TIP 処理の無駄"),s("p",null,"この改造では、残り時間の割合が 0.1 以上 0.2 未満の間、毎フレームずっとゲージの色を白に設定しつづけます。 実害はありませんが、これは効率のいい処理ではありません。色は一回変えればそれで十分だからです。"),s("p",null,"たとえばゲーム開始直後に「48 秒後に一回だけ実行する処理」を登録して、 その処理の中でゲージの色を変えることができれば、その方が効率的です。 実際 Akashic Engine はそのようなタイマー処理の機能も提供しています。"),s("p",null,"ここでは簡単のため、多少の効率は気にせず改造の単純さを優先しています。")],-1);function as(ts,ns,ls,hs,es,ps){const a=p("CaptionedFigure");return k(),e("div",null,[D,_,t(a,{caption:"ハイスコア表示"},{default:n(()=>[B]),_:1}),v,s("details",q,[f,G,x,t(a,{caption:"エクスプローラーの検索機能"},{default:n(()=>[P]),_:1}),S,t(a,{caption:"エクスプローラーのオプション"},{default:n(()=>[T,j]),_:1}),I,t(a,{caption:"フォルダーオプションダイアログの「検索」タブ"},{default:n(()=>[M]),_:1}),L,t(a,{caption:"検索した結果"},{default:n(()=>[w]),_:1}),R,W]),V,t(a,{caption:"残り時間ゲージ"},{default:n(()=>[H]),_:1}),X,t(a,{caption:"画面右下にエラーが表示された状態"},{default:n(()=>[Y]),_:1}),N,t(a,null,{default:n(()=>[J]),_:1}),O,t(a,null,{default:n(()=>[U]),_:1}),Q,t(a,{caption:"横軸 θ, 縦軸 sin(θ) のグラフ"},{default:n(()=>[$]),_:1}),z,K,Z,t(a,null,{default:n(()=>[ss]),_:1}),is])}const Es=h(A,[["render",as]]);export{ds as __pageData,Es as default};
