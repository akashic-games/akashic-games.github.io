import{_ as s,o as a,c as l,Q as t}from"./chunks/framework.f1c0562b.js";const y=JSON.parse('{"title":"akashic scan","description":"","frontmatter":{},"headers":[],"relativePath":"reference/tool/akashic-cli/scan.md","filePath":"reference/tool/akashic-cli/scan.md"}'),e={name:"reference/tool/akashic-cli/scan.md"},o=t('<h1 id="akashic-scan" tabindex="-1">akashic scan <a class="header-anchor" href="#akashic-scan" aria-label="Permalink to &quot;akashic scan&quot;">​</a></h1><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">akashic</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">scan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">targe</span><span style="color:#E1E4E8;">t</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">akashic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">scan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">targe</span><span style="color:#24292E;">t</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>game.json に記述されているゲームのアセットや各種ライブラリ情報を更新します。 &lt;target&gt; に指定できる文字列は以下のとおりです:</p><ul><li>asset &lt;subtarget&gt; <ul><li>game.json に記述されたアセット情報を更新します。(&lt;subtarget&gt; の内容は後述)</li></ul></li><li>globalScripts <ul><li>カレントディレクトリの node_modules/ 以下のファイル一覧を game.json に加えます。</li><li>通常使用する必要はありません。akashic install や uninstall を利用してください。</li></ul></li></ul><p>game.json のアセット情報を更新する scan asset コマンドは、もう一つの引数 &lt;subtarget&gt; によって更新する情報を制御することができます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">akashic</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">scan</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">asset</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">subtarge</span><span style="color:#E1E4E8;">t</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">akashic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">scan</span><span style="color:#24292E;"> </span><span style="color:#032F62;">asset</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">subtarge</span><span style="color:#24292E;">t</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>&lt;subtarget&gt; に指定できる文字列とそれぞれの動作は次のとおりです:</p><ul><li>image <ul><li>image/ ディレクトリ以下の画像素材を列挙し、アセット情報を更新します。</li></ul></li><li>text <ul><li>text/ ディレクトリ以下のテキスト素材を列挙し、アセット情報を更新します。</li></ul></li><li>audio <ul><li>audio/ ディレクトリ以下の音素材を列挙し、アセット情報を更新します。</li></ul></li><li>script <ul><li>script/ ディレクトリ以下のスクリプト素材を列挙し、アセット情報を更新します。</li></ul></li><li>(なし) <ul><li>上記すべてを行います。</li><li>さらに assets/ ディレクトリ以下の全種類の素材を列挙してアセット情報を更新します。</li></ul></li></ul><p>game.json の管理しているアセット情報には、ファイルパスだけでなく以下のような情報も含まれます。 したがって素材の増減時だけでなく、これらの変更時にも scan asset コマンドを実行してください。</p><ul><li>画像素材の幅・高さ</li><li>(将来のバージョンにおいて) 音素材の再生時間</li></ul><p>scan asset コマンドは、新たに追加するアセット定義に対し、type に応じて以下の初期値を与えます。 (値の詳細は<a href="./../../manifest/game-json.html">リファレンス » game.json の仕様</a>を参照してください)</p><ul><li>&quot;type&quot;: &quot;script&quot; <ul><li>&quot;global&quot;: true</li></ul></li><li>&quot;type&quot;: &quot;audio&quot; <ul><li>&quot;systemId&quot;: &quot;sound&quot;</li></ul></li></ul><p>scan asset コマンドによる素材の列挙は、ディレクトリを再帰的に検索します。つまり、image/ のサブディレクトリに置かれた画像素材なども、列挙されアセット情報に登録されます。</p><h3 id="アセット-id" tabindex="-1">アセット ID <a class="header-anchor" href="#アセット-id" aria-label="Permalink to &quot;アセット ID&quot;">​</a></h3><p>Akashic コンテンツから各アセットにアクセスするには、アセットを識別する ID (アセット ID) またはファイルパス (Akashic Engine v3 以降) を利用します。</p><p>scan asset コマンドは、アセット ID として通常「ファイル名から拡張子を取り除いたもの」を登録します。</p><blockquote><p>このため audio/title.ogg と script/title.js は、同じ &quot;title&quot; という ID となって衝突し、エラーになることに注意してください。 この制限を回避するため、 Akashic Engine v3 以降では assets/ ディレクトリ (後述) を利用できます。</p></blockquote><p>またアセットのファイル名は以下の条件を全て満たす必要があります。</p><ul><li>半角英数字、アンダースコア &quot;_&quot;、ドル記号 &quot;$&quot; のみで構成されている</li><li>英字で始まっている</li></ul><p>ユーザは game.json を直接編集して、アセット ID を任意に変更することができます。 akashic コマンドはファイルパスを基準に操作を行うため、たとえば画像素材の ID を変更した後にその画像のサイズを変更しても、適切に game.json の幅・高さ情報が更新されます。</p><h3 id="assets-ディレクトリとアセットパス" tabindex="-1">assets/ ディレクトリとアセットパス <a class="header-anchor" href="#assets-ディレクトリとアセットパス" aria-label="Permalink to &quot;assets/ ディレクトリとアセットパス&quot;">​</a></h3><p>assets/ ディレクトリは、上述のとおり全ての種類の素材を置くことができるディレクトリです。</p><p>また scan asset コマンドは、assets/ ディレクトリに限り、アセット ID を「ファイル名から拡張子を取り除いたもの」ではなく、ユニークな自動生成の値にします。 そのため title.ogg と title.png など、名前が重複するアセットもそのまま置くことができます。</p><p>これによって他のディレクトリよりも柔軟なフォルダ構造で素材を管理できます。</p><p>ただし ID が自動生成で不定な値になるので、ゲーム内からアセット ID でアクセスすることはできなくなります。 Akashic Engine v3 以降で利用できる <a href="/tutorial/v3/assetPaths.html">Akashic Engine 入門 » ファイルパスによるアセットアクセス</a> を利用してください。</p>',25),n=[o];function p(i,c,r,u,h,d){return a(),l("div",null,n)}const E=s(e,[["render",p]]);export{y as __pageData,E as default};
