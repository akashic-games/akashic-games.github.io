import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.459ab1e9.js";const f=JSON.parse('{"title":"(ニコ生ゲーム) 放送者の端末でのみ処理する","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/multiplay/streamer.md","filePath":"reverse-reference/v3/multiplay/streamer.md"}'),p={name:"reverse-reference/v3/multiplay/streamer.md"},o=l(`<h1 id="ニコ生ゲーム-放送者の端末でのみ処理する" tabindex="-1">(ニコ生ゲーム) 放送者の端末でのみ処理する <a class="header-anchor" href="#ニコ生ゲーム-放送者の端末でのみ処理する" aria-label="Permalink to &quot;(ニコ生ゲーム) 放送者の端末でのみ処理する&quot;">​</a></h1><p>ニコ生ゲーム環境において、放送者のみ処理を行うには放送者の ID を取得、比較することにより実現できます。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> firstJoinedPlayerId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 一番最初にJoinした人を覚える変数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">g.game.onJoin.</span><span style="color:#B392F0;">addOnce</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ニコ生ゲームにおいては放送者が一人だけ Join してくるため、その人の ID を放送者とする</span></span>
<span class="line"><span style="color:#E1E4E8;">  firstJoinedPlayerId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.player.id;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">scene.onUpdate.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">firstJoinedPlayerId) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (g.game.selfId </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> firstJoinedPlayerId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 放送者の処理</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 参加者の処理</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> firstJoinedPlayerId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 一番最初にJoinした人を覚える変数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">g.game.onJoin.</span><span style="color:#6F42C1;">addOnce</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ニコ生ゲームにおいては放送者が一人だけ Join してくるため、その人の ID を放送者とする</span></span>
<span class="line"><span style="color:#24292E;">  firstJoinedPlayerId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.player.id;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">scene.onUpdate.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">firstJoinedPlayerId) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (g.game.selfId </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> firstJoinedPlayerId) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 放送者の処理</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 参加者の処理</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><p>マルチプレイゲームの流れとして、ゲームに誰かが Join します。その時の処理を追加するコードが凡例の下記部分です。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">g.game.onJoin.</span><span style="color:#B392F0;">addOnce</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  firstJoinedPlayerId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.player.id;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">g.game.onJoin.</span><span style="color:#6F42C1;">addOnce</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  firstJoinedPlayerId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.player.id;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>マルチプレイのニコ生ゲームでは、実行開始直後に <code>JoinEvent</code> が送信されます。この <code>JoinEvent</code> は必ず放送者のプレイヤー ID 情報を持ちます。また他に <code>JoinEvent</code> が送信されることはありません。そのため、最初に Join した ID を放送者の ID とすることができます。放送者の ID を比較することにより放送者のみの処理を行うことができます。</p><p>凡例のコードの下記部分で、放送者の ID と <code>g.game.selfId</code> を比較し、等しい場合には放送者としての処理を行い、異なる場合に参加者の処理を行います。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (g.game.selfId </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> firstJoinedPlayerId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 放送者の処理</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 参加者の処理</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (g.game.selfId </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> firstJoinedPlayerId) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 放送者の処理</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 参加者の処理</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>g.game.selfId</code> は「プレイヤーごとに異なる値」です。そのため これを参照する条件分岐内の処理は <a href="./local-entity.html#ローカル処理とその制限">ローカル処理</a> になる ことに注意してください。</p><p>この if 文のブロックは、明らかにプレイヤーによって実行されるかどうかが異なります。 そのためローカルイベントに対する処理と同じく、「プレイヤー間で間接的に共有されている実行状態」を破壊してはいけません。 たとえば <code>g.game.random</code> を利用したり、非ローカルなエンティティを生成・操作すると、他プレイヤーと実行状態がずれてしまい、マルチプレイが破綻します。</p><h2 id="関連情報" tabindex="-1">関連情報 <a class="header-anchor" href="#関連情報" aria-label="Permalink to &quot;関連情報&quot;">​</a></h2><ul><li><a href="/tutorial/v3/multiplay/join.html">Join と Leave</a></li></ul>`,14),e=[o];function c(t,r,E,i,y,d){return a(),n("div",null,e)}const u=s(p,[["render",c]]);export{f as __pageData,u as default};
