import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.459ab1e9.js";const v=JSON.parse('{"title":"シーンに紐づけて情報を保持する","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/logic/scene-vars.md","filePath":"reverse-reference/v3/logic/scene-vars.md"}'),o={name:"reverse-reference/v3/logic/scene-vars.md"},l=n(`<h1 id="シーンに紐づけて情報を保持する" tabindex="-1">シーンに紐づけて情報を保持する <a class="header-anchor" href="#シーンに紐づけて情報を保持する" aria-label="Permalink to &quot;シーンに紐づけて情報を保持する&quot;">​</a></h1><p>シーンに紐づけて情報を保持するには、 <code>g.Scene#vars</code> を利用します。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// value に値を保持</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.vars.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// value に値を保持</span></span>
<span class="line"><span style="color:#24292E;">scene.vars.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span></code></pre></div><p>ゲーム全体で情報を保持する場合は、<a href="./game-vars.html"><code>g.game.vars</code></a>を利用してください。</p><h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><p><code>g.Scene#vars</code> はゲームエンジンのロジックからは参照されず、ゲーム開発者は任意の目的で使用できます。初期値は空のオブジェクトです。<code>g.Scene#vars</code> に保持した情報は <code>g.Scene#destroy()</code> 時に破棄されます。</p><h2 id="関連情報" tabindex="-1">関連情報 <a class="header-anchor" href="#関連情報" aria-label="Permalink to &quot;関連情報&quot;">​</a></h2><ul><li><a href="/akashic-engine/v3/classes/Scene.html#vars">API リファレンス</a></li></ul>`,9),c=[l];function p(r,t,i,d,y,h){return a(),e("div",null,c)}const _=s(o,[["render",p]]);export{v as __pageData,_ as default};
