import{_ as s,a as i}from"./chunks/pixelmplus.D48rxj8_.js";import{_ as a,c as t,o as n,a3 as e}from"./chunks/framework.DaCD_bki.js";const p="/assets/bmpfont-example-ss.s6uStV-T.png",m=JSON.parse('{"title":"ビットマップフォントを使う","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v2/bitmap-font.md","filePath":"tutorial/v2/bitmap-font.md"}'),l={name:"tutorial/v2/bitmap-font.md"},h=e('<h1 id="ビットマップフォントを使う" tabindex="-1">ビットマップフォントを使う <a class="header-anchor" href="#ビットマップフォントを使う" aria-label="Permalink to &quot;ビットマップフォントを使う&quot;">​</a></h1><p>このページのサンプルコードを<a href="https://github.com/akashic-contents/website-contents/releases/latest/download/tutorial-samples-v2-sample-bitmap-font.zip" target="_blank" rel="noreferrer">ダウンロード</a></p><h2 id="bitmap-font" tabindex="-1">ビットマップフォント <a class="header-anchor" href="#bitmap-font" aria-label="Permalink to &quot;ビットマップフォント {#bitmap-font}&quot;">​</a></h2><p>前節では、ダイナミックフォント (<code>g.DynamicFont</code>) を使って文字列の表示を行いました。 これはシステムにインストールされているフォントを利用するものでした。 もう一つの選択肢として、Akashic Engine はビットマップフォントを提供しています。</p><p>ビットマップフォントは、事前に準備した文字画像を利用するフォントです。 ダイナミックフォントとは一長一短の関係にあります。</p><table tabindex="0"><thead><tr><th style="text-align:right;"></th><th style="text-align:center;">ダイナミックフォント</th><th style="text-align:center;">ビットマップフォント</th></tr></thead><tbody><tr><td style="text-align:right;"><strong>事前準備</strong></td><td style="text-align:center;">不要</td><td style="text-align:center;">必要<br>(画像とグリフ情報が必要)</td></tr><tr><td style="text-align:right;"><strong>使用できる文字</strong></td><td style="text-align:center;">大半の文字</td><td style="text-align:center;">画像に含まれるもののみ</td></tr><tr><td style="text-align:right;"><strong>文字のデザイン</strong></td><td style="text-align:center;">システムに依存</td><td style="text-align:center;">画像で自由に作成可</td></tr></tbody></table><p>使う可能性のある文字が事前に分かっている場合 (スコア表示など) には、 ビットマップフォントを使うことで、任意のデザインで動作環境を問わず文字を描画できます。</p><p>たとえば Akashic Engine で作成された『<a href="https://github.com/akashic-contents/akashic-trash" target="_blank" rel="noreferrer">ゴミをゴミ箱に入れるだけのゲーム</a>』(以下の画像)では、画面左上の「TIME」の数値や右下「SCORE」の数値部分がビットマップフォントで作られています。</p><p><img src="'+s+'" alt="『ゴミを〜』のスクリーンショット"></p><p>このゲームでは、「SCORE」の部分は固定の画像ですが、スコア自体は値に応じて変動するため固定の画像では描画できません。0〜9 の画像をフォントとして扱うことでこの描画が実現されています。</p><h2 id="bmpfont-generator" tabindex="-1">bmpfont-generator <a class="header-anchor" href="#bmpfont-generator" aria-label="Permalink to &quot;bmpfont-generator {#bmpfont-generator}&quot;">​</a></h2><p>デザイン性の高いビットマップフォント用画像は、画像編集ソフトで作成することになるでしょう。 一方で、既存のフォントのデザインをそのまま利用したい場合も考えられます。 この場合には、Akashic Engine の周辺ツールとして提供されている bmpfont-generator が便利です。</p><p><strong>bmpfont-generator</strong> は、TrueType フォント (.ttf) ファイルから指定された文字の画像を生成するツールです。また Akashic Engine のビットマップフォントとして使う場合に必要になる、グリフ情報のデータを JSON 形式で同時に生成できます。</p><p>たとえば <a href="http://itouhiro.hatenablog.com/entry/20130602/font" target="_blank" rel="noreferrer">PixelMplus</a> フォントから次のような画像を生成できます 。</p><p><img src="'+i+`" alt="文字画像の例"></p><p>このチュートリアルでは、bmpfont-generator の出力でビットマップフォントを生成し文字列を表示します。</p><p>bmpfont-generator は次のコマンドでインストールできます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @akashic/bmpfont-generator</span></span></code></pre></div><p>これによりコマンド <code>bmpfont-generator</code> が使用できるようになります。 さらに次のファイルを用意します。</p><ul><li>(a) TrueType フォント (.ttf) ファイル</li><li>(b) 画像に含めたい文字が書かれたテキストファイル</li></ul><p>ここでは例として、(a) に上記 PixelMplus の PixelMplus10-Regular.ttf を、 (b) に次の内容の chars.txt を使います。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをんゔがぎぐげござじずぜぞだぢづでどばびぶべぼぱぴぷぺぽぁぃぅぇぉゃゅょっーアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンヴガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポァィゥェォャュョッー１２３４５６７８９０！”＃＄％＆’（）＝｜＠「」『』｀＋＊；：、。，．＜＞・？＿</span></span></code></pre></div><p>これらを置いたディレクトリで次のコマンドを実行すると、同じディレクトリに画像 font.png と、グリフ情報 font_glyphs.json が生成されます。(上記の画像はこの font.png です)</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bmpfont-generator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./PixelMplus10-Regular.ttf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./font.png</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chars.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -F</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#555555&#39;</span></span></code></pre></div><p>コマンド中のファイル名部分は、用意したファイルに合わせて変更してください。</p><p>なおここで <code>-H</code> は文字のサイズ (ピクセル単位) を、 <code>-F</code> は文字色 (<code>g.FilledRect</code> や CSS の色と同じ形式) を指定するオプションです。(すなわち高さ 20 ピクセル、色が暗めのグレー (#555555) を指定しています)</p><p>その他 bmpfont-generator のオプションの詳細は、<a href="/reference/tool/bmpfont-generator.html">bmpfont-generator の仕様</a> を参照してください。</p><blockquote><p>bmpfont-generator の利用にあたっては、 <strong>フォントのライセンスに注意してください</strong> 。</p><p>特に商用 (有償) のフォントでは、ライセンスによっては 「フォントの代替として機能するようなもの」を作成しての利用が許諾されていない場合があります。 Akashic Engine のビットマップフォントはこれに該当する可能性があります。</p></blockquote><h2 id="usage" tabindex="-1">コンテンツでの利用 <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;コンテンツでの利用 {#usage}&quot;">​</a></h2><p>出力された文字画像を Akashic のゲームで利用するには、ファイルを game.json にアセットとして登録し、ゲームから読み込めるようにする必要があります。</p><p><code>akashic init</code> コマンドで生成した Akashic ゲームであれば、文字画像と JSON ファイルをそれぞれ image/, text/ ディレクトリに置いて <code>akashic scan asset</code> を実行すると登録されます。</p><p>登録後、以下のようなコードでビットマップフォントを生成できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上で生成した font.png と font_glyphs.json に対応するアセットを取得</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fontAsset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().assets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fontGlyphAsset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().assets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font_glyphs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// テキストアセット (JSON) の内容をオブジェクトに変換</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> glyphData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontGlyphAsset.data);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ビットマップフォントを生成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BitmapFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  src: fontAsset,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  map: glyphData.map,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  defaultGlyphWidth: glyphData.width,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  defaultGlyphHeight: glyphData.height,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  missingGlyph: glyphData.missingGlyph</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><code>map</code>, <code>defaultGlyphWidth</code>, <code>defaultGlyphHeight</code> などが「画像のどこに何の文字があるか」を指定する情報です。 これらの値は、画像編集ソフトで文字画像を自作した場合は自力で指定する必要があります。 この例のように bmpfont-generator が生成したグリフ情報があれば、それをそのまま与えることができます。</p><p>TypeScript の場合、アセットは <code>g.game.scene().assets[&quot;font&quot;] as g.ImageAsset</code> のように明示的にキャストする必要があります。</p><p>ビットマップフォントは、ダイナミックフォントと同じく <code>g.Label</code> の <code>font</code> プロパティに指定して利用できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene: g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;「こんにちは、アカシックエンジンです」&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fontSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  font: font</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 画面中央に配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">label.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (g.game.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label.width) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">label.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (g.game.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label.height) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">label.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g.game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(label);</span></span></code></pre></div><p><img src="`+p+'" alt="ビットマップフォントを使ったスクリーンショット"></p>',38),k=[h];function r(g,d,o,E,c,y){return n(),t("div",null,k)}const f=a(l,[["render",r]]);export{m as __pageData,f as default};
