import{_ as s}from"./chunks/TutorialDemoContentElement.vue_vue_type_script_setup_true_lang.ca0eae9b.js";import{o as a,c as n,H as l,Q as p}from"./chunks/framework.f1c0562b.js";import"./chunks/PlaygroundElement.a7f5e5b9.js";const o="/assets/tutorial_breakout_ball_vector_1.fcfee340.png",e="/assets/tutorial_breakout_ball_vector_2.5748ab54.png",c="/assets/tutorial_breakout_ball_vector_3.5ba8302b.png",t="/assets/tutorial_breakout_paddle_ball_1.6fe825ca.png",r="/assets/tutorial_breakout_paddle_ball_2.44d01fc9.png",E="/assets/tutorial_breakout_paddle_ball_3.34f8e4f3.png",y="/assets/tutorial_breakout_paddle_limitation.74016081.png",d=p(`<h1 id="パドルとボールとの衝突判定" tabindex="-1">パドルとボールとの衝突判定 <a class="header-anchor" href="#パドルとボールとの衝突判定" aria-label="Permalink to &quot;パドルとボールとの衝突判定&quot;">​</a></h1><p>前章で、ボールとの衝突によりブロックを破壊することができるようになりました。 しかし現状だとボールの方向が常に一定です。 ゲームとしての戦略性や面白さを持たせるため、ボールの角度を変更できるようにしてみましょう。</p><h2 id="ボールの射出速度をベクトルに変更する" tabindex="-1">ボールの射出速度をベクトルに変更する <a class="header-anchor" href="#ボールの射出速度をベクトルに変更する" aria-label="Permalink to &quot;ボールの射出速度をベクトルに変更する&quot;">​</a></h2><p>本題へと移る前に、ボールの速度を設定している箇所を見てみます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        scene.onUpdate.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ball.x </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> vx;</span></span>
<span class="line"><span style="color:#E1E4E8;">            ball.y </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> vy;</span></span>
<span class="line"><span style="color:#E1E4E8;">            ball.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        scene.onUpdate.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            ball.x </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> vx;</span></span>
<span class="line"><span style="color:#24292E;">            ball.y </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> vy;</span></span>
<span class="line"><span style="color:#24292E;">            ball.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span></code></pre></div><p>今のコードはボールの速度を <code>vx</code>、 <code>vy</code> それぞれ独立した変数で管理しています。 これでは一般的に再利用性と拡張性が低くなります。</p><p>そこでボールの速度をベクトルを使って表現してみましょう。 ベクトルは、大きさと向きを持つ量を表現するための数学的な概念です。 通常ベクトルは矢印で表され、長さが大きさ、矢印の方向が向きを表します。 上記コードの場合、速度のベクトルは <code>(vx, vy)</code> すなわち <code>(8, 8)</code> と表すことができます。</p><p><img src="`+o+`" alt=""></p><p>ゲーム開発においては、オブジェクトの位置、速度、衝突検知などをベクトルで表現することはごく一般的です。 以降ではボールの速度をベクトルを使って表現します。</p><p>それではボールの速度 <code>vx</code>、 <code>vy</code> を定義している部分をベクトルで書き換えてみましょう。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line diff remove"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">; </span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">; </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> direction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        scene.onUpdate.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line diff remove"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">; </span></span>
<span class="line diff remove"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">; </span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> direction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        scene.onUpdate.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span></code></pre></div><p><code>direction</code> は2つの要素を持つベクトル配列で、1つ目の要素が <code>x</code> 方向、2つ目の要素が <code>y</code> 方向の大きさを示しています。</p><p>これは以前の処理と同じ結果となりますが、大きな違いがあります。 大きさと向きという独立した値から <code>vx</code>、 <code>vy</code> を算出している点です。</p><p>ただしまだ問題があります。 ボールを射出する方向をもう少し上にしたい、と考え以下のようにコードを書き換えます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line diff remove"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> direction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]; </span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> direction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        scene.onUpdate.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line diff remove"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> direction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]; </span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> direction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        scene.onUpdate.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span></code></pre></div><p>意図通り、以前よりも上の方に射出されるかと思います。 ですがボールの移動が若干速くなったように感じるかもしれません。</p><p>その原因はベクトルの大きさが増加したためです。</p><p><img src="`+e+'" alt=""></p><p><code>(1, 2)</code> のベクトルの大きさは <code>(1, 1)</code> のベクトルの大きさの約 1.58 倍になります。 したがって、ボールの速さも同様に約 1.58 倍に増加することになります。</p><p>ボールの速さを一定にしたまま方向を定めるにはどのようにすればよいでしょうか。 それは <strong>単位ベクトル</strong> によって解決します。</p><p><img src="'+c+`" alt=""></p><p>単位ベクトルとは大きさが 1 のベクトルのことをいいます。 任意の方向ベクトルを単位ベクトルに変換することで、常に速さが一定のボールの動きを実現できます。</p><p>単位ベクトルは任意の方向ベクトルをその大きさ (長さ) で割ることで得られます。これをベクトルの正規化といいます。 <code>(x, y)</code> のベクトルの大きさは <code>Math.sqrt(x * x + y * y)</code> で求めることができます。 <code>Math.sqrt()</code> は平方根を返す JavaScript の組み込みメソッドです。</p><p>それでは任意の <code>[x, y]</code> のベクトルを正規化する関数 <code>normalize()</code> を <code>scene.onUpdate</code> の直後に追加しましょう。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        scene.onUpdate.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vec</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">magnitude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">sqrt</span><span style="color:#E1E4E8;">(vec[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> vec[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> vec[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> vec[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (magnitude </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vec; </span><span style="color:#6A737D;">// 大きさが 0 の場合は正規化不可のため元のベクトルを返す</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [vec[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> magnitude, vec[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> magnitude];</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        }</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        scene.onUpdate.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">(</span><span style="color:#E36209;">vec</span><span style="color:#24292E;">) {</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">magnitude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">sqrt</span><span style="color:#24292E;">(vec[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> vec[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> vec[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> vec[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (magnitude </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vec; </span><span style="color:#6A737D;">// 大きさが 0 の場合は正規化不可のため元のベクトルを返す</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [vec[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> magnitude, vec[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> magnitude];</span></span>
<span class="line diff add"><span style="color:#24292E;">        }</span></span></code></pre></div><p>ボールの速度を定義している部分を以下のように書き換えます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line diff remove"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> direction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> direction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        scene.onUpdate.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line diff remove"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> direction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> direction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line diff remove"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        scene.onUpdate.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span></code></pre></div><p>ベクトルの正規化に伴い速さが若干小さくなるため、 <code>speed</code> の値を大きくしています。 <code>normalize([1, 1])</code> や <code>normalize([2, 1])</code> に変更してもボールの速さが変化しなくなることがわかります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ここでは物理学の用語として速度と速さを使っており、この二つは異なる概念であることに注意してください。 速度はベクトルであり、大きさ（速さ）と向き（方向）を持ちます。 速さは移動のスカラー量を表します。速さは大きさだけを示し、方向を持ちません。</p></div><h2 id="ボールの反射角度を変更する" tabindex="-1">ボールの反射角度を変更する <a class="header-anchor" href="#ボールの反射角度を変更する" aria-label="Permalink to &quot;ボールの反射角度を変更する&quot;">​</a></h2><p>本題に入ります。</p><p>今のままだとボールの角度が常に一定となっておりゲーム性がありません。 そこで、パドルとボールとが衝突したときにボールの角度を変更するようにしてみます。</p><p>今回はパドルとボールとが衝突した位置によって反射角度を変えてみましょう。 パドルの中央付近では上向き、右端では右向きの方向に反射させてみます。 ちょうどパドルが半円の形をしているようなイメージです。</p><p><img src="`+t+'" alt=""></p><p>どのように再現すればよいでしょう。 実は先ほどのベクトルを使えば簡単に解決できます。</p><p>まずパドルとボールとが衝突したときの座標を求めます。 これはそのまま</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(ball.x, ball.y)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(ball.x, ball.y)</span></span></code></pre></div><p>となります。</p><p>次に方向を決める基準点となる座標を以下のように設定します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(paddle.x, paddle.y </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> h)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(paddle.x, paddle.y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> h)</span></span></code></pre></div><p><code>h</code> は変数として自由に値を変更できるようにしておきます。 これらの関係を図に示すと以下のようになります。</p><p><img src="'+r+`" alt=""></p><p>図からも分かる通り <code>(パドルとボールとが衝突した座標) - (基準点の座標)</code> がそのままボールの反射速度の方向ベクトルとなることがわかります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(ball.x </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> paddle.x, ball.y </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> (paddle.y </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> h))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(ball.x </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> paddle.x, ball.y </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> (paddle.y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> h))</span></span></code></pre></div><p>これをコードにすると以下のようになります。 <code>scene.onUpdate</code> 内に追加してください。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        scene.onUpdate.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// パドルとボールとが衝突したとき</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">intersect</span><span style="color:#E1E4E8;">(ball, paddle)) {</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">                vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">vy;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">h</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">direction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">([ball.x </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> paddle.x, </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">(ball.y </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> (paddle.y </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> h))]);</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            ball.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        scene.onUpdate.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// パドルとボールとが衝突したとき</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">intersect</span><span style="color:#24292E;">(ball, paddle)) {</span></span>
<span class="line diff remove"><span style="color:#24292E;">                vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">vy;</span></span>
<span class="line diff add"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">h</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">;</span></span>
<span class="line diff add"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">direction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">([ball.x </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> paddle.x, </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">(ball.y </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> (paddle.y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> h))]);</span></span>
<span class="line diff add"><span style="color:#24292E;">                vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line diff add"><span style="color:#24292E;">                vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            ball.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span></code></pre></div><p>y 軸は下向きが正のため全体をマイナス (<code>-</code>) でくくっている点に注意してください。</p><p>上記コードでは <code>h</code> の値を 30 にしています。 以下の図からも分かるように <code>h</code> の値が大きくなるほど左右への角度が緩やかになります。 この値を色々変更してみて変化を確認してみてください。</p><p><img src="`+E+'" alt=""></p><h2 id="パドルの動きを制限する" tabindex="-1">パドルの動きを制限する <a class="header-anchor" href="#パドルの動きを制限する" aria-label="Permalink to &quot;パドルの動きを制限する&quot;">​</a></h2><p>パドルがブロック内や画面外に飛び出してしまうのを防ぐため、動かせる範囲を制限しましょう。</p><p><img src="'+y+`" alt=""></p><p>ブロックの横幅は <code>128</code>、パドルの中心から端までの距離は <code>paddle.width / 2</code> のため、ゲーム画面からこれらの値の合計値 <code>128 + paddle.width / 2</code> に移動を制限してみます。 パドルを動かしている部分に以下のコードを追加します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// スワイプでパドルが左右に動くようにする</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">paddleMargin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> paddle.width </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// ブロックの横幅＋パドルの中心から端までの距離</span></span>
<span class="line"><span style="color:#E1E4E8;">        scene.onPointMoveCapture.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            paddle.x </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> event.prevDelta.x;</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// パドルの移動範囲を制限</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (paddle.x </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> paddleMargin) {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                paddle.x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> paddleMargin;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (paddle.x </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> game.width </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> paddleMargin) {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                paddle.x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> game.width </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> paddleMargin;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            paddle.</span><span style="color:#B392F0;">modified</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// スワイプでパドルが左右に動くようにする</span></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">paddleMargin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> paddle.width </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// ブロックの横幅＋パドルの中心から端までの距離</span></span>
<span class="line"><span style="color:#24292E;">        scene.onPointMoveCapture.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">((</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            paddle.x </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> event.prevDelta.x;</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// パドルの移動範囲を制限</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (paddle.x </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> paddleMargin) {</span></span>
<span class="line diff add"><span style="color:#24292E;">                paddle.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paddleMargin;</span></span>
<span class="line diff add"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (paddle.x </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> game.width </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> paddleMargin) {</span></span>
<span class="line diff add"><span style="color:#24292E;">                paddle.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> game.width </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> paddleMargin;</span></span>
<span class="line diff add"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            paddle.</span><span style="color:#6F42C1;">modified</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span></code></pre></div><h2 id="ボールの制御" tabindex="-1">ボールの制御 <a class="header-anchor" href="#ボールの制御" aria-label="Permalink to &quot;ボールの制御&quot;">​</a></h2><p>現状のコードは簡略化のためボールが自動的に動くようになっています。 これを、プレイヤーの操作によって開始するように修正します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> direction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> isStarted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        scene.onPointUpCapture.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isStarted) {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                isStarted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            }</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">        });</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> direction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> isStarted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line diff add"><span style="color:#24292E;">        scene.onPointUpCapture.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isStarted) {</span></span>
<span class="line diff add"><span style="color:#24292E;">                isStarted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line diff add"><span style="color:#24292E;">            }</span></span>
<span class="line diff add"><span style="color:#24292E;">        });</span></span></code></pre></div><p><code>isStarted</code> はゲームが開始しているかを保持する真理値です。 この値が <code>true</code> の場合にボールを自動的に動くようにします。</p><p><code>scene.onPointUpCapture</code> は画面内でスワイプ操作を終了したときに通知されるトリガです。 <code>if (!isStarted)</code> の中では、スワイプ操作を終了したタイミングで <code>isStarted</code> を <code>true</code> に変更しています。 これにより、パドルをスワイプで操作し終えたタイミングでボールを発射し、ゲームを開始しています。</p><p>続いて <code>scene.onUpdate</code> 内のボールの移動処理を <code>isStarted</code> を使って制御します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        scene.onUpdate.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">            ball.x </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> vx;</span></span>
<span class="line diff remove"><span style="color:#E1E4E8;">            ball.y </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> vy;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isStarted) {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                ball.x </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> vx;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                ball.y </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> vy;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                ball.x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> paddle.x;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                ball.y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> paddle.y </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> paddle.height </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> ball.height </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// ボールが画面の左右に到達したとき</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((ball.x </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> game.width </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> ball.width </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (ball.x </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ball.width </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">vx;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// ボールが画面の上端に到達したとき</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ball.y </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ball.height </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">vy;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// ボールが画面の下端に到達したとき</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ball.y </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> game.height </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ball.height </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                isStarted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                vx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">                vy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> speed </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> direction[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line diff add"><span style="color:#E1E4E8;">            }</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">        scene.onUpdate.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line diff remove"><span style="color:#24292E;">            ball.x </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> vx;</span></span>
<span class="line diff remove"><span style="color:#24292E;">            ball.y </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> vy;</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isStarted) {</span></span>
<span class="line diff add"><span style="color:#24292E;">                ball.x </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> vx;</span></span>
<span class="line diff add"><span style="color:#24292E;">                ball.y </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> vy;</span></span>
<span class="line diff add"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line diff add"><span style="color:#24292E;">                ball.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paddle.x;</span></span>
<span class="line diff add"><span style="color:#24292E;">                ball.y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paddle.y </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> paddle.height </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> ball.height </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line diff add"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// ボールが画面の左右に到達したとき</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((ball.x </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> game.width </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> ball.width </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (ball.x </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ball.width </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">vx;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// ボールが画面の上端に到達したとき</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ball.y </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ball.height </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">vy;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// ボールが画面の下端に到達したとき</span></span>
<span class="line diff add"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ball.y </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> game.height </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ball.height </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line diff add"><span style="color:#24292E;">                isStarted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line diff add"><span style="color:#24292E;">                vx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line diff add"><span style="color:#24292E;">                vy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> direction[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line diff add"><span style="color:#24292E;">            }</span></span></code></pre></div><p><code>isStarted</code> が <code>false</code> のときはボールをパドルの上部に配置しておきます。 これによりパドルのスワイプ中にボールも同時に移動させています。</p><p>またボールが画面の下端に達したときに <code>isStarted</code> を <code>false</code> に設定することで、ゲームを再開できるようにします。 ボールの速度 <code>vx</code> <code>vy</code> も忘れずにリセットしておきます。</p><h2 id="実行例とソースコード" tabindex="-1">実行例とソースコード <a class="header-anchor" href="#実行例とソースコード" aria-label="Permalink to &quot;実行例とソースコード&quot;">​</a></h2>`,64),C=JSON.parse('{"title":"パドルとボールとの衝突判定","description":"","frontmatter":{},"headers":[],"relativePath":"shin-ichiba/breakout/collision-paddle-and-ball.md","filePath":"shin-ichiba/breakout/collision-paddle-and-ball.md"}'),i={name:"shin-ichiba/breakout/collision-paddle-and-ball.md"},g=Object.assign(i,{setup(F){return(f,v)=>(a(),n("div",null,[d,l(s,{name:"collision-paddle-and-ball"})]))}});export{C as __pageData,g as default};
