import{_ as s,c as a,o as e,a3 as i}from"./chunks/framework.B_s5ISUx.js";const g=JSON.parse('{"title":"アセットロード失敗を検知する","description":"","frontmatter":{},"headers":[],"relativePath":"reverse-reference/v3/asset/asset-load-error.md","filePath":"reverse-reference/v3/asset/asset-load-error.md"}'),n={name:"reverse-reference/v3/asset/asset-load-error.md"},t=i(`<h1 id="アセットロード失敗を検知する" tabindex="-1">アセットロード失敗を検知する <a class="header-anchor" href="#アセットロード失敗を検知する" aria-label="Permalink to &quot;アセットロード失敗を検知する&quot;">​</a></h1><p>アセットロードの失敗を検知するには、 <code>g.Scene#onAssetLoadFailure</code> トリガーを利用します。</p><h2 id="凡例" tabindex="-1">凡例 <a class="header-anchor" href="#凡例" aria-label="Permalink to &quot;凡例&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scene.onAssetLoadFailure.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">failureInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // scene 内で利用するアセットがロードに失敗する度に実行されるコード。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 引数 \`failureInfo\` からは、ロードできなかったアセットを取得可能。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ただしロード完了後でないと利用できない値 (\`TextAsset\` の \`data\` など) は不定。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> failedAsset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> failureInfo.asset;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">failureInfo.error.retriable) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 再試行回数が一定回数を超えた場合、このコードが実行される。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // この後、エンジンはロードを再試行しない。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="詳細" tabindex="-1">詳細 <a class="header-anchor" href="#詳細" aria-label="Permalink to &quot;詳細&quot;">​</a></h2><p>アセットがサーバ上に存在しない場合や、ネットワーク異常でダウンロードできないなどの場合、<code>g.Scene#onAssetLoadFailure</code> トリガーでアセットロードエラーが通知されます。 Akashic Engine はこの通知後、自動的に読み込みを再試行します。</p><p>また、<code>Scene</code> の生成時に指定したアセットが読み込めない場合は、 <code>Scene#onLoad</code> トリガーは通知されません。ゲームは (エラー通知の処理に関係なく) 続行できなくなります。</p><p>そのため通常、ゲーム開発者がアセットロードエラーを処理する必要はありません。</p><p>このトリガーが有用なのは、特に <code>g.Scene#requestAssets()</code> でシーン内から動的にアセットを読み込む場合です。 コンテンツとアセットによっては「ロードできなくても続行できる」場合があるためです。 ここでロード失敗時にフラグを立てるなどの用途で、 <code>onAssetLoadFailure</code> を利用することができます。</p><h2 id="関連情報" tabindex="-1">関連情報 <a class="header-anchor" href="#関連情報" aria-label="Permalink to &quot;関連情報&quot;">​</a></h2><ul><li><a href="./request-asset.html">逆引きリファレンス » シーン内で動的にアセットを読み込む</a></li></ul>`,11),l=[t];function r(h,p,o,d,k,c){return e(),a("div",null,l)}const u=s(n,[["render",r]]);export{g as __pageData,u as default};
