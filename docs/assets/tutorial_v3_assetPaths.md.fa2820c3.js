import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.459ab1e9.js";const u=JSON.parse('{"title":"複数アセットをまとめて扱う","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/v3/assetPaths.md","filePath":"tutorial/v3/assetPaths.md"}'),p={name:"tutorial/v3/assetPaths.md"},o=l(`<h1 id="複数アセットをまとめて扱う" tabindex="-1">複数アセットをまとめて扱う <a class="header-anchor" href="#複数アセットをまとめて扱う" aria-label="Permalink to &quot;複数アセットをまとめて扱う&quot;">​</a></h1><p>ゲームが複雑になると、利用するアセットも多くなり、それを扱うコードも煩雑になりがちです。 Akashic Engine は、アセットを複数まとめて管理しやすくするためのいくつかの機能を提供しています。</p><h2 id="assets-dir" tabindex="-1">assets/ ディレクトリ <a class="header-anchor" href="#assets-dir" aria-label="Permalink to &quot;assets/ ディレクトリ {#assets-dir}&quot;">​</a></h2><p>これまでの文書では、画像アセットは <code>image/</code> 、オーディオアセットは <code>audio/</code> など、アセットの種類別にフォルダが分かれていました。 これは <code>akashic scan asset</code> コマンドが、それらのディレクトリを検索する仕様になっているためです。 しかし複雑なゲームでは、アセットを種類ではなく意味で分類・整理したいかもしれません。 たとえばステージごとにマップデータと BGM と画像をまとめて保存する、という形にしたくなるかもしれません。</p><p>このような場合には、 <code>assets/</code> ディレクトリが利用できます。 これは <code>akashic scan asset</code> コマンドがアセットを検索するディレクトリの一つです (akashic-cli v1.14.3 から) 。 ただし他のディレクトリと次の点で異なります:</p><ul><li>アセットの種別が、ファイルの拡張子から自動的に決定される <ul><li>image: 拡張子が png, jpg, jpeg のファイル</li><li>audio: 拡張子が ogg, m4a, aac のファイル</li><li>script: 拡張子が js のファイル</li><li>text: 上記以外の拡張子のファイル</li></ul></li><li>アセット ID が不定になる</li></ul><p>これによりたとえば次のようなフォルダ構造が可能になります:</p><ul><li>assets/ <ul><li>stage1/ <ul><li>map.json</li><li>background.png</li><li>bgm.m4a</li><li>bgm.ogg</li></ul></li><li>stage2/ <ul><li>map.json</li><li>background.png</li><li>bgm.m4a</li><li>bgm.ogg</li></ul></li></ul></li></ul><p><code>assets/</code> 以外のディレクトリでは、アセット ID はファイル名の basename (拡張子を抜いた部分) になります。 しかしこれには「basename が重複するアセットを一切作れない」という制限がつきます。 たとえば上の例に似た <code>audio/stage1/bgm.m4a</code> と <code>audio/stage2/bgm.m4a</code> を置くと、アセット ID が <code>bgm</code> で重複してエラーになります。</p><p><code>assets/</code> ディレクトリは、この問題を回避するため、そもそもアセット ID を保証しません。 これにより basename の重複したアセットを許容します。ただしアセット ID でのアクセスはできなくなります (不定のため)。 Akashic Engine v3 以降では、後述のとおりアセットのファイルパスを使ってアセットを取得できるため、そちらを利用することになります。</p><h2 id="asset-paths" tabindex="-1">パスによるアセット読み込み <a class="header-anchor" href="#asset-paths" aria-label="Permalink to &quot;パスによるアセット読み込み {#asset-paths}&quot;">​</a></h2><p>これまでの例では、 <code>g.Scene</code> の生成時に <code>assetIds</code> として利用するアセットの ID を指定していました。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  game: g.game,</span></span>
<span class="line"><span style="color:#E1E4E8;">  assetIds: [</span><span style="color:#9ECBFF;">&quot;character01&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;bgm01&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  game: g.game,</span></span>
<span class="line"><span style="color:#24292E;">  assetIds: [</span><span style="color:#032F62;">&quot;character01&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bgm01&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>これの代わりに、 <code>assetPaths</code> を使うと、ファイルパスで読み込むアセットを指定することができます。 ここでファイルパスは、 game.json のあるディレクトリをルート (<code>/</code>) とする スラッシュ区切りの絶対パスです (以降これをアセットパス形式と呼びます)。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">scene</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Scene</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  game: g.game,</span></span>
<span class="line"><span style="color:#E1E4E8;">  assetPaths: [</span><span style="color:#9ECBFF;">&quot;/image/character01.png&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/assets/**/*&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">scene</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Scene</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  game: g.game,</span></span>
<span class="line"><span style="color:#24292E;">  assetPaths: [</span><span style="color:#032F62;">&quot;/image/character01.png&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/assets/**/*&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>この例でも使っているように、アセットパス形式では glob のサブセット文法(<code>**</code>, <code>*</code>, <code>?</code>) をサポートしています。</p><ul><li><code>**</code> はあらゆるファイルや 0 個以上のディレクトリ、サブディレクトリにマッチします。</li><li><code>*</code> は 0 文字以上任意の文字列にマッチします。</li><li><code>?</code> は任意の 1 文字にマッチします。</li></ul><p>上記サンプルコードの <code>assetPaths</code> のグロブ指定(<code>&quot;/assets/**/*&quot;</code>)では、assets ディレクトリに下記のようなファイルが存在する場合、全てのファイルが対象となります。</p><ul><li>/assets/scenarios/scenario1.txt</li><li>/assets/scenarios/scenario2.txt</li><li>/assets/map.json</li></ul><p>(対応するアセットが game.json に登録されている必要は引き続きあります)</p><h2 id="get-asset-by-path" tabindex="-1">パスによるアセット取得 <a class="header-anchor" href="#get-asset-by-path" aria-label="Permalink to &quot;パスによるアセット取得 {#get-asset-by-path}&quot;">​</a></h2><p>ここまでの文書では、主に <code>scene.asset.getImageById()</code> などの関数を使い、アセット ID からアセットを取得していました。 シーン生成時の <code>assetPaths</code> 同様、アセットの取得でも ID ではなくパスを利用することができます。</p><p>これには <code>scene.asset.getImage()</code>, <code>scene.asset.getAudio()</code> などを利用します。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 画像アセットの取得</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">playerImage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getImage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/assets/player/image.png&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">player</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">  src: playerImage,</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: playerImage.width,</span></span>
<span class="line"><span style="color:#E1E4E8;">  height: playerImage.height</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// オーディオアセットの取得</span></span>
<span class="line"><span style="color:#6A737D;">// (game.json での記述同様、オーディオアセットに限り、拡張子抜きで指定する必要があります)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bgm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getAudio</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/audio/bgm01&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">bgm.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 画像アセットの取得</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">playerImage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getImage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/assets/player/image.png&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">player</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">  src: playerImage,</span></span>
<span class="line"><span style="color:#24292E;">  width: playerImage.width,</span></span>
<span class="line"><span style="color:#24292E;">  height: playerImage.height</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// オーディオアセットの取得</span></span>
<span class="line"><span style="color:#6A737D;">// (game.json での記述同様、オーディオアセットに限り、拡張子抜きで指定する必要があります)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bgm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getAudio</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/audio/bgm01&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">bgm.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">();</span></span></code></pre></div><p>またこれも <code>assetPaths</code> 同様、アセットパスにはグロブを利用して複数のアセットを一括で取得することもできます。 これには <code>getAllImages()</code>, <code>getAllAudios()</code> などのメソッドを利用します。戻り値は配列になります。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 複数の画像アセットの取得</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">thumbnails</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getAllImages</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/assets/**/*.png&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> thumbnails.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">thumbnail</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> g.</span><span style="color:#B392F0;">Sprite</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    scene: scene,</span></span>
<span class="line"><span style="color:#E1E4E8;">    src: thumbnails[i],</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: thumbnails[i].width,</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: thumbnails[i].height</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 複数のオーディオアセットの取得</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">audios</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scene.asset.</span><span style="color:#B392F0;">getAllAudios</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/audio/bgm*&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> audios.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    audios[i].</span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 複数の画像アセットの取得</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">thumbnails</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getAllImages</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/assets/**/*.png&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> thumbnails.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">thumbnail</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> g.</span><span style="color:#6F42C1;">Sprite</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    scene: scene,</span></span>
<span class="line"><span style="color:#24292E;">    src: thumbnails[i],</span></span>
<span class="line"><span style="color:#24292E;">    width: thumbnails[i].width,</span></span>
<span class="line"><span style="color:#24292E;">    height: thumbnails[i].height</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 複数のオーディオアセットの取得</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">audios</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scene.asset.</span><span style="color:#6F42C1;">getAllAudios</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/audio/bgm*&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> audios.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    audios[i].</span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,26),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
