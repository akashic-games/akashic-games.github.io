"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vec2 = void 0;
var sign_1 = require("../sign");
/**
 * 2次元ベクトル。
 */
var Vec2 = /** @class */ (function () {
    function Vec2(xOrVec2Like, y) {
        if (y === void 0) { y = 0; }
        if (typeof xOrVec2Like === "number") {
            this.x = xOrVec2Like;
            this.y = y;
        }
        else {
            var v = xOrVec2Like || Vec2.zero;
            this.x = v.x;
            this.y = v.y;
        }
    }
    /**
     * x, y 要素をコピーする。
     *
     * @param v1 コピー先ベクトル。
     * @param v2 コピー元ベクトル。
     */
    Vec2.copy = function (v1, v2) {
        v1.x = v2.x;
        v1.y = v2.y;
        return v1;
    };
    /**
     * 二つのベクトルを比較する。
     *
     * ベクトルが等しい時、真。
     *
     * @param v1 ベクトル。
     * @param v2 ベクトル。
     */
    Vec2.equal = function (v1, v2) {
        return v1.x === v2.x && v1.y === v2.y;
    };
    /**
     * 二つのベクトルを加算する。
     *
     * @param v1 ベクトル。結果はこのベクトルに格納される。
     * @param v2 ベクトル。
     */
    Vec2.add = function (v1, v2) {
        v1.x += v2.x;
        v1.y += v2.y;
        return v1;
    };
    /**
     * 二つのベクトルを減算する。
     *
     * @param v1 ベクトル。結果はこのベクトルに格納される。
     * @param v2 ベクトル。
     */
    Vec2.sub = function (v1, v2) {
        v1.x -= v2.x;
        v1.y -= v2.y;
        return v1;
    };
    /**
     * 内積を求める。
     *
     * @param v1 ベクトル。
     * @param v2 ベクトル。
     */
    Vec2.dot = function (v1, v2) {
        return v1.x * v2.x + v1.y * v2.y;
    };
    /**
     * 外積を求める。
     *
     * @param v1 ベクトル。
     * @param v2 ベクトル。
     */
    Vec2.cross = function (v1, v2) {
        return v1.x * v2.y - v1.y * v2.x;
    };
    /**
     * 二つの単位ベクトルが平行か調べる。
     *
     * 二つのベクトルの内積が閾値以上の時、真（平行）。
     *
     * @param v1 単位ベクトル。
     * @param v2 単位ベクトル。
     * @param threshold 閾値。省略時 1 。
     */
    Vec2.parallel = function (v1, v2, threshold) {
        if (threshold === void 0) { threshold = 1; }
        return Math.abs(Vec2.dot(v1, v2)) >= threshold;
    };
    /**
     * x, y 要素をこのベクトルにコピーする。
     *
     * @param v コピー元ベクトル。
     */
    Vec2.prototype.copy = function (v) {
        this.x = v.x;
        this.y = v.y;
        return this;
    };
    /**
     * 複製する。
     */
    Vec2.prototype.clone = function () {
        return new Vec2(this);
    };
    /**
     * 比較する。
     *
     * 等しい時、真。
     *
     * @param v ベクトル。
     */
    Vec2.prototype.equal = function (v) {
        return this.x === v.x && this.y === v.y;
    };
    /**
     * このベクトルと単位ベクトルが平行か調べる。
     *
     * このベクトル自身が単位ベクトルでなければならない。
     *
     * 二つのベクトルの内積が閾値以上の時、真（平行）。
     *
     * @param v 単位ベクトル。
     * @param threshold 閾値。省略時 1 。
     */
    Vec2.prototype.parallel = function (v, threshold) {
        if (threshold === void 0) { threshold = 1; }
        return Math.abs(this.dot(v)) >= threshold;
    };
    /**
     * 加算する。
     *
     * @param v ベクトル。
     */
    Vec2.prototype.add = function (v) {
        this.x += v.x;
        this.y += v.y;
        return this;
    };
    /**
     * 減算する。
     *
     * @param v ベクトル。
     */
    Vec2.prototype.sub = function (v) {
        this.x -= v.x;
        this.y -= v.y;
        return this;
    };
    /**
     * スケールする。
     *
     * @param v スケール。
     */
    Vec2.prototype.scale = function (v) {
        this.x *= v;
        this.y *= v;
        return this;
    };
    /**
     * アダマール積を求める。
     *
     * @param v ベクトル。
     */
    Vec2.prototype.mul = function (v) {
        this.x = this.x * v.x;
        this.y = this.y * v.y;
        return this;
    };
    /**
     * 内積を求める。
     *
     * @param v ベクトル。
     */
    Vec2.prototype.dot = function (v) {
        return this.x * v.x + this.y * v.y;
    };
    /**
     * 外積を求める。
     *
     * @param v ベクトル。
     */
    Vec2.prototype.cross = function (v) {
        return this.x * v.y - this.y * v.x;
    };
    /**
     * 投影する。
     *
     * @param v 投影先のベクトル。
     */
    Vec2.prototype.project = function (v) {
        var d = v.x * v.x + v.y * v.y;
        if (d > 0) {
            var s = this.dot(v) / d;
            this.x = v.x * s;
            this.y = v.y * s;
        }
        return this;
    };
    /**
     * 投影したベクトルから自身へ向かうベクトルにする。
     *
     * @param v 投影先のベクトル。
     */
    Vec2.prototype.reject = function (v) {
        this.sub(this.clone().project(v));
        return this;
    };
    /**
     * 反射する。
     *
     * @param n 法線ベクトル。
     */
    Vec2.prototype.reflect = function (n) {
        var d2 = this.dot(n) * 2;
        this.sub({ x: n.x * d2, y: n.y * d2 });
        return this;
    };
    /**
     * 長さの二乗を求める。
     */
    Vec2.prototype.squaredLength = function () {
        return this.x * this.x + this.y * this.y;
    };
    /**
     * 長さを求める。
     */
    Vec2.prototype.length = function () {
        return Math.sqrt(this.squaredLength());
    };
    /**
     * 正規化する。
     */
    Vec2.prototype.normalize = function () {
        var len = this.length() || 1;
        this.x /= len;
        this.y /= len;
        return this;
    };
    /**
     * 符号を反転する。
     */
    Vec2.prototype.negate = function () {
        this.x *= -1;
        this.y *= -1;
        return this;
    };
    /**
     * 四捨五入する。
     */
    Vec2.prototype.round = function () {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        return this;
    };
    /**
     * 小数点以下を切り捨てる。
     */
    Vec2.prototype.floor = function () {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        return this;
    };
    /**
     * 小数点以下を切り上げる。
     */
    Vec2.prototype.ceil = function () {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        return this;
    };
    /**
     * 各要素を符号を表す +/- 1, +/- 0 にする。
     */
    Vec2.prototype.sign = function () {
        this.x = sign_1.sign(this.x);
        this.y = sign_1.sign(this.y);
        return this;
    };
    /**
     * 回転する。
     *
     * @param angle 回転の角度[radian]。
     */
    Vec2.prototype.rotate = function (angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        var x = c * this.x - s * this.y;
        var y = s * this.x + c * this.y;
        this.x = x;
        this.y = y;
        return this;
    };
    /**
     * 90度回転する。
     */
    Vec2.prototype.rotate90 = function () {
        var x = this.x;
        var y = this.y;
        this.x = y;
        this.y = -x;
        return this;
    };
    /**
     * 270度回転する。
     */
    Vec2.prototype.rotate270 = function () {
        var x = this.x;
        var y = this.y;
        this.x = -y;
        this.y = x;
        return this;
    };
    /**
     * 零ベクトル。
     */
    Vec2.zero = Object.freeze({ x: 0, y: 0 });
    return Vec2;
}());
exports.Vec2 = Vec2;
