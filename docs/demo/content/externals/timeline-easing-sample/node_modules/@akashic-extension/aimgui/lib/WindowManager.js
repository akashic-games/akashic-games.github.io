"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowManager = void 0;
var widget_1 = require("./widget");
/**
 * ウインドウマネージャ。
 *
 * GUIクラスにウインドウの前後関係を管理する機能を提供する。
 */
var WindowManager = /** @class */ (function () {
    function WindowManager(scene) {
        this.root = new g.E({ scene: scene });
        this.newWindowEs = [];
        this.windowEsToBeMovedFront = [];
    }
    /**
     * ウインドウの並べ替え。
     */
    WindowManager.prototype.sortWindows = function () {
        // ウインドウの前後の並び替え。
        // 新規ウインドウと最前面に移動する指示のあったウインドウを append する。
        var frontWindows = this.newWindowEs.concat(this.windowEsToBeMovedFront);
        for (var _i = 0, frontWindows_1 = frontWindows; _i < frontWindows_1.length; _i++) {
            var w = frontWindows_1[_i];
            this.root.append(w);
        }
        if (this.root.children) {
            var windowEs = this.root.children.filter(function (child) { return child instanceof widget_1.WindowE; });
            for (var i = 0; i < windowEs.length; i++) {
                var windowE = windowEs[i];
                windowE.zOrder = (windowEs.length - 1) - i;
            }
        }
        this.newWindowEs = [];
        this.windowEsToBeMovedFront = [];
    };
    /**
     * 新規ウインドウの追加。
     *
     * @param windowE ウインドウ。
     */
    WindowManager.prototype.addNewWindow = function (windowE) {
        this.newWindowEs.push(windowE);
    };
    /**
     * ウインドウを最前面に移動する。
     *
     * @param windowE ウインドウ。
     */
    WindowManager.prototype.moveFront = function (windowE) {
        this.windowEsToBeMovedFront.push(windowE);
    };
    return WindowManager;
}());
exports.WindowManager = WindowManager;
