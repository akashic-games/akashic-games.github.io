"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioButtonE = void 0;
var colors_1 = require("./colors");
var common_1 = require("./common");
var WidgetE_1 = require("./WidgetE");
/**
 * ラジオボタンとその隣のラベルの間の余白。
 */
var radioButtonMargin = 2;
/**
 * RadioButton E。
 */
var RadioButtonE = /** @class */ (function (_super) {
    __extends(RadioButtonE, _super);
    function RadioButtonE(param) {
        var _a;
        var _this = this;
        var radioButtonSize = param.height;
        var desiredWidth = (_a = param.width) !== null && _a !== void 0 ? _a : radioButtonSize + radioButtonMargin + param.font.measureText(param.title).width;
        var desiredHeight = param.height;
        param.width = desiredWidth;
        param.desiredWidth = desiredWidth;
        param.desiredHeight = desiredHeight;
        param.minWidth = desiredWidth;
        param.minHeight = desiredHeight;
        _this = _super.call(this, param) || this;
        _this.valueObject = param.valueObject;
        _this.key = param.key;
        _this.buttonValue = param.buttonValue;
        _this.pressed = false;
        _this.font = param.font;
        _this.onPointDown.add(_this.handlePointDown, _this);
        _this.onPointUp.add(_this.handlePointUp, _this);
        return _this;
    }
    Object.defineProperty(RadioButtonE.prototype, "checked", {
        get: function () {
            return this.valueObject[this.key] === this.buttonValue;
        },
        set: function (v) {
            if (v) {
                this.valueObject[this.key] = this.buttonValue;
            }
        },
        enumerable: false,
        configurable: true
    });
    RadioButtonE.prototype.postRun = function () {
        this.pressed = false;
        _super.prototype.postRun.call(this);
    };
    RadioButtonE.prototype.renderSelf = function (renderer, _camera) {
        var radioButtonSize = this.height;
        var checkMarkColor = colors_1.colors.checkMark;
        var radioButtonColor = this.pressed ? colors_1.colors.checkMark : colors_1.colors.checkBox;
        // ラジオボタンの描画。
        renderer.fillRect(0, 0, radioButtonSize, radioButtonSize, radioButtonColor);
        if (!this.pressed && this.checked) {
            renderer.fillRect(2, 2, radioButtonSize - 4, radioButtonSize - 4, checkMarkColor);
        }
        // ラベルの描画。
        // "y" のようなベースラインの下に伸びる文字を考慮してやや大きくする。
        var textHeight = this.font.size * 1.2;
        var dx = radioButtonSize + radioButtonMargin;
        var dy = Math.round((radioButtonSize - textHeight) / 2);
        common_1.drawText(renderer, this.font, this.title, dx, dy);
        return true;
    };
    RadioButtonE.prototype.handlePointDown = function (_ev) {
        this.pressed = true;
        this.checked = !this.checked;
        this.modified();
    };
    RadioButtonE.prototype.handlePointUp = function (_ev) {
        this.pressed = false;
        this.modified();
    };
    return RadioButtonE;
}(WidgetE_1.WidgetE));
exports.RadioButtonE = RadioButtonE;
