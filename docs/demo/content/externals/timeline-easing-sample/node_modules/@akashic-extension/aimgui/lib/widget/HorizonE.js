"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.HorizonE = void 0;
var Placer_1 = require("../Placer");
var WidgetE_1 = require("./WidgetE");
/**
 * Horizon E。
 *
 * 子ウィジェットを水平に配置するウィジェット。
 */
var HorizonE = /** @class */ (function (_super) {
    __extends(HorizonE, _super);
    function HorizonE(param) {
        return _super.call(this, param) || this;
    }
    HorizonE.prototype.place = function (ui, addContents) {
        var parentPlacer = ui.currentPlacer;
        var desiredSize = {
            x: parentPlacer.availableWidth(),
            y: this.height
        };
        var size = parentPlacer.requireSize(desiredSize);
        this.moveTo(parentPlacer.cursorPosition.x, parentPlacer.cursorPosition.y);
        this.resizeTo(size.x, size.y);
        ui.attach(this);
        var bounds = {
            min: {
                x: this.x,
                y: this.y
            },
            max: {
                x: this.x + this.width,
                y: this.y + this.height
            }
        };
        var placer = new Placer_1.Placer({ x: 0, y: 0, }, {
            min: { x: 0, y: 0 },
            max: {
                x: this.width,
                y: this.height
            }
        }, "horizontal");
        ui.pushWidget(this);
        ui.pushPlacer(placer);
        ui.pushWid(this.title);
        addContents(ui);
        ui.popWid();
        ui.popPlacer();
        ui.popWidget();
        parentPlacer.advance(bounds);
    };
    HorizonE.prototype.renderSelf = function (_renderer, _camera) {
        // DEBUG: レイアウトに関する領域を描画する。
        // this.drawLayout(renderer);
        return true;
    };
    return HorizonE;
}(WidgetE_1.WidgetE));
exports.HorizonE = HorizonE;
