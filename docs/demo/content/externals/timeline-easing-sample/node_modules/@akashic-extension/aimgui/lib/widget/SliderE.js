"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SliderE = void 0;
var colors_1 = require("./colors");
var common_1 = require("./common");
var WidgetE_1 = require("./WidgetE");
/**
 * スライダーとその隣のラベルの間の余白。
 */
var sliderMargin = 2;
var sliderWidth = 100;
/**
 * Slider E。
 */
var SliderE = /** @class */ (function (_super) {
    __extends(SliderE, _super);
    function SliderE(param) {
        var _a;
        var _this = this;
        var desiredWidth = (_a = param.width) !== null && _a !== void 0 ? _a : sliderWidth + sliderMargin + param.font.measureText(param.title).width;
        var desiredHeight = param.height;
        param.width = desiredWidth;
        param.desiredWidth = desiredWidth;
        param.desiredHeight = desiredHeight;
        param.minWidth = desiredWidth;
        param.minHeight = desiredHeight;
        _this = _super.call(this, param) || this;
        _this.valueObject = param.valueObject;
        _this.key = param.key;
        _this.min = param.min;
        _this.max = param.max;
        _this.changed = false;
        _this.font = param.font;
        _this.onPointDown.add(_this.handlePointDown, _this);
        _this.onPointMove.add(_this.handlePointMove, _this);
        return _this;
    }
    Object.defineProperty(SliderE.prototype, "value", {
        get: function () {
            var valueObject = this.valueObject;
            return valueObject[this.key];
        },
        set: function (v) {
            var valueObject = this.valueObject;
            valueObject[this.key] = v;
            this.changed = true;
        },
        enumerable: false,
        configurable: true
    });
    SliderE.prototype.renderSelf = function (renderer, _camera) {
        this.drawSliderBackAndTitle(renderer);
        this.drawNumber(renderer);
        this.drawSliderFrameAndCursor(renderer);
        // DEBUG: レイアウトに関する領域を描画する。
        // this.drawLayout(renderer);
        return true;
    };
    SliderE.prototype.postRun = function () {
        this.changed = false;
        _super.prototype.postRun.call(this);
    };
    SliderE.prototype.drawSliderBackAndTitle = function (renderer) {
        var textHeight = this.font.size * 1.2;
        var dx = sliderWidth + sliderMargin;
        var dy = Math.round((this.height - textHeight) / 2);
        renderer.fillRect(0, 0, sliderWidth, this.height, colors_1.colors.sliderBg);
        common_1.drawText(renderer, this.font, this.title, dx, dy);
    };
    SliderE.prototype.drawNumber = function (renderer) {
        var valueText = common_1.limitText(this.font, "" + this.value, sliderWidth - 8, "");
        var textWidth = this.font.measureText(valueText).width;
        var textHeight = this.font.size * 1.2;
        var dx = Math.round((sliderWidth - textWidth) / 2);
        var dy = Math.round((this.height - textHeight) / 2);
        renderer.save();
        renderer.setOpacity(0.75);
        common_1.drawText(renderer, this.font, valueText, dx, dy);
        renderer.restore();
    };
    SliderE.prototype.drawSliderFrameAndCursor = function (renderer) {
        var frameColor = colors_1.colors.sliderFrame;
        var cursorWidth = 2;
        var t = (this.value - this.min) / (this.max - this.min);
        var x = 1 + Math.floor(((sliderWidth - 2) - cursorWidth) * t);
        renderer.fillRect(x, 0, cursorWidth, this.height, "white");
        this.drawFrame(renderer, frameColor, sliderWidth, this.height);
    };
    SliderE.prototype.handlePointDown = function (ev) {
        if (ev.point.x > sliderWidth) {
            return;
        }
        var t = ev.point.x / sliderWidth;
        this.value = this.min + (this.max - this.min) * t;
        this.modified();
    };
    SliderE.prototype.handlePointMove = function (ev) {
        if (ev.point.x > sliderWidth) {
            return;
        }
        var t = (ev.point.x + ev.startDelta.x) / sliderWidth;
        var v = this.min + (this.max - this.min) * t;
        this.value = Math.min(this.max, Math.max(this.min, v));
        this.modified();
    };
    return SliderE;
}(WidgetE_1.WidgetE));
exports.SliderE = SliderE;
