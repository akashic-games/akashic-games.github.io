"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollapsingE = void 0;
var collision_js_1 = require("@akashic-extension/collision-js");
var Placer_1 = require("../Placer");
var common_1 = require("./common");
var WidgetE_1 = require("./WidgetE");
/**
 * 折りたたみの下に配置されるウィジェットのインデント[px]。
 */
var collpasingIndent = 4;
/**
 * Collapsing E。
 *
 * 子ウィジェットを折り畳んで表示・非表示を行うウィジェット。
 */
var CollapsingE = /** @class */ (function (_super) {
    __extends(CollapsingE, _super);
    function CollapsingE(param) {
        var _this = _super.call(this, param) || this;
        var style = _this.getMemory();
        _this.font = param.font;
        _this.isOpen = style.isOpen;
        _this.onPointDown.add(_this.handlePointDown, _this);
        return _this;
    }
    CollapsingE.prototype.place = function (ui, addContents) {
        var parentPlacer = ui.currentPlacer;
        var desiredSize = {
            x: parentPlacer.availableWidth(),
            y: this.height
        };
        var size = parentPlacer.requireSize(desiredSize);
        this.moveTo(parentPlacer.cursorPosition.x, parentPlacer.cursorPosition.y);
        this.resizeTo(size.x, size.y);
        ui.attach(this);
        var bounds = {
            min: {
                x: this.x,
                y: this.y
            },
            max: {
                x: this.x + this.width,
                y: this.y + this.height
            }
        };
        var placer = new Placer_1.Placer({
            x: collpasingIndent,
            y: this.height
        }, {
            min: { x: 0, y: 0 },
            max: {
                x: this.width,
                y: this.height
            }
        });
        ui.pushWidget(this);
        ui.pushPlacer(placer);
        ui.pushWid(this.title);
        if (this.isOpen) {
            addContents(ui);
        }
        ui.popWid();
        ui.popPlacer();
        ui.popWidget();
        collision_js_1.enlargeAABB(bounds, new collision_js_1.Vec2(placer.bounds.min).add(this));
        collision_js_1.enlargeAABB(bounds, new collision_js_1.Vec2(placer.bounds.max).add(this));
        parentPlacer.advance(bounds);
    };
    CollapsingE.prototype.postRun = function () {
        this.getMemory().isOpen = this.isOpen;
        _super.prototype.postRun.call(this);
    };
    CollapsingE.prototype.renderSelf = function (renderer, _camera) {
        common_1.drawText(renderer, this.font, (this.isOpen ? "▼" : "▶︎") + " " + this.title, 0, 0);
        // DEBUG: レイアウトに関する領域を描画する。
        // this.drawLayout(renderer);
        return this.isOpen;
    };
    CollapsingE.prototype.getMemory = function () {
        var memory = _super.prototype.getMemory.call(this) || { isOpen: true };
        _super.prototype.setMemory.call(this, memory);
        return memory;
    };
    CollapsingE.prototype.handlePointDown = function (_ev) {
        this.isOpen = !this.isOpen;
        this.modified();
    };
    return CollapsingE;
}(WidgetE_1.WidgetE));
exports.CollapsingE = CollapsingE;
