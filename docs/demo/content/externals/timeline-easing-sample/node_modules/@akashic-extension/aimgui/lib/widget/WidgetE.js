"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WidgetE = void 0;
var collision_js_1 = require("@akashic-extension/collision-js");
/**
 * Widget E。
 *
 * ウィジェット(ボタンやラベルといったGUI要素)の基底クラス。
 */
var WidgetE = /** @class */ (function (_super) {
    __extends(WidgetE, _super);
    function WidgetE(param) {
        var _this = this;
        param.touchable = true;
        _this = _super.call(this, param) || this;
        _this.title = param.title;
        _this.gwid = param.gwid;
        _this.memory = param.memory;
        _this.desiredWidth = param.desiredWidth;
        _this.desiredHeight = param.desiredHeight;
        _this.minWidth = param.minWidth;
        _this.minHeight = param.minHeight;
        return _this;
    }
    /**
     * 後処理。
     *
     * Gui#run() 実行後に呼び出される。
     */
    WidgetE.prototype.postRun = function () {
        // nop.
    };
    /**
     * 自身を Gui に配置する。
     *
     * 処理の実体は placeSelf() で実装する。
     *
     * @param ui 配置先の Gui 。
     * @param addContents 自身に子ウィジェットを配置する処理。WidgetE はこれを利用しない。
     */
    WidgetE.prototype.place = function (ui, addContents) {
        this.placeSelf(ui.currentPlacer, addContents);
        ui.attach(this);
    };
    WidgetE.prototype.drawFrame = function (renderer, cssColor, width, height) {
        width = width !== null && width !== void 0 ? width : this.width;
        height = height !== null && height !== void 0 ? height : this.height;
        renderer.fillRect(0, 0, width - 1, 1, cssColor);
        renderer.fillRect(width - 1, 0, 1, height - 1, cssColor);
        renderer.fillRect(1, height - 1, width - 1, 1, cssColor);
        renderer.fillRect(0, 1, 1, height - 1, cssColor);
    };
    WidgetE.prototype.placeSelf = function (placer, _addContents) {
        var _a, _b;
        var desiredSize = {
            x: (_a = this.desiredWidth) !== null && _a !== void 0 ? _a : this.width,
            y: (_b = this.desiredHeight) !== null && _b !== void 0 ? _b : this.height
        };
        var size = placer.requireSize(desiredSize);
        size.x = this.minWidth ? Math.max(this.minWidth, size.x) : size.x;
        size.y = this.minHeight ? Math.max(this.minHeight, size.y) : size.y;
        // 位置を変更する。
        if (!collision_js_1.Vec2.equal(this, placer.cursorPosition)) {
            collision_js_1.Vec2.copy(this, placer.cursorPosition);
            this.modified();
        }
        // 大きさを変更する。
        if (this.width !== size.x || this.height !== size.y) {
            this.width = size.x;
            this.height = size.y;
            this.modified();
        }
        var bounds = {
            min: __assign({}, placer.cursorPosition),
            max: new collision_js_1.Vec2(placer.cursorPosition).add(size)
        };
        placer.advance(bounds);
    };
    /**
     * このウィジェットインスタンスのフレームを跨ぐ情報の設定。
     *
     * @param memory メモリ。
     */
    WidgetE.prototype.setMemory = function (memory) {
        this.memory.data[this.gwid] = memory;
    };
    /**
     * このウィジェットインスタンスのフレームを跨ぐ情報の取得。
     *
     * @param memory メモリ。
     */
    WidgetE.prototype.getMemory = function () {
        return this.memory.data[this.gwid];
    };
    // TODO: 再実装
    WidgetE.prototype.drawLayout = function (_renderer) {
        // this.drawAABB(renderer, this.layout.contentArea, "lime");
        // this.drawAABB(renderer, this.layout.bounds, "yellow");
    };
    WidgetE.prototype.drawAABB = function (renderer, aabb, cssColor) {
        var min = aabb.min;
        var max = aabb.max;
        var width = Math.max(1, max.x - min.x);
        var height = Math.max(1, max.y - min.y);
        renderer.fillRect(min.x, min.y, width, 1, cssColor);
        renderer.fillRect(max.x - 1, min.y, 1, height, cssColor);
        renderer.fillRect(min.x, min.y, 1, height, cssColor);
        renderer.fillRect(min.x, max.y - 1, width, 1, cssColor);
    };
    return WidgetE;
}(g.E));
exports.WidgetE = WidgetE;
