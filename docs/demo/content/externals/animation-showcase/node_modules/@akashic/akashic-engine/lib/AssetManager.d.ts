import { Asset, AssetLoadHandler, AudioAsset, AssetLoadError, ImageAsset, ResourceFactory, ScriptAsset, TextAsset, VideoAsset } from "@akashic/pdi-types";
import { AssetConfigurationMap, AudioSystemConfigurationMap, ModuleMainScriptsMap } from "./AssetConfiguration";
import { AssetManagerLoadHandler } from "./AssetManagerLoadHandler";
import { AudioSystemManager } from "./AudioSystemManager";
import { DynamicAssetConfiguration } from "./DynamicAssetConfiguration";
export declare type OneOfAsset = AudioAsset | ImageAsset | ScriptAsset | TextAsset | VideoAsset;
export interface AssetManagerParameterGameLike {
    resourceFactory: ResourceFactory;
    audio: AudioSystemManager;
    defaultAudioSystemId: "music" | "sound";
}
/**
 * `Asset` を管理するクラス。
 *
 * このクラスのインスタンスは `Game` に一つデフォルトで存在する(デフォルトアセットマネージャ)。
 * デフォルトアセットマネージャは、game.json に記述された通常のアセットを読み込むために利用される。
 *
 * ゲーム開発者は、game.json に記述のないリソースを取得するために、このクラスのインスタンスを独自に生成してよい。
 */
export declare class AssetManager implements AssetLoadHandler {
    static MAX_ERROR_COUNT: number;
    /**
     * コンストラクタに渡されたアセットの設定。(assets.json が入っていることが期待される)
     */
    configuration: {
        [key: string]: any;
    };
    /**
     * require解決用の仮想パスからアセットIDを引くためのテーブル。
     * @private
     */
    _virtualPathToIdTable: {
        [key: string]: string;
    };
    /**
     * 読み込み済みのアセット。
     * requestAssets() で読み込みをリクエストしたゲーム開発者はコールバックでアセットを受け取るので、この変数を参照する必要は通常ない
     * @private
     */
    _assets: {
        [key: string]: OneOfAsset;
    };
    /**
     * 読み込み済みのrequire解決用の仮想パスからアセットを引くためのテーブル。
     * アセットIDと異なり、ファイルパスは重複しうる (同じ画像を複数の名前で参照することはできる) ので、要素数は `_assets` 以下である。
     * この情報は逆引き用の補助的な値にすぎない。このクラスの読み込み済みアセットの管理はすべて `_assets` 経由で行う。
     * @private
     */
    _liveAssetVirtualPathTable: {
        [key: string]: OneOfAsset;
    };
    /**
     * 読み込み済みのアセットの絶対パスからrequire解決用の仮想パスを引くためのテーブル。
     * @private
     */
    _liveAssetPathTable: {
        [path: string]: string;
    };
    /**
     * requireの第一引数から対応する仮想パスを引くためのテーブル。
     * @private
     */
    _moduleMainScripts: ModuleMainScriptsMap;
    /**
     * 各アセットに対する参照の数。
     * 参照は requestAssets() で増え、unrefAssets() で減る。
     * なおロード中であっても参照に数える。つまり (this._refCounts[id] > 1) であるなら !!(this._assets[id] || this._loadings[id])
     * @private
     */
    _refCounts: {
        [key: string]: number;
    };
    /**
     * 各種リソースのファクトリ。
     */
    private _resourceFactory;
    /**
     * オーディオシステム群
     */
    private _audioSystemManager;
    /**
     * デフォルトで利用されるオーディオシステムのID。
     */
    private _defaultAudioSystemId;
    /**
     * 読み込み中のアセットの情報。
     */
    private _loadings;
    /**
     * `AssetManager` のインスタンスを生成する。
     *
     * @param gameParams このインスタンスが属するゲーム。
     * @param conf このアセットマネージャに与えるアセット定義。game.json の `"assets"` に相当。
     * @param audioSystemConfMap このアセットマネージャに与えるオーディオシステムの宣言。
     * @param moduleMainScripts このアセットマネージャに与える require() 解決用のエントリポイント。
     */
    constructor(gameParams: AssetManagerParameterGameLike, conf?: AssetConfigurationMap, audioSystemConfMap?: AudioSystemConfigurationMap, moduleMainScripts?: ModuleMainScriptsMap);
    /**
     * このインスタンスを破棄する。
     */
    destroy(): void;
    /**
     * このインスタンスが破棄済みであるかどうかを返す。
     */
    destroyed(): boolean;
    /**
     * `Asset` の読み込みを再試行する。
     *
     * 引数 `asset` は読み込みの失敗が (`Scene#assetLoadFail` で) 通知されたアセットでなければならない。
     * @param asset 読み込みを再試行するアセット
     */
    retryLoad(asset: Asset): void;
    /**
     * グローバルアセットのIDを全て返す。
     */
    globalAssetIds(): string[];
    /**
     * パターンまたはフィルタに合致するパスを持つアセットIDを全て返す。
     *
     * 戻り値は読み込み済みでないアセットのIDを含むことに注意。
     * 読み込み済みのアセットにアクセスする場合は、 `peekAllLiveAssetsByPattern()` を利用すること。
     *
     * @param patternOrFilters パターンまたはフィルタ。仕様は `AssetAccessor#getAllImages()` を参照
     */
    resolvePatternsToAssetIds(patternOrFilters: (string | ((accessorPath: string) => boolean))[]): string[];
    /**
     * アセットの取得を要求する。
     *
     * 要求したアセットが読み込み済みでない場合、読み込みが行われる。
     * 取得した結果は `handler` を通して通知される。
     * ゲーム開発者はこのメソッドを呼び出してアセットを取得した場合、
     * 同じアセットID(または取得したアセット)で `unrefAsset()` を呼び出さなければならない。
     *
     * @param assetIdOrConf 要求するアセットのIDまたは設定
     * @param handler 要求結果を受け取るハンドラ
     */
    requestAsset(assetIdOrConf: string | DynamicAssetConfiguration, handler: AssetManagerLoadHandler): boolean;
    /**
     * アセットの参照カウントを減らす。
     * 引数の各要素で `unrefAsset()` を呼び出す。
     *
     * @param assetOrId 参照カウントを減らすアセットまたはアセットID
     */
    unrefAsset(assetOrId: string | Asset): void;
    /**
     * 複数のアセットの取得を要求する。
     * 引数の各要素で `requestAsset()` を呼び出す。
     *
     * @param assetIdOrConfs 取得するアセットのIDまたはアセット定義
     * @param handler 取得の結果を受け取るハンドラ
     */
    requestAssets(assetIdOrConfs: (string | DynamicAssetConfiguration)[], handler: AssetManagerLoadHandler): number;
    /**
     * 複数のアセットを解放する。
     * 引数の各要素で `unrefAsset()` を呼び出す。
     *
     * @param assetOrIds 参照カウントを減らすアセットまたはアセットID
     * @private
     */
    unrefAssets(assetOrIds: (string | Asset)[]): void;
    /**
     * アクセッサパスで指定された読み込み済みのアセットを返す。
     *
     * ここでアクセッサパスとは、 `AssetAccessor` が使うパス
     * (game.jsonのディレクトリをルート (`/`) とする、 `/` 区切りの絶対パス形式の仮想パス)である。
     * これは `/` を除けばアセットの仮想パス (virtualPath) と同一である。
     *
     * @param accessorPath 取得するアセットのアクセッサパス
     * @param type 取得するアセットのタイプ。対象のアセットと合致しない場合、エラー
     */
    peekLiveAssetByAccessorPath<T extends OneOfAsset>(accessorPath: string, type: string): T;
    /**
     * アセットIDで指定された読み込み済みのアセットを返す。
     *
     * @param assetId 取得するアセットのID
     * @param type 取得するアセットのタイプ。対象のアセットと合致しない場合、エラー
     */
    peekLiveAssetById<T extends OneOfAsset>(assetId: string, type: string): T;
    /**
     * パターンまたはフィルタにマッチするパスを持つ、指定されたタイプの全読み込み済みアセットを返す。
     *
     * 戻り値の要素の順序は保証されない。
     * パターンとフィルタについては `AssetAccessor#getAllImages()` の仕様を参照のこと。
     *
     * @param patternOrFilter 取得するアセットのパスパターンまたはフィルタ
     * @param type 取得するアセットのタイプ。 null の場合、全てのタイプとして扱われる。
     */
    peekAllLiveAssetsByPattern<T extends OneOfAsset>(patternOrFilter: string | ((accessorPath: string) => boolean), type: string | null): T[];
    /**
     * @ignore
     */
    _normalize(configuration: any, audioSystemConfMap: AudioSystemConfigurationMap): any;
    /**
     * @private
     */
    _createAssetFor(idOrConf: string | DynamicAssetConfiguration): OneOfAsset;
    /**
     * @ignore
     */
    _releaseAsset(assetId: string): void;
    /**
     * 現在ロード中のアセットの数。(デバッグ用; 直接の用途はない)
     * @private
     */
    _countLoadingAsset(): number;
    /**
     * @private
     */
    _onAssetError(asset: OneOfAsset, error: AssetLoadError): void;
    /**
     * @private
     */
    _onAssetLoad(asset: OneOfAsset): void;
}
