"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var trigger_1 = require("@akashic/trigger");
var AssetManager_1 = require("./AssetManager");
var AudioSystemManager_1 = require("./AudioSystemManager");
var DefaultLoadingScene_1 = require("./DefaultLoadingScene");
var EventConverter_1 = require("./EventConverter");
var ExceptionFactory_1 = require("./ExceptionFactory");
var LoadingScene_1 = require("./LoadingScene");
var ModuleManager_1 = require("./ModuleManager");
var OperationPluginManager_1 = require("./OperationPluginManager");
var PointEventResolver_1 = require("./PointEventResolver");
var Scene_1 = require("./Scene");
var Storage_1 = require("./Storage");
var SurfaceAtlasSet_1 = require("./SurfaceAtlasSet");
var XorshiftRandomGenerator_1 = require("./XorshiftRandomGenerator");
/**
 * コンテンツそのものを表すクラス。
 *
 * 本クラスのインスタンスは暗黙に生成され、ゲーム開発者が生成することはない。
 * ゲーム開発者はg.gameによって本クラスのインスタンスを参照できる。
 *
 * 多くの機能を持つが、本クラスをゲーム開発者が利用するのは以下のようなケースである。
 * 1. Sceneの生成時、コンストラクタに引数として渡す
 * 2. Sceneに紐付かないイベント Game#join, Game#leave, Game#playerInfo, Game#seed を処理する
 * 3. 乱数を発生させるため、Game#randomにアクセスしRandomGeneratorを取得する
 * 4. ゲームのメタ情報を確認するため、Game#width, Game#height, Game#fpsにアクセスする
 * 5. グローバルアセットを取得するため、Game#assetsにアクセスする
 * 6. LoadingSceneを変更するため、Game#loadingSceneにゲーム開発者の定義したLoadingSceneを指定する
 * 7. スナップショット機能を作るため、Game#snapshotRequestにアクセスする
 * 8. 現在フォーカスされているCamera情報を得るため、Game#focusingCameraにアクセスする
 * 9. AudioSystemを直接制御するため、Game#audioにアクセスする
 * 10.Sceneのスタック情報を調べるため、Game#scenesにアクセスする
 * 11.操作プラグインを直接制御するため、Game#operationPluginManagerにアクセスする
 */
var Game = /** @class */ (function () {
    /**
     * `Game` のインスタンスを生成する。
     *
     * @param param この `Game` に指定するパラメータ
     */
    function Game(param) {
        var gameConfiguration = this._normalizeConfiguration(param.configuration);
        this.fps = gameConfiguration.fps;
        this.width = gameConfiguration.width;
        this.height = gameConfiguration.height;
        this.renderers = [];
        this.scenes = [];
        this.age = 0;
        this.assetBase = param.assetBase || "";
        this.resourceFactory = param.resourceFactory;
        this.handlerSet = param.handlerSet;
        this.selfId = param.selfId;
        this.db = undefined;
        this.loadingScene = undefined;
        this.operationPlugins = undefined;
        this.random = undefined;
        this._defaultLoadingScene = undefined;
        this._eventConverter = undefined;
        this._pointEventResolver = undefined;
        this._idx = undefined;
        this._localDb = undefined;
        this._localIdx = undefined;
        this._cameraIdx = undefined;
        this._isTerminated = undefined;
        this._modified = undefined;
        this._postTickTasks = undefined;
        this.playId = undefined;
        this.isSkipping = false;
        this.audio = new AudioSystemManager_1.AudioSystemManager(this.resourceFactory);
        this.defaultAudioSystemId = "sound";
        this.storage = new Storage_1.Storage();
        this.assets = {};
        this.surfaceAtlasSet = new SurfaceAtlasSet_1.SurfaceAtlasSet({ resourceFactory: this.resourceFactory });
        this.onJoin = new trigger_1.Trigger();
        this.onLeave = new trigger_1.Trigger();
        this.onPlayerInfo = new trigger_1.Trigger();
        this.onSeed = new trigger_1.Trigger();
        this.join = this.onJoin;
        this.leave = this.onLeave;
        this.playerInfo = this.onPlayerInfo;
        this.seed = this.onSeed;
        this._eventTriggerMap = {
            unknown: undefined,
            timestamp: undefined,
            join: this.onJoin,
            leave: this.onLeave,
            "player-info": this.onPlayerInfo,
            seed: this.onSeed,
            message: undefined,
            "point-down": undefined,
            "point-move": undefined,
            "point-up": undefined,
            operation: undefined
        };
        this.onResized = new trigger_1.Trigger();
        this.onSkipChange = new trigger_1.Trigger();
        this.resized = this.onResized;
        this.skippingChanged = this.onSkipChange;
        this.isLastTickLocal = true;
        this.lastOmittedLocalTickCount = 0;
        this.lastLocalTickMode = null;
        this.lastTickGenerationMode = null;
        this._onLoad = new trigger_1.Trigger();
        this._onStart = new trigger_1.Trigger();
        this._loaded = this._onLoad;
        this._started = this._onStart;
        this.isLoaded = false;
        this.onSnapshotRequest = new trigger_1.Trigger();
        this.snapshotRequest = this.onSnapshotRequest;
        this.external = {};
        this._runtimeValueBase = Object.create(param.engineModule, {
            game: {
                value: this,
                enumerable: true
            }
        });
        this._main = gameConfiguration.main;
        this._mainFunc = param.mainFunc;
        this._mainParameter = undefined;
        this._configuration = gameConfiguration;
        this._assetManager = new AssetManager_1.AssetManager(this, gameConfiguration.assets, gameConfiguration.audio, gameConfiguration.moduleMainScripts);
        this._moduleManager = new ModuleManager_1.ModuleManager(this._runtimeValueBase, this._assetManager);
        var operationPluginsField = gameConfiguration.operationPlugins || [];
        this.operationPluginManager = new OperationPluginManager_1.OperationPluginManager(this, param.operationPluginViewInfo || null, operationPluginsField);
        this._onOperationPluginOperated = new trigger_1.Trigger();
        this._operationPluginOperated = this._onOperationPluginOperated;
        this.operationPluginManager.onOperate.add(this._onOperationPluginOperated.fire, this._onOperationPluginOperated);
        this.onSceneChange = new trigger_1.Trigger();
        this._onSceneChange = new trigger_1.Trigger();
        this._onSceneChange.add(this._handleSceneChanged, this);
        this._sceneChanged = this._onSceneChange;
        this._initialScene = new Scene_1.Scene({
            game: this,
            assetIds: this._assetManager.globalAssetIds(),
            local: true,
            name: "akashic:initial-scene"
        });
        this._initialScene.onLoad.add(this._handleInitialSceneLoad, this);
        this._reset({ age: 0 });
    }
    Object.defineProperty(Game.prototype, "focusingCamera", {
        /**
         * 使用中のカメラ。
         *
         * `Game#draw()`, `Game#findPointSource()` のデフォルト値として使用される。
         * この値を変更した場合、変更を描画に反映するためには `Game#modified()` を呼び出す必要がある。
         */
        // focusingCameraが変更されても古いカメラをtargetCamerasに持つエンティティのEntityStateFlags.Modifiedを取りこぼすことが無いように、変更時にはrenderを呼べるようアクセサを使う
        get: function () {
            return this._focusingCamera;
        },
        set: function (c) {
            if (c === this._focusingCamera)
                return;
            if (this._modified)
                this.render();
            this._focusingCamera = c;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * シーンスタックへのシーンの追加と、そのシーンへの遷移を要求する。
     *
     * このメソッドは要求を行うだけである。呼び出し直後にはシーン遷移は行われていないことに注意。
     * 実際のシーン遷移は現在のフレームの終わり(Scene#update の fire 後) まで遅延される。
     * このメソッドの呼び出しにより、現在のシーンの `stateChanged` が引数 `"deactive"` でfireされる。
     * その後 `scene.stateChanged` が引数 `"active"` でfireされる。
     * @param scene 遷移後のシーン
     */
    Game.prototype.pushScene = function (scene) {
        this._postTickTasks.push({
            type: 0 /* PushScene */,
            scene: scene
        });
    };
    /**
     * 現在のシーンの置き換えを要求する。
     *
     * 現在のシーンをシーンスタックから取り除き、指定のシーンを追加することを要求する。
     * このメソッドは要求を行うだけである。呼び出し直後にはシーン遷移は行われていないことに注意。
     * 実際のシーン遷移は現在のフレームの終わり(Scene#update の fire 後) まで遅延される。
     * 引数 `preserveCurrent` が偽の場合、このメソッドの呼び出しにより現在のシーンは破棄される。
     * またその時 `stateChanged` が引数 `"destroyed"` でfireされる。
     * その後 `scene.stateChanged` が引数 `"active"` でfireされる。
     *
     * @param scene 遷移後のシーン
     * @param preserveCurrent 真の場合、現在のシーンを破棄しない(ゲーム開発者が明示的に破棄せねばならない)。省略された場合、偽
     */
    Game.prototype.replaceScene = function (scene, preserveCurrent) {
        this._postTickTasks.push({
            type: 1 /* ReplaceScene */,
            scene: scene,
            preserveCurrent: !!preserveCurrent
        });
    };
    /**
     * シーンスタックから現在のシーンを取り除くことを要求する
     *
     * このメソッドは要求を行うだけである。呼び出し直後にはシーン遷移は行われていないことに注意。
     * 実際のシーン遷移は次のフレームまでに(次のupdateのfireまでに)行われる。
     * 引数 `preserve` が偽の場合、このメソッドの呼び出しにより取り除かれたシーンは全て破棄される。
     * またその時 `stateChanged` が引数 `"destroyed"` でfireされる。
     * その後一つ前のシーンの `stateChanged` が引数 `"active"` でfireされる。
     * また、step数がスタックされているシーンの数以上の場合、例外が投げられる。
     *
     * @param preserve 真の場合、シーンを破棄しない(ゲーム開発者が明示的に破棄せねばならない)。省略された場合、偽
     * @param step 取り除くシーンの数。省略された場合、1
     */
    Game.prototype.popScene = function (preserve, step) {
        if (step === void 0) { step = 1; }
        for (var i = 0; i < step; i++) {
            this._postTickTasks.push({ type: 2 /* PopScene */, preserveCurrent: !!preserve });
        }
    };
    /**
     * 現在のシーンを返す。
     * ない場合、 `undefined` を返す。
     */
    Game.prototype.scene = function () {
        if (!this.scenes.length)
            return undefined;
        return this.scenes[this.scenes.length - 1];
    };
    /**
     * この `Game` の時間経過とそれに伴う処理を行う。
     *
     * 現在の `Scene` に対して `Scene#update` をfireし、 `events` に設定されたイベントを処理する。
     * このメソッドは暗黙に呼び出される。ゲーム開発者がこのメソッドを利用する必要はない。
     *
     * 戻り値は呼び出し前後でシーンが変わった(別のシーンに遷移した)場合、真。でなければ偽。
     * @param advanceAge 偽を与えた場合、`this.age` を進めない。
     * @param omittedTickCount タイムスタンプ待ちを省略する動作などにより、(前回の呼び出し以降に)省かれたローカルティックの数。省略された場合、 `0` 。
     * @param events ティックに含ませるイベント。省略された場合、 `undefined` 。
     */
    Game.prototype.tick = function (advanceAge, omittedTickCount, events) {
        var scene = null;
        if (this._isTerminated)
            return false;
        this.isLastTickLocal = !advanceAge;
        this.lastOmittedLocalTickCount = omittedTickCount || 0;
        if (this.scenes.length) {
            scene = this.scenes[this.scenes.length - 1];
            if (events && events.length) {
                for (var i = 0; i < events.length; ++i) {
                    var event = this._eventConverter.toGameEvent(events[i]);
                    var trigger = this._eventTriggerMap[event.type];
                    // @ts-ignore 処理の高速化のため以下の箇所のみ型の厳格なチェックをなくす
                    if (trigger)
                        trigger.fire(event);
                }
            }
            scene.onUpdate.fire();
            if (advanceAge)
                ++this.age;
        }
        if (this._postTickTasks.length) {
            this._flushPostTickTasks();
            return scene !== this.scenes[this.scenes.length - 1];
        }
        return false;
    };
    /**
     * このGameを描画する。
     *
     * このゲームに紐づけられた `Renderer` (`this.renderers` に含まれるすべての `Renderer` で、この `Game` の描画を行う。
     * 描画内容に変更がない場合、描画処理がスキップされる点に注意。強制的に描画をする場合は `this.modified()` を呼ぶこと。
     * このメソッドは暗黙に呼び出される。ゲーム開発者がこのメソッドを利用する必要はない。
     */
    Game.prototype.render = function () {
        if (!this._modified)
            return;
        var scene = this.scene();
        if (!scene)
            return;
        var camera = this.focusingCamera;
        var renderers = this.renderers; // unsafe
        for (var i = 0; i < renderers.length; ++i) {
            var renderer = renderers[i];
            renderer.begin();
            renderer.save();
            renderer.clear();
            if (camera) {
                renderer.save();
                camera._applyTransformToRenderer(renderer);
            }
            var children = scene.children;
            for (var j = 0; j < children.length; ++j)
                children[j].render(renderer, camera);
            if (camera) {
                renderer.restore();
            }
            renderer.restore();
            renderer.end();
        }
        this._modified = false;
    };
    /**
     * 対象のポイントイベントのターゲットエンティティ(`PointTarget#target`)を解決し、それを補完した playlog.Event を返す。
     * Down -> Move -> Up とは異なる順番で呼び出された場合 `null` を返す。
     * このメソッドは暗黙に呼び出される。ゲーム開発者がこのメソッドを利用する必要はない。
     * @param e プラットフォームのポイントイベント
     */
    Game.prototype.resolvePointEvent = function (e) {
        switch (e.type) {
            case 0 /* Down */:
                return this._pointEventResolver.pointDown(e);
            case 1 /* Move */:
                return this._pointEventResolver.pointMove(e);
            case 2 /* Up */:
                return this._pointEventResolver.pointUp(e);
        }
    };
    /**
     * その座標に反応する `PointSource` を返す。
     *
     * 戻り値は、対象が見つかった場合、 `target` に見つかった `E` を持つ `PointSource` である。
     * 対象が見つからなかった場合、 `undefined` である。
     *
     * 戻り値が `undefined` でない場合、その `target` プロパティは次を満たす:
     * - `E#touchable` が真である
     * - カメラ `camera` から可視である中で最も手前にある
     *
     * @param point 対象の座標
     * @param camera 対象のカメラ。指定しなければ `Game.focusingCamera` が使われる
     */
    Game.prototype.findPointSource = function (point, camera) {
        if (!camera)
            camera = this.focusingCamera;
        var scene = this.scene();
        if (!scene)
            return undefined;
        return scene.findPointSourceByPoint(point, false, camera);
    };
    /**
     * このGameにエンティティを登録する。
     *
     * このメソッドは各エンティティに対して暗黙に呼び出される。ゲーム開発者がこのメソッドを明示的に利用する必要はない。
     * `e.id` が `undefined` である場合、このメソッドの呼び出し後、 `e.id` には `this` に一意の値が設定される。
     * `e.local` が偽である場合、このメソッドの呼び出し後、 `this.db[e.id] === e` が成立する。
     * `e.local` が真である場合、 `e.id` の値は不定である。
     *
     * @param e 登録するエンティティ
     */
    Game.prototype.register = function (e) {
        if (e.local) {
            if (e.id === undefined) {
                e.id = --this._localIdx;
            }
            else {
                // register前にidがある: スナップショットからの復元用パス
                // スナップショットはローカルエンティティを残さないはずだが、実装上はできるようにしておく。
                if (e.id > 0)
                    throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#register: invalid local id: " + e.id);
                if (this._localDb.hasOwnProperty(String(e.id)))
                    throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#register: conflicted id: " + e.id);
                if (this._localIdx > e.id)
                    this._localIdx = e.id;
            }
            this._localDb[e.id] = e;
        }
        else {
            if (e.id === undefined) {
                e.id = ++this._idx;
            }
            else {
                // register前にidがある: スナップショットからの復元用パス
                if (e.id < 0)
                    throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#register: invalid non-local id: " + e.id);
                if (this.db.hasOwnProperty(String(e.id)))
                    throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#register: conflicted id: " + e.id);
                // _idxがユニークな値を作れるよう更新しておく
                if (this._idx < e.id)
                    this._idx = e.id;
            }
            this.db[e.id] = e;
        }
    };
    /**
     * このGameからエンティティの登録を削除する。
     *
     * このメソッドは各エンティティに対して暗黙に呼び出される。ゲーム開発者がこのメソッドを明示的に利用する必要はない。
     * このメソッドの呼び出し後、 `this.db[e.id]` は未定義である。
     * @param e 登録を削除するエンティティ
     */
    Game.prototype.unregister = function (e) {
        if (e.local) {
            delete this._localDb[e.id];
        }
        else {
            delete this.db[e.id];
        }
    };
    /**
     * このゲームを終了する。
     *
     * エンジンに対して続行の断念を通知する。
     * このメソッドの呼び出し後、このクライアントの操作要求は送信されない。
     * またこのクライアントのゲーム実行は行われない(updateを含むイベントのfireはおきない)。
     */
    Game.prototype.terminateGame = function () {
        this._isTerminated = true;
        this._terminateGame();
    };
    /**
     * 画面更新が必要のフラグを設定する。
     */
    Game.prototype.modified = function () {
        this._modified = true;
    };
    /**
     * イベントを発生させる。
     *
     * ゲーム開発者は、このメソッドを呼び出すことで、エンジンに指定のイベントを発生させることができる。
     *
     * @param e 発生させるイベント
     */
    Game.prototype.raiseEvent = function (e) {
        this.handlerSet.raiseEvent(this._eventConverter.toPlaylogEvent(e));
    };
    /**
     * ティックを発生させる。
     *
     * ゲーム開発者は、このメソッドを呼び出すことで、エンジンに時間経過を要求することができる。
     * 現在のシーンのティック生成モード `Scene#tickGenerationMode` が `"manual"` でない場合、エラー。
     *
     * @param events そのティックで追加で発生させるイベント
     */
    Game.prototype.raiseTick = function (events) {
        if (events == null || !events.length) {
            this.handlerSet.raiseTick();
            return;
        }
        var plEvents = [];
        for (var i = 0; i < events.length; i++) {
            plEvents.push(this._eventConverter.toPlaylogEvent(events[i]));
        }
        this.handlerSet.raiseTick(plEvents);
    };
    /**
     * イベントフィルタを追加する。
     *
     * 一つ以上のイベントフィルタが存在する場合、このゲームで発生したイベントは、通常の処理の代わりにイベントフィルタに渡される。
     * エンジンは、イベントフィルタが戻り値として返したイベントを、まるでそのイベントが発生したかのように処理する。
     *
     * イベントフィルタはローカルイベントに対しても適用される。
     * イベントフィルタはローカルティック補間シーンやローカルシーンの間であっても適用される。
     * 複数のイベントフィルタが存在する場合、そのすべてが適用される。適用順は登録の順である。
     *
     * @param filter 追加するイベントフィルタ
     * @param handleEmpty イベントが存在しない場合でも定期的にフィルタを呼び出すか否か。省略された場合、偽。
     */
    Game.prototype.addEventFilter = function (filter, handleEmpty) {
        this.handlerSet.addEventFilter(filter, handleEmpty);
    };
    /**
     * イベントフィルタを削除する。
     *
     * @param filter 削除するイベントフィルタ
     */
    Game.prototype.removeEventFilter = function (filter) {
        this.handlerSet.removeEventFilter(filter);
    };
    /**
     * このインスタンスにおいてスナップショットの保存を行うべきかを返す。
     *
     * スナップショット保存に対応するゲームであっても、
     * 必ずしもすべてのインスタンスにおいてスナップショット保存を行うべきとは限らない。
     * たとえば多人数プレイ時には、複数のクライアントで同一のゲームが実行される。
     * スナップショットを保存するのはそのうちの一つのインスタンスのみでよい。
     * 本メソッドはそのような場合に、自身がスナップショットを保存すべきかどうかを判定するために用いることができる。
     *
     * スナップショット保存に対応するゲームは、このメソッドが真を返す時にのみ `Game#saveSnapshot()` を呼び出すべきである。
     * 戻り値は、スナップショットの保存を行うべきであれば真、でなければ偽である。
     */
    Game.prototype.shouldSaveSnapshot = function () {
        return this.handlerSet.shouldSaveSnapshot();
    };
    /**
     * スナップショットを保存する。
     *
     * 引数 `snapshot` の値は、スナップショット読み込み関数 (snapshot loader) に引数として渡されるものになる。
     * このメソッドを呼び出すゲームは必ずsnapshot loaderを実装しなければならない。
     * (snapshot loaderとは、idが "snapshotLoader" であるglobalなScriptAssetに定義された関数である。
     * 詳細はスナップショットについてのドキュメントを参照)
     *
     * このメソッドは `Game#shouldSaveSnapshot()` が真を返す `Game` に対してのみ呼び出されるべきである。
     * そうでない場合、このメソッドの動作は不定である。
     *
     * このメソッドを呼び出す推奨タイミングは、Trigger `Game#snapshotRequest` をhandleすることで得られる。
     * ゲームは、 `snapshotRequest` がfireされたとき (それが可能なタイミングであれば) スナップショットを
     * 生成してこのメソッドに渡すべきである。ゲーム開発者は推奨タイミング以外でもこのメソッドを呼び出すことができる。
     * ただしその頻度は推奨タイミングの発火頻度と同程度に抑えられるべきである。
     *
     * @param snapshot 保存するスナップショット。JSONとして妥当な値でなければならない。
     * @param timestamp 保存時の時刻。 `g.TimestampEvent` を利用するゲームの場合、それらと同じ基準の時間情報を与えなければならない。
     */
    Game.prototype.saveSnapshot = function (snapshot, timestamp) {
        this.handlerSet.saveSnapshot(this.age, snapshot, this.random.serialize(), timestamp);
    };
    /**
     * 現在時刻を取得する。
     *
     * 値は1970-01-01T00:00:00Zからのミリ秒での経過時刻である。
     * `Date.now()` と異なり、この値は消化されたティックの数から算出される擬似的な時刻である。
     */
    Game.prototype.getCurrentTime = function () {
        return this.handlerSet.getCurrentTime();
    };
    /**
     * このインスタンスがアクティブインスタンスであるかどうか返す。
     *
     * ゲーム開発者は、この値の真偽に起因する処理で、ゲームのローカルな実行状態を変更してはならず、
     * `raiseEvent()` などによって、グローバルな状態を更新する必要がある。
     */
    Game.prototype.isActiveInstance = function () {
        return this.handlerSet.getInstanceType() === "active";
    };
    /**
     * @ignore
     */
    Game.prototype._pushPostTickTask = function (fun, owner) {
        this._postTickTasks.push({
            type: 3 /* Call */,
            fun: fun,
            owner: owner
        });
    };
    /**
     * @private
     */
    Game.prototype._normalizeConfiguration = function (gameConfiguration) {
        if (!gameConfiguration)
            throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_normalizeConfiguration: invalid arguments");
        if (gameConfiguration.assets == null)
            gameConfiguration.assets = {};
        if (gameConfiguration.fps == null)
            gameConfiguration.fps = 30;
        if (typeof gameConfiguration.fps !== "number")
            throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_normalizeConfiguration: fps must be given as a number");
        if (!(0 <= gameConfiguration.fps && gameConfiguration.fps <= 60))
            throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_normalizeConfiguration: fps must be a number in (0, 60].");
        if (typeof gameConfiguration.width !== "number")
            throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_normalizeConfiguration: width must be given as a number");
        if (typeof gameConfiguration.height !== "number")
            throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_normalizeConfiguration: height must be given as a number");
        return gameConfiguration;
    };
    /**
     * @private
     */
    Game.prototype._setAudioPlaybackRate = function (playbackRate) {
        this.audio._setPlaybackRate(playbackRate);
    };
    /**
     * @private
     */
    Game.prototype._setMuted = function (muted) {
        this.audio._setMuted(muted);
    };
    /**
     * g.OperationEventのデータをデコードする。
     * @private
     */
    Game.prototype._decodeOperationPluginOperation = function (code, op) {
        var plugin = this.operationPluginManager.plugins[code];
        if (!plugin || !plugin.decode)
            return op;
        return plugin.decode(op);
    };
    /**
     * ゲーム状態のリセット。
     * @private
     */
    Game.prototype._reset = function (param) {
        this.operationPluginManager.stopAll();
        if (this.scene()) {
            while (this.scene() !== this._initialScene) {
                this.popScene();
                this._flushPostTickTasks();
            }
            if (!this.isLoaded) {
                // _initialSceneの読み込みが終わっていない: _initialScene自体は使い回すので単にpopする。
                this.scenes.pop();
            }
        }
        if (param) {
            if (param.age !== undefined)
                this.age = param.age;
            if (param.randGenSer !== undefined) {
                this.random = XorshiftRandomGenerator_1.XorshiftRandomGenerator.deserialize(param.randGenSer);
            }
            else if (param.randSeed !== undefined) {
                this.random = new XorshiftRandomGenerator_1.XorshiftRandomGenerator(param.randSeed);
            }
        }
        this.audio._reset();
        this._onLoad.removeAll({ func: this._handleLoad, owner: this });
        this.onJoin.removeAll();
        this.onLeave.removeAll();
        this.onSeed.removeAll();
        this.onResized.removeAll();
        this.onSkipChange.removeAll();
        this.onSceneChange.removeAll();
        this.handlerSet.removeAllEventFilters();
        this.isSkipping = false;
        this.onSkipChange.add(this._handleSkipChange, this);
        this._idx = 0;
        this._localIdx = 0;
        this._cameraIdx = 0;
        this.db = {};
        this._localDb = {};
        this._modified = true;
        this.loadingScene = undefined;
        this._focusingCamera = undefined;
        this.lastLocalTickMode = null;
        this.lastTickGenerationMode = null;
        this.onSnapshotRequest.removeAll();
        this._postTickTasks = [];
        this._eventConverter = new EventConverter_1.EventConverter({ game: this, playerId: this.selfId }); // TODO: selfId が null のときの挙動
        this._pointEventResolver = new PointEventResolver_1.PointEventResolver({ sourceResolver: this, playerId: this.selfId }); // TODO: selfId が null のときの挙動
        this._isTerminated = false;
        this.vars = {};
        this.surfaceAtlasSet.destroy();
        this.surfaceAtlasSet = new SurfaceAtlasSet_1.SurfaceAtlasSet({ resourceFactory: this.resourceFactory });
        switch (this._configuration.defaultLoadingScene) {
            case "none":
                // Note: 何も描画しない実装として利用している
                this._defaultLoadingScene = new LoadingScene_1.LoadingScene({ game: this });
                break;
            case "compact":
                this._defaultLoadingScene = new DefaultLoadingScene_1.DefaultLoadingScene({ game: this, style: "compact" });
                break;
            default:
                this._defaultLoadingScene = new DefaultLoadingScene_1.DefaultLoadingScene({ game: this });
                break;
        }
    };
    /**
     * ゲームを破棄する。
     * エンジンユーザとコンテンツに開放された一部プロパティ(external, vars)は維持する点に注意。
     * @private
     */
    Game.prototype._destroy = function () {
        // ユーザコードを扱う操作プラグインを真っ先に破棄
        this.operationPluginManager.destroy();
        // 到達できるシーンを全て破棄
        if (this.scene()) {
            while (this.scene() !== this._initialScene) {
                this.popScene();
                this._flushPostTickTasks();
            }
        }
        this._initialScene.destroy();
        if (this.loadingScene && !this.loadingScene.destroyed()) {
            this.loadingScene.destroy();
        }
        if (!this._defaultLoadingScene.destroyed()) {
            this._defaultLoadingScene.destroy();
        }
        // NOTE: fps, width, height, external, vars はそのまま保持しておく
        this.db = undefined;
        this.renderers = undefined;
        this.scenes = undefined;
        this.random = undefined;
        this._modified = false;
        this.age = 0;
        this.assets = undefined; // this._initialScene.assets のエイリアスなので、特に破棄処理はしない。
        this.isLoaded = false;
        this.loadingScene = undefined;
        this.assetBase = "";
        this.selfId = undefined;
        this.audio.music.stopAll();
        this.audio.sound.stopAll();
        this.audio = undefined;
        this.defaultAudioSystemId = undefined;
        this.handlerSet = undefined;
        this.onJoin.destroy();
        this.onJoin = undefined;
        this.onLeave.destroy();
        this.onLeave = undefined;
        this.onSeed.destroy();
        this.onSeed = undefined;
        this.onPlayerInfo.destroy();
        this.onPlayerInfo = undefined;
        this.onResized.destroy();
        this.onResized = undefined;
        this.onSkipChange.destroy();
        this.onSkipChange = undefined;
        this.onSceneChange.destroy();
        this.onSceneChange = undefined;
        this.onSnapshotRequest.destroy();
        this.onSnapshotRequest = undefined;
        this.join = undefined;
        this.leave = undefined;
        this.seed = undefined;
        this.playerInfo = undefined;
        this.snapshotRequest = undefined;
        this.resized = undefined;
        this.skippingChanged = undefined;
        this._sceneChanged = undefined;
        this._loaded = undefined;
        this._started = undefined;
        this._operationPluginOperated = undefined;
        this._onSceneChange.destroy();
        this._onSceneChange = undefined;
        this._onLoad.destroy();
        this._onLoad = undefined;
        this._onStart.destroy();
        this._onStart = undefined;
        // TODO より能動的にdestroy処理を入れるべきかもしれない
        this.resourceFactory = undefined;
        this.storage = undefined;
        this.playId = undefined;
        this.operationPlugins = undefined; // this._operationPluginManager.pluginsのエイリアスなので、特に破棄処理はしない。
        this._eventTriggerMap = undefined;
        this._initialScene = undefined;
        this._defaultLoadingScene = undefined;
        this._main = undefined;
        this._mainFunc = undefined;
        this._mainParameter = undefined;
        this._assetManager.destroy();
        this._assetManager = undefined;
        this._eventConverter = undefined;
        this._pointEventResolver = undefined;
        this.operationPluginManager = undefined;
        this._onOperationPluginOperated.destroy();
        this._onOperationPluginOperated = undefined;
        this._idx = 0;
        this._localDb = {};
        this._localIdx = 0;
        this._cameraIdx = 0;
        this._isTerminated = true;
        this._focusingCamera = undefined;
        this._configuration = undefined;
        this._postTickTasks = [];
        this.surfaceAtlasSet.destroy();
        this.surfaceAtlasSet = undefined;
    };
    /**
     * ゲームを開始する。
     *
     * 存在するシーンをすべて(_initialScene以外; あるなら)破棄し、グローバルアセットを読み込み、完了後ゲーム開発者の実装コードの実行を開始する。
     * このメソッドの二度目以降の呼び出しの前には、 `this._reset()` を呼び出す必要がある。
     * @param param ゲームのエントリポイントに渡す値
     * @private
     */
    Game.prototype._loadAndStart = function (param) {
        this._mainParameter = param || {};
        if (!this.isLoaded) {
            this._onLoad.add(this._handleLoad, this);
            this.pushScene(this._initialScene);
            this._flushPostTickTasks();
        }
        else {
            this._handleLoad();
        }
    };
    /**
     * グローバルアセットの読み込みを開始する。
     * 単体テスト用 (mainSceneなど特定アセットの存在を前提にする_loadAndStart()はテストに使いにくい) なので、通常ゲーム開発者が利用することはない
     * @private
     */
    Game.prototype._startLoadingGlobalAssets = function () {
        if (this.isLoaded)
            throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_startLoadingGlobalAssets: already loaded.");
        this.pushScene(this._initialScene);
        this._flushPostTickTasks();
    };
    /**
     * @private
     */
    Game.prototype._updateEventTriggers = function (scene) {
        this._modified = true;
        if (!scene) {
            this._eventTriggerMap.message = undefined;
            this._eventTriggerMap["point-down"] = undefined;
            this._eventTriggerMap["point-move"] = undefined;
            this._eventTriggerMap["point-up"] = undefined;
            this._eventTriggerMap.operation = undefined;
            return;
        }
        this._eventTriggerMap.message = scene.onMessage;
        this._eventTriggerMap["point-down"] = scene.onPointDownCapture;
        this._eventTriggerMap["point-move"] = scene.onPointMoveCapture;
        this._eventTriggerMap["point-up"] = scene.onPointUpCapture;
        this._eventTriggerMap.operation = scene.onOperation;
        scene._activate();
    };
    /**
     * @private
     */
    Game.prototype._handleInitialSceneLoad = function () {
        this._initialScene.onLoad.remove(this._handleInitialSceneLoad, this);
        this.assets = this._initialScene.assets;
        this.isLoaded = true;
        this._onLoad.fire(this);
    };
    /**
     * @ignore
     */
    Game.prototype._handleOperationPluginOperated = function (op) {
        var pev = this._eventConverter.makePlaylogOperationEvent(op);
        this.handlerSet.raiseEvent(pev);
    };
    /**
     * @ignore
     */
    Game.prototype._handleSceneChanged = function (scene) {
        this._updateEventTriggers(scene);
        var local = scene ? scene.local : "full-local";
        var tickGenerationMode = scene ? scene.tickGenerationMode : "by-clock";
        if (this.lastLocalTickMode === local && this.lastTickGenerationMode === tickGenerationMode) {
            return;
        }
        this.lastLocalTickMode = local;
        this.lastTickGenerationMode = tickGenerationMode;
        this.handlerSet.changeSceneMode({
            local: local,
            tickGenerationMode: tickGenerationMode
        });
    };
    /**
     * @private
     */
    Game.prototype._terminateGame = function () {
        // do nothing.
    };
    /**
     * post-tick タスクを実行する。
     *
     * `pushScene()` などのシーン遷移や `_pushPostTickTask()` によって要求された post-tick タスクを実行する。
     * 通常このメソッドは、毎フレーム一度、フレームの最後に呼び出されることを期待する (`Game#tick()` がこの呼び出しを行う)。
     * ただしゲーム開始時 (グローバルアセット読み込み・スナップショットローダ起動後またはmainScene実行開始時) に関しては、
     * シーン追加がゲーム開発者の記述によらない (`tick()` の外側である) ため、それぞれの箇所で明示的にこのメソッドを呼び出す。
     * @private
     */
    Game.prototype._flushPostTickTasks = function () {
        do {
            var reqs = this._postTickTasks;
            this._postTickTasks = [];
            for (var i = 0; i < reqs.length; ++i) {
                var req = reqs[i];
                switch (req.type) {
                    case 0 /* PushScene */:
                        var oldScene = this.scene();
                        if (oldScene) {
                            oldScene._deactivate();
                        }
                        this._doPushScene(req.scene);
                        break;
                    case 1 /* ReplaceScene */:
                        // Note: replaceSceneの場合、pop時点では_sceneChangedをfireしない。_doPushScene() で一度だけfireする。
                        this._doPopScene(req.preserveCurrent, false);
                        this._doPushScene(req.scene);
                        break;
                    case 2 /* PopScene */:
                        this._doPopScene(req.preserveCurrent, true);
                        break;
                    case 3 /* Call */:
                        req.fun.call(req.owner);
                        break;
                    default:
                        throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_flushPostTickTasks: unknown post-tick task type.");
                }
            }
        } while (this._postTickTasks.length > 0); // flush中に追加される限りflushを続行する
    };
    /**
     * @ignore
     */
    Game.prototype._handleSkipChange = function (isSkipping) {
        this.isSkipping = isSkipping;
    };
    Game.prototype._doPopScene = function (preserveCurrent, fireSceneChanged) {
        var scene = this.scenes.pop();
        if (!scene)
            throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_doPopScene: invalid call; scene stack underflow");
        if (scene === this._initialScene)
            throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_doPopScene: invalid call; attempting to pop the initial scene");
        if (!preserveCurrent)
            scene.destroy();
        if (fireSceneChanged) {
            var nextScene = this.scene();
            this.onSceneChange.fire(nextScene);
            this._onSceneChange.fire(nextScene);
        }
    };
    Game.prototype._handleLoad = function () {
        this.operationPluginManager.initialize();
        this.operationPlugins = this.operationPluginManager.plugins;
        if (this._mainFunc) {
            this._mainFunc(this._runtimeValueBase, this._mainParameter || {});
        }
        else if (this._main) {
            var mainFun = this._moduleManager._require(this._main);
            if (!mainFun || typeof mainFun !== "function")
                throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_handleLoad: Entry point " + this._main + " not found.");
            mainFun(this._mainParameter);
        }
        else {
            throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_handleLoad: does not have an entry point");
        }
        this._flushPostTickTasks(); // シーン遷移を要求する可能性がある(というかまずする)
        this._onStart.fire();
    };
    Game.prototype._doPushScene = function (scene, loadingScene) {
        if (!loadingScene)
            loadingScene = this.loadingScene || this._defaultLoadingScene;
        this.scenes.push(scene);
        if (scene._needsLoading() && scene._loadingState !== "loaded-fired") {
            if (this._defaultLoadingScene._needsLoading())
                throw ExceptionFactory_1.ExceptionFactory.createAssertionError("Game#_doPushScene: _defaultLoadingScene must not depend on any assets/storages.");
            this._doPushScene(loadingScene, this._defaultLoadingScene);
            loadingScene.reset(scene);
        }
        else {
            this.onSceneChange.fire(scene);
            this._onSceneChange.fire(scene);
            // 読み込み待ちのアセットがなければその場で(loadingSceneに任せず)ロード、SceneReadyを発生させてからLoadingSceneEndを起こす。
            if (!scene._loaded) {
                scene._load();
                this._pushPostTickTask(scene._fireLoaded, scene);
            }
        }
        this._modified = true;
    };
    return Game;
}());
exports.Game = Game;
