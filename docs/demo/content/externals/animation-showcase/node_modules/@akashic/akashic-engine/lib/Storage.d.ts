import { StorageLoadError } from "@akashic/pdi-types";
/**
 * 操作対象とするストレージのリージョンを表す。
 */
export declare enum StorageRegion {
    /**
     * slotsを表す。
     */
    Slots = 1,
    /**
     * scoresを表す。
     */
    Scores = 2,
    /**
     * countsを表す。
     */
    Counts = 3,
    /**
     * valuesを表す。
     */
    Values = 4
}
/**
 * 一括取得を行う場合のソート順。
 */
export declare enum StorageOrder {
    /**
     * 昇順。
     */
    Asc = 0,
    /**
     * 降順。
     */
    Desc = 1
}
/**
 * 条件を表す。
 */
export declare enum StorageCondition {
    /**
     * 等価を表す（==）。
     */
    Equal = 1,
    /**
     * 「より大きい」を表す（>）。
     */
    GreaterThan = 2,
    /**
     * 「より小さい」を表す（<）。
     */
    LessThan = 3
}
/**
 * Countsリージョンへの書き込み操作種別を表す。
 */
export declare enum StorageCountsOperation {
    /**
     * インクリメント操作を実行する。
     */
    Incr = 1,
    /**
     * デクリメント操作を実行する。
     */
    Decr = 2
}
/**
 * `StorageWriter#write()` に指定する書き込みオプション。
 */
export interface StorageWriteOption {
    /**
     * 比較条件を表す。
     */
    condition?: StorageCondition;
    /**
     * 現在保存されている値と比較する値。
     */
    comparisonValue?: string | number;
    /**
     * 操作種別。
     */
    operation?: StorageCountsOperation;
}
/**
 * `StorageReadKey` に指定する取得オプション。
 */
export interface StorageReadOption {
    /**
     * リージョンキーでソートして一括取得を行う場合のソート順。
     */
    keyOrder?: StorageOrder;
    /**
     * 値でソートして一括取得を行う場合のソート順。
     */
    valueOrder?: StorageOrder;
}
/**
 * ストレージキーを表す。
 */
export interface StorageKey {
    /**
     * リージョン。
     */
    region: StorageRegion;
    /**
     * リージョンキー。
     */
    regionKey: string;
    /**
     * ゲームID。
     */
    gameId?: string;
    /**
     * ユーザID。
     */
    userId?: string;
}
/**
 * 値の読み込み時に指定するキーを表す。
 */
export interface StorageReadKey extends StorageKey {
    /**
     * 取得オプション。
     */
    option?: StorageReadOption;
}
/**
 * ストレージキーに対応する値を表す。
 */
export interface StorageValue {
    /**
     * 取得結果を表すデータ。
     */
    data: number | string;
    /**
     * データタグ。
     */
    tag?: string;
    /**
     * この `StorageValue` に対応する `StorageKey`。
     */
    storageKey?: StorageKey;
}
/**
 * `StorageLoader` の読み込みまたは読み込み失敗を受け取るハンドラのインターフェース定義。
 * 通常、このインターフェースをゲーム開発者が利用する必要はない。
 */
export interface StorageLoaderHandler {
    /**
     * 読み込失敗の通知を受ける関数。
     * @private
     */
    _onStorageLoadError(error: StorageLoadError): void;
    /**
     * 読み込完了の通知を受ける関数。
     * @private
     */
    _onStorageLoaded(): void;
}
/**
 * ストレージの値を保持するクラス。
 * ゲーム開発者がこのクラスのインスタンスを直接生成することはない。
 */
export declare class StorageValueStore {
    /**
     * @private
     */
    _keys: StorageKey[];
    /**
     * @private
     */
    _values: StorageValue[][] | undefined;
    constructor(keys: StorageKey[], values?: StorageValue[][]);
    /**
     * 値の配列を `StorageKey` またはインデックスから取得する。
     * 通常、インデックスは `Scene` のコンストラクタに指定した `storageKeys` のインデックスに対応する。
     * @param keyOrIndex `StorageKey` 又はインデックス
     */
    get(keyOrIndex: StorageReadKey | number): StorageValue[] | undefined;
    /**
     * 値を `StorageKey` またはインデックスから取得する。
     * 対応する値が複数ある場合は、先頭の値を取得する。
     * 通常、インデックスは `Scene` のコンストラクタに指定した `storageKeys` のインデックスに対応する。
     * @param keyOrIndex `StorageKey` 又はインデックス
     */
    getOne(keyOrIndex: StorageReadKey | number): StorageValue | undefined;
}
export declare type StorageValueStoreSerialization = any;
/**
 * ストレージの値をロードするクラス。
 * ゲーム開発者がこのクラスのインスタンスを直接生成することはなく、
 * 本クラスの機能を利用することもない。
 */
export declare class StorageLoader {
    /**
     * @private
     */
    _loaded: boolean;
    /**
     * @private
     */
    _storage: Storage;
    /**
     * @private
     */
    _valueStore: StorageValueStore;
    /**
     * @private
     */
    _handler: StorageLoaderHandler;
    /**
     * @private
     */
    _valueStoreSerialization: StorageValueStoreSerialization;
    constructor(storage: Storage, keys: StorageReadKey[], serialization?: StorageValueStoreSerialization);
    /**
     * @private
     */
    _load(handler: StorageLoaderHandler): void;
    /**
     * @private
     */
    _onLoaded(values: StorageValue[][], serialization?: StorageValueStoreSerialization): void;
    /**
     * @private
     */
    _onError(error: StorageLoadError): void;
}
/**
 * ストレージ。
 * ゲーム開発者がこのクラスのインスタンスを直接生成することはない。
 */
export declare class Storage {
    /**
     * @private
     */
    _write: ((key: StorageKey, value: StorageValue, option?: StorageWriteOption) => void) | undefined;
    /**
     * @private
     */
    _load: ((keys: StorageReadKey[], load: StorageLoader, serialization?: StorageValueStoreSerialization) => void) | undefined;
    /**
     * @private
     */
    _requestedKeysForJoinPlayer: StorageReadKey[] | undefined;
    /**
     * ストレージに値を書き込む。
     * @param key ストレージキーを表す `StorageKey`
     * @param value 値を表す `StorageValue`
     * @param option 書き込みオプション
     */
    write(key: StorageKey, value: StorageValue, option?: StorageWriteOption): void;
    /**
     * 参加してくるプレイヤーの値をストレージから取得することを要求する。
     * 取得した値は `JoinEvent#storageValues` に格納される。
     * @param keys ストレージキーを表す `StorageReadKey` の配列。`StorageReadKey#userId` は無視される。
     */
    requestValuesForJoinPlayer(keys: StorageReadKey[]): void;
    /**
     * @private
     */
    _createLoader(keys: StorageReadKey[], serialization?: StorageValueStoreSerialization): StorageLoader;
    /**
     * @private
     */
    _registerWrite(write: (key: StorageKey, value: StorageValue, option?: StorageWriteOption) => void): void;
    /**
     * @private
     */
    _registerLoad(load: (keys: StorageKey[], loader: StorageLoader, serialization?: StorageValueStoreSerialization) => void): void;
}
