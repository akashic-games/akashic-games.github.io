"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TextAlign_1 = require("../TextAlign");
var Util_1 = require("../Util");
var CacheableE_1 = require("./CacheableE");
/**
 * 単一行のテキストを描画するエンティティ。
 * 本クラスの利用には `BitmapFont` または `DynamicFont` が必要となる。
 */
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    /**
     * 各種パラメータを指定して `Label` のインスタンスを生成する。
     * @param param このエンティティに指定するパラメータ
     */
    function Label(param) {
        var _this = _super.call(this, param) || this;
        _this.text = param.text;
        _this.font = param.font;
        _this.textAlign = param.textAlign != null ? param.textAlign : TextAlign_1.TextAlign.Left;
        _this.glyphs = new Array(param.text.length);
        _this.fontSize = param.fontSize;
        _this.maxWidth = param.maxWidth;
        _this.widthAutoAdjust = param.widthAutoAdjust != null ? param.widthAutoAdjust : true;
        _this.textColor = param.textColor;
        _this._realTextAlign = "left";
        _this._textWidth = 0;
        _this._overhangLeft = 0;
        _this._overhangRight = 0;
        _this._invalidateSelf();
        return _this;
    }
    /**
     * `width` と `textAlign` を設定し、 `widthAutoAdjust` を `false` に設定する。
     *
     * このメソッドは `this.textAlign` を設定するためのユーティリティである。
     * `textAlign` を `"left"` (または非推奨の旧称 `TextAlign.Left`) 以外に設定する場合には、
     * 通常 `width` や `widthAutoAdjust` も設定する必要があるため、それらをまとめて行う。
     * このメソッドの呼び出し後、 `this.invalidate()` を呼び出す必要がある。
     * @param width 幅
     * @param textAlign テキストの描画位置
     */
    Label.prototype.aligning = function (width, textAlign) {
        this.width = width;
        this.widthAutoAdjust = false;
        this.textAlign = textAlign;
    };
    /**
     * このエンティティの描画キャッシュ無効化をエンジンに通知する。
     * このメソッドを呼び出し後、描画キャッシュの再構築が行われ、各 `Renderer` に描画内容の変更が反映される。
     */
    Label.prototype.invalidate = function () {
        this._invalidateSelf();
        _super.prototype.invalidate.call(this);
    };
    /**
     * Label自身の描画を行う。
     */
    Label.prototype.renderSelfFromCache = function (renderer) {
        // glyphのはみ出し量に応じて、描画先のX座標を調整する。
        var destOffsetX;
        switch (this._realTextAlign) {
            case "center":
                destOffsetX = this.widthAutoAdjust ? this._overhangLeft : 0;
                break;
            case "right":
                destOffsetX = this.widthAutoAdjust ? this._overhangLeft : this._overhangRight;
                break;
            default:
                destOffsetX = this._overhangLeft;
                break;
        }
        renderer.drawImage(this._cache, 0, 0, this._cacheSize.width + CacheableE_1.CacheableE.PADDING, this._cacheSize.height + CacheableE_1.CacheableE.PADDING, destOffsetX, 0);
    };
    Label.prototype.renderCache = function (renderer) {
        if (!this.fontSize || this.height <= 0 || this._textWidth <= 0) {
            return;
        }
        var scale = this.maxWidth && this.maxWidth > 0 && this.maxWidth < this._textWidth ? this.maxWidth / this._textWidth : 1;
        var offsetX = 0;
        switch (this._realTextAlign) {
            case "center":
                offsetX = this.width / 2 - ((this._textWidth + this._overhangLeft) / 2) * scale;
                break;
            case "right":
                offsetX = this.width - (this._textWidth + this._overhangLeft) * scale;
                break;
            default:
                offsetX -= this._overhangLeft * scale;
                break;
        }
        renderer.translate(offsetX, 0);
        if (scale !== 1) {
            renderer.transform([scale, 0, 0, 1, 0, 0]);
        }
        renderer.save();
        var glyphScale = this.fontSize / this.font.size;
        for (var i = 0; i < this.glyphs.length; ++i) {
            var glyph = this.glyphs[i];
            var glyphWidth = glyph.advanceWidth * glyphScale;
            var code = glyph.code;
            if (!glyph.isSurfaceValid) {
                glyph = this.font.glyphForCharacter(code);
                if (!glyph) {
                    this._outputOfWarnLogWithNoGlyph(code, "renderCache()");
                    continue;
                }
            }
            if (glyph.surface) {
                // 非空白文字
                renderer.save();
                renderer.transform([glyphScale, 0, 0, glyphScale, 0, 0]);
                renderer.drawImage(glyph.surface, glyph.x, glyph.y, glyph.width, glyph.height, glyph.offsetX, glyph.offsetY);
                renderer.restore();
            }
            renderer.translate(glyphWidth, 0);
        }
        renderer.restore();
        renderer.save();
        if (this.textColor) {
            renderer.setCompositeOperation("source-atop");
            renderer.fillRect(0, 0, this._textWidth, this.height, this.textColor);
        }
        renderer.restore();
    };
    /**
     * このエンティティを破棄する。
     * 利用している `BitmapFont` の破棄は行わないため、 `BitmapFont` の破棄はコンテンツ製作者が明示的に行う必要がある。
     */
    Label.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    Label.prototype._invalidateSelf = function () {
        this.glyphs.length = 0;
        this._textWidth = 0;
        var align = this.textAlign;
        this._realTextAlign = typeof align === "string" ? align : Util_1.Util.enumToSnakeCase(TextAlign_1.TextAlign, align);
        if (!this.fontSize) {
            this.height = 0;
            return;
        }
        var effectiveTextLastIndex = this.text.length - 1;
        // 右のはみだし量を求めるため、text内での有効な最後の glyph のindexを解決する。
        for (var i = this.text.length - 1; i >= 0; --i) {
            var code = Util_1.Util.charCodeAt(this.text, i);
            if (!code) {
                continue;
            }
            var glyph = this.font.glyphForCharacter(code);
            if (glyph && glyph.width !== 0 && glyph.advanceWidth !== 0) {
                effectiveTextLastIndex = i;
                break;
            }
        }
        var maxHeight = 0;
        var glyphScale = this.font.size > 0 ? this.fontSize / this.font.size : 0;
        for (var i = 0; i <= effectiveTextLastIndex; ++i) {
            var code_1 = Util_1.Util.charCodeAt(this.text, i);
            if (!code_1) {
                continue;
            }
            var glyph = this.font.glyphForCharacter(code_1);
            if (!glyph) {
                this._outputOfWarnLogWithNoGlyph(code_1, "_invalidateSelf()");
                continue;
            }
            if (glyph.width < 0 || glyph.height < 0) {
                continue;
            }
            if (glyph.x < 0 || glyph.y < 0) {
                continue;
            }
            this.glyphs.push(glyph);
            // Font に StrokeWidth が設定されている場合、文字の描画内容は、描画の基準点よりも左にはみ出る場合や、glyph.advanceWidth より右にはみ出る場合がある。
            // キャッシュサーフェスの幅は、最初の文字と最後の文字のはみ出し部分を考慮して求める必要がある。
            var overhang = 0;
            if (i === 0) {
                this._overhangLeft = Math.min(glyph.offsetX, 0);
                overhang = -this._overhangLeft;
            }
            if (i === effectiveTextLastIndex) {
                this._overhangRight = Math.max(glyph.width + glyph.offsetX - glyph.advanceWidth, 0);
                overhang += this._overhangRight;
            }
            this._textWidth += (glyph.advanceWidth + overhang) * glyphScale;
            var height = glyph.offsetY + glyph.height;
            if (maxHeight < height) {
                maxHeight = height;
            }
        }
        if (this.widthAutoAdjust) {
            this.width = this._textWidth;
        }
        this.height = maxHeight * glyphScale;
    };
    Label.prototype._outputOfWarnLogWithNoGlyph = function (code, functionName) {
        var str = code & 0xffff0000 ? String.fromCharCode((code & 0xffff0000) >>> 16, code & 0xffff) : String.fromCharCode(code);
        console.warn("Label#" +
            functionName +
            ": failed to get a glyph for '" +
            str +
            "' " +
            "(BitmapFont might not have the glyph or DynamicFont might create a glyph larger than its atlas).");
    };
    return Label;
}(CacheableE_1.CacheableE));
exports.Label = Label;
