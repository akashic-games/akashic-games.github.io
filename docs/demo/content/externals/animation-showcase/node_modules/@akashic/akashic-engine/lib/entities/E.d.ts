import { CommonArea, CommonOffset, CommonRect, Renderer } from "@akashic/pdi-types";
import { Trigger } from "@akashic/trigger";
import { Camera } from "../Camera";
import { EntityStateFlags } from "../EntityStateFlags";
import { MessageEvent, PointDownEventBase, PointEventBase, PointMoveEventBase, PointSourceBase, PointUpEventBase } from "../Event";
import { Game } from "../Game";
import { Matrix } from "../Matrix";
import { Object2D, Object2DParameterObject } from "../Object2D";
import { Scene } from "../Scene";
import { ShaderProgram } from "../ShaderProgram";
/**
 * ポインティングソースによって対象となるエンティティを表すインターフェース。
 * エンティティとエンティティから見た相対座標によって構成される。
 */
export interface PointSource extends PointSourceBase<E> {
}
export declare type PointEvent = PointEventBase<E>;
/**
 * ポインティング操作の開始を表すイベント。
 */
export declare class PointDownEvent extends PointDownEventBase<E> {
}
/**
 * ポインティング操作の終了を表すイベント。
 * PointDownEvent後にのみ発生する。
 *
 * PointUpEvent#startDeltaによってPointDownEvent時からの移動量が、
 * PointUpEvent#prevDeltaによって直近のPointMoveEventからの移動量が取得出来る。
 * PointUpEvent#pointにはPointDownEvent#pointと同じ値が格納される。
 */
export declare class PointUpEvent extends PointUpEventBase<E> {
}
/**
 * ポインティング操作の移動を表すイベント。
 * PointDownEvent後にのみ発生するため、MouseMove相当のものが本イベントとして発生することはない。
 *
 * PointMoveEvent#startDeltaによってPointDownEvent時からの移動量が、
 * PointMoveEvent#prevDeltaによって直近のPointMoveEventからの移動量が取得出来る。
 * PointMoveEvent#pointにはPointMoveEvent#pointと同じ値が格納される。
 *
 * 本イベントは、プレイヤーがポインティングデバイスを移動していなくても、
 * カメラの移動等視覚的にポイントが変化している場合にも発生する。
 */
export declare class PointMoveEvent extends PointMoveEventBase<E> {
}
/**
 * `E` のコンストラクタに渡すことができるパラメータ。
 * 各メンバの詳細は `E` の同名メンバの説明を参照すること。
 */
export interface EParameterObject extends Object2DParameterObject {
    /**
     * このエンティティが属するシーン。
     */
    scene: Scene;
    /**
     * このエンティティがローカルであるか否か。
     * コンストラクタで真が指定された時、または属するシーンがローカルシーンまたはローカルティック補間シーンである時、この値は真である。
     *
     * この値が真である場合、このエンティティに対する point イベントはこのゲームインスタンスにのみ通知され、
     * 他の参加者・視聴者には通知されない。また真である場合、 `id` の値の一意性は保証されない。
     * @default false
     */
    local?: boolean;
    /**
     * このエンティティの親
     * @default undefined
     */
    parent?: E | Scene;
    /**
     * このエンティティの全子エンティティ。
     * @default undefined
     */
    children?: E[];
    /**
     * プレイヤーにとって触れられるオブジェクトであるかを表す。
     * この値が偽である場合、ポインティングイベントの対象にならない。
     * @default false
     */
    touchable?: boolean;
    /**
     * このエンティティの表示状態。
     * @default false
     */
    hidden?: boolean;
    /**
     * このエンティティに割り振られる `E#id` の値。
     * エンジンが一意の ID を設定するため、通常指定する必要はない。
     * この値は、スナップショットローダがエンティティを復元する際にのみ指定されるべきである。
     * @default undefined
     */
    id?: number;
    /**
     * ゲーム開発者向けのタグ情報管理コンテナ。
     * この値はゲームエンジンのロジックからは使用されず、ゲーム開発者は任意の目的に使用してよい。
     * @default undefined
     */
    tag?: any;
    /**
     * このエンティティの描画時に利用されるシェーダプログラム。
     * このエンティティの `renderer#isSupportedShaderProgram()` が偽を返した場合、
     * `renderer#setShaderProgram()` は呼ばれないことに注意。
     *
     * また `g.FilledRect` やその親エンティティに本値を指定した場合、対象の `g.FilledRect` の描画結果は不定である。
     * これは実装上の制限に基づく現バージョンの仕様である。
     *
     * この値に `undefined` を指定した場合、親のシェーダプログラムを利用する。
     * この値に `null` を指定した場合、明示的にデフォルトのシェーダプログラムを利用する。
     *
     * @default undefined
     */
    shaderProgram?: ShaderProgram;
}
/**
 * akashic-engineに描画される全てのエンティティを表す基底クラス。
 * 本クラス単体に描画処理にはなく、直接利用する場合はchildrenを利用したコンテナとして程度で利用される。
 */
export declare class E extends Object2D implements CommonArea {
    /**
     * このエンティティに割り振られる `Game` 単位で一意のID。(ただし `local` が真である場合を除く)
     */
    id: number;
    /**
     * このエンティティがローカルであるか否か。
     * コンストラクタで真が指定された時、または属するシーンがローカルシーンまたはローカルティック補間シーンである時、この値は真である。
     *
     * この値が真である場合、このエンティティに対する point イベントはこのゲームインスタンスにのみ通知され、
     * 他の参加者・視聴者には通知されない。また真である場合、 `id` の値の一意性は保証されない。
     *
     * この値は参照のためにのみ公開されている。ゲーム開発者はこの値を直接変更してはならない。
     */
    local: boolean;
    /**
     * このエンティティの全子エンティティ。
     * 子エンティティが存在しない場合、本フィールドの値は `undefined` または空配列である。
     */
    children: E[] | undefined;
    /**
     * 親。
     */
    parent: E | Scene | undefined;
    /**
     * このエンティティが属するシーン。
     */
    scene: Scene;
    /**
     * 様々な状態を表すビットフラグ。
     */
    state: EntityStateFlags;
    /**
     * ゲーム開発者向けのタグ情報管理コンテナ。
     * この値はゲームエンジンのロジックからは使用されず、ゲーム開発者は任意の目的に使用してよい。
     */
    tag: any;
    /**
     * このエンティティの描画時に利用されるシェーダプログラム。
     * `isSupportedShaderProgram()` が偽を返す `g.Rendere` で描画される時、 `g.Renderer#setShaderProgram()` は呼ばれないことに注意。
     *
     * また `g.FilledRect` やその親エンティティに本値を指定した場合、対象の `g.FilledRect` の描画結果は不定である。
     * これは実装上の制限に基づく現バージョンの仕様である。
     *
     * この値が `undefined` である場合、親のシェーダプログラムが利用される。
     * この値が `null` である場合、明示的にデフォルトのシェーダプログラムが利用される。
     *
     * この値を変更した場合、 `this.modified()` を呼び出す必要がある。
     */
    shaderProgram: ShaderProgram | null | undefined;
    /**
     * 子にtouchableなものが含まれているかどうかを表す。
     * @private
     */
    _hasTouchableChildren: boolean;
    private _onUpdate;
    private _onMessage;
    private _onPointDown;
    private _onPointUp;
    private _onPointMove;
    private _touchable;
    /**
     * 時間経過イベント。本イベントの一度のfireにつき、常に1フレーム分の時間経過が起こる。
     */
    get onUpdate(): Trigger<void>;
    /**
     * このエンティティのmessageイベント。
     */
    get onMessage(): Trigger<MessageEvent>;
    /**
     * このエンティティのpoint downイベント。
     */
    get onPointDown(): Trigger<PointDownEvent>;
    /**
     * このエンティティのpoint upイベント。
     */
    get onPointUp(): Trigger<PointUpEvent>;
    /**
     * このエンティティのpoint moveイベント。
     */
    get onPointMove(): Trigger<PointMoveEvent>;
    /**
     * プレイヤーにとって触れられるオブジェクトであるかを表す。
     *
     * この値が偽である場合、ポインティングイベントの対象にならない。
     * 初期値は `false` である。
     *
     * `E` の他のプロパティと異なり、この値の変更後に `this.modified()` を呼び出す必要はない。
     */
    get touchable(): boolean;
    set touchable(v: boolean);
    /**
     * 時間経過イベント。本イベントの一度のfireにつき、常に1フレーム分の時間経過が起こる。
     * @deprecated 非推奨である。将来的に削除される。代わりに `onUpdate` を利用すること。
     */
    get update(): Trigger<void>;
    /**
     * このエンティティのmessageイベント。
     * @deprecated 非推奨である。将来的に削除される。代わりに `onMessage` を利用すること。
     */
    get message(): Trigger<MessageEvent>;
    /**
     * このエンティティのpoint downイベント。
     * @deprecated 非推奨である。将来的に削除される。代わりに `onPointDown` を利用すること。
     */
    get pointDown(): Trigger<PointDownEvent>;
    /**
     * このエンティティのpoint upイベント。
     * @deprecated 非推奨である。将来的に削除される。代わりに `onPointUp` を利用すること。
     */
    get pointUp(): Trigger<PointUpEvent>;
    /**
     * このエンティティのpoint moveイベント。
     * @deprecated 非推奨である。将来的に削除される。代わりに `onPointMove` を利用すること。
     */
    get pointMove(): Trigger<PointMoveEvent>;
    /**
     * 各種パラメータを指定して `E` のインスタンスを生成する。
     * @param param 初期化に用いるパラメータのオブジェクト
     */
    constructor(param: EParameterObject);
    /**
     * 自分自身と子孫の内容を描画する。
     *
     * このメソッドは、 `Renderer#draw()` からエンティティのツリー構造をトラバースする過程で暗黙に呼び出される。
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     * @param renderer 描画先に対するRenderer
     * @param camera 対象のカメラ。省略された場合、undefined
     */
    render(renderer: Renderer, camera?: Camera): void;
    /**
     * 自分自身の内容を描画する。
     *
     * このメソッドは、 `Renderer#draw()` からエンティティのツリー構造をトラバースする過程で暗黙に呼び出される。
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     *
     * 戻り値は、このエンティティの子孫の描画をスキップすべきであれば偽、でなければ真である。
     * (この値は、子孫の描画方法をカスタマイズする一部のサブクラスにおいて、通常の描画パスをスキップするために用いられる)
     *
     * @param renderer 描画先に対するRenderer
     * @param camera 対象のカメラ
     */
    renderSelf(_renderer: Renderer, _camera?: Camera): boolean;
    /**
     * このエンティティが属する `Game` を返す。
     */
    game(): Game;
    /**
     * 子を追加する。
     *
     * @param e 子エンティティとして追加するエンティティ
     */
    append(e: E): void;
    /**
     * 子を挿入する。
     *
     * `target` が`this` の子でない場合、`append(e)` と同じ動作となる。
     *
     * @param e 子エンティティとして追加するエンティティ
     * @param target 挿入位置にある子エンティティ
     */
    insertBefore(e: E, target: E | undefined): void;
    /**
     * 子を削除する。
     *
     * `e` が `this` の子でない場合、 `AssertionError` がthrowされる。
     * `e === undefined` であり親がない場合、 `AssertionError` がthrowされる。
     *
     * @param e 削除する子エンティティ。省略された場合、自身を親から削除する
     */
    remove(e?: E): void;
    /**
     * このエンティティを破棄する。
     *
     * 親がある場合、親からは `remove()` される。
     * 子孫を持っている場合、子孫も破棄される。
     */
    destroy(): void;
    /**
     * このエンティティが破棄済みであるかを返す。
     */
    destroyed(): boolean;
    /**
     * このエンティティに対する変更をエンジンに通知する。
     *
     * このメソッドの呼び出し後、 `this` に対する変更が各 `Renderer` の描画に反映される。
     * ただし逆は真ではない。すなわち、再描画は他の要因によって行われることもある。
     * ゲーム開発者は、このメソッドを呼び出していないことをもって再描画が行われていないことを仮定してはならない。
     *
     * 本メソッドは、このオブジェクトの `Object2D` 由来のプロパティ (`x`, `y`, `angle` など) を変更した場合にも呼びだす必要がある。
     * 本メソッドは、描画キャッシュの無効化処理を含まない。描画キャッシュを持つエンティティは、このメソッドとは別に `invalidate()` を提供している。
     * 描画キャッシュの無効化も必要な場合は、このメソッドではなくそちらを呼び出す必要がある。
     * @param isBubbling 通常ゲーム開発者が指定する必要はない。この変更通知が、(このエンティティ自身のみならず)子孫の変更の通知を含む場合、真を渡さなければならない。省略された場合、偽。
     */
    modified(_isBubbling?: boolean): void;
    /**
     * このメソッドは、 `E#findPointSourceByPoint()` 内で子孫の探索をスキップすべきか判断するために呼ばれる。
     * 通常、子孫の描画方法をカスタマイズする一部のサブクラスにおいて、与えられた座標に対する子孫の探索を制御する場合に利用する。
     * ゲーム開発者がこのメソッドを呼び出す必要はない。
     *
     * 戻り値は、子孫の探索をスキップすべきであれば偽、でなければ真である。
     *
     * @param point このエンティティ（`this`）の位置を基準とした相対座標
     */
    shouldFindChildrenByPoint(_point: CommonOffset): boolean;
    /**
     * 自身と自身の子孫の中で、その座標に反応する `PointSource` を返す。
     *
     * 戻り値は、対象が見つかった場合、 `target` に見つかったエンティティを持つ `PointSource` である。
     * 対象が見つからなかった場合、 `undefined` である。戻り値が `undefined` でない場合、その `target` プロパティは次を満たす:
     * - このエンティティ(`this`) またはその子孫である
     * - `E#touchable` が真である
     *
     * @param point 対象の座標
     * @param m `this` に適用する変換行列。省略された場合、単位行列
     * @param force touchable指定を無視する場合真を指定する。省略された場合、偽
     */
    findPointSourceByPoint(point: CommonOffset, m?: Matrix, force?: boolean): PointSource | undefined;
    /**
     * このEが表示状態であるかどうかを返す。
     */
    visible(): boolean;
    /**
     * このEを表示状態にする。
     *
     * `this.hide()` によって非表示状態にされたエンティティを表示状態に戻す。
     * 生成直後のエンティティは表示状態であり、 `hide()` を呼び出さない限りこのメソッドを呼び出す必要はない。
     */
    show(): void;
    /**
     * このEを非表示状態にする。
     *
     * `this.show()` が呼ばれるまでの間、このエンティティは各 `Renderer` によって描画されない。
     * また `Game#findPointSource()` で返されることもなくなる。
     * `this#pointDown`, `pointMove`, `pointUp` なども通常の方法ではfireされなくなる。
     */
    hide(): void;
    /**
     * このEの包含矩形を計算する。
     */
    calculateBoundingRect(): CommonRect | undefined;
    /**
     * このEの位置を基準とした相対座標をゲームの左上端を基準とした座標に変換する。
     * @param offset Eの位置を基準とした相対座標
     */
    localToGlobal(offset: CommonOffset): CommonOffset;
    /**
     * ゲームの左上端を基準とした座標をこのEの位置を基準とした相対座標に変換する。
     * @param offset ゲームの左上端を基準とした座標
     */
    globalToLocal(offset: CommonOffset): CommonOffset;
    /**
     * @private
     */
    _calculateBoundingRect(m?: Matrix): CommonRect | undefined;
    /**
     * @private
     */
    _enableTouchPropagation(): void;
    /**
     * @private
     */
    _disableTouchPropagation(): void;
    /**
     * @private
     */
    _isTargetOperation(e: PointEvent): boolean;
    private _findTouchableChildren;
}
