import { AudioAsset, AudioPlayer, AudioPlayerEvent, ResourceFactory } from "@akashic/pdi-types";
export interface AudioSystemParameterObject {
    /**
     * オーディオシステムのID
     */
    id: string;
    /**
     * オーディオのボリューム
     */
    volume?: number;
    /**
     * ミュート中か否か。
     */
    muted?: boolean;
    /**
     * 各種リソースのファクトリ
     */
    resourceFactory: ResourceFactory;
}
export declare abstract class AudioSystem implements AudioSystem {
    id: string;
    /**
     * @private
     */
    _volume: number;
    /**
     * @private
     */
    _muted: boolean;
    /**
     * @private
     */
    _destroyRequestedAssets: {
        [key: string]: AudioAsset;
    };
    /**
     * 再生速度が等倍以外に指定された等の要因により、音声再生が抑制されているかどうか。
     * @private
     */
    _suppressed: boolean;
    /**
     * @private
     */
    _resourceFactory: ResourceFactory;
    /**
     * 明示的に設定された、ミュート中か否か。
     * @private
     */
    _explicitMuted: boolean;
    get volume(): number;
    set volume(value: number);
    constructor(param: AudioSystemParameterObject);
    abstract stopAll(): void;
    abstract findPlayers(asset: AudioAsset): AudioPlayer[];
    abstract createPlayer(): AudioPlayer;
    requestDestroy(asset: AudioAsset): void;
    /**
     * @private
     */
    _reset(): void;
    /**
     * @private
     */
    _setMuted(value: boolean): void;
    /**
     * @private
     */
    _setPlaybackRate(value: number): void;
    /**
     * @private
     */
    _updateMuted(): void;
    /**
     * @private
     */
    abstract _onVolumeChanged(): void;
    /**
     * @private
     */
    abstract _onMutedChanged(): void;
}
export declare class MusicAudioSystem extends AudioSystem {
    /**
     * @private
     */
    _player: AudioPlayer | undefined;
    get player(): AudioPlayer;
    set player(v: AudioPlayer);
    constructor(param: AudioSystemParameterObject);
    findPlayers(asset: AudioAsset): AudioPlayer[];
    createPlayer(): AudioPlayer;
    stopAll(): void;
    /**
     * @private
     */
    _reset(): void;
    /**
     * @private
     */
    _onVolumeChanged(): void;
    /**
     * @private
     */
    _onMutedChanged(): void;
    /**
     * @private
     */
    _setPlaybackRate(rate: number): void;
    /**
     * @private
     */
    _handlePlay(e: AudioPlayerEvent): void;
    /**
     * @private
     */
    _handleStop(e: AudioPlayerEvent): void;
}
export declare class SoundAudioSystem extends AudioSystem {
    players: AudioPlayer[];
    constructor(param: AudioSystemParameterObject);
    createPlayer(): AudioPlayer;
    findPlayers(asset: AudioAsset): AudioPlayer[];
    stopAll(): void;
    /**
     * @private
     */
    _reset(): void;
    /**
     * @private
     */
    _onMutedChanged(): void;
    /**
     * @private
     */
    _setPlaybackRate(rate: number): void;
    /**
     * @private
     */
    _handlePlay(_e: AudioPlayerEvent): void;
    /**
     * @private
     */
    _handleStop(e: AudioPlayerEvent): void;
    /**
     * @private
     */
    _onVolumeChanged(): void;
}
