import { CommonSize, Glyph, ResourceFactory } from "@akashic/pdi-types";
import { SurfaceAtlas } from "./SurfaceAtlas";
/**
 * SurfaceAtlasが効率よく動作するためのヒント。
 *
 * ゲーム開発者はSurfaceAtlasが効率よく動作するための各種初期値・最大値などを提示できる。
 * SurfaceAtlasはこれを参考にするが、そのまま採用するとは限らない。
 */
export interface SurfaceAtlasSetHint {
    /**
     * 初期アトラス幅。
     */
    initialAtlasWidth?: number;
    /**
     * 初期アトラス高さ。
     */
    initialAtlasHeight?: number;
    /**
     * 最大アトラス幅。
     */
    maxAtlasWidth?: number;
    /**
     * 最大アトラス高さ。
     */
    maxAtlasHeight?: number;
    /**
     * 最大アトラス保持数。
     */
    maxAtlasNum?: number;
}
/**
 * 削除対象のデータ
 */
export interface RemoveAtlasData {
    /**
     * 削除対象のSurfaceAtlas
     */
    surfaceAtlases: SurfaceAtlas[];
    /**
     * 削除対象のグリフ
     */
    glyphs: Glyph[][];
}
/**
 * SurfaceAtlasSet のコンストラクタに渡すことができるパラメータ。
 */
export interface SurfaceAtlasSetParameterObject {
    /**
     * ゲームインスタンス。
     */
    resourceFactory: ResourceFactory;
    /**
     * ヒント。
     *
     * 詳細は `SurfaceAtlasSetHint` を参照。
     */
    hint?: SurfaceAtlasSetHint;
}
/**
 * DynamicFontで使用される、SurfaceAtlasを管理する。
 */
export declare class SurfaceAtlasSet {
    /**
     * SurfaceAtlas最大保持数初期値
     */
    static INITIAL_MAX_SURFACEATLAS_NUM: number;
    /**
     * @private
     */
    _surfaceAtlases: SurfaceAtlas[];
    /**
     * @private
     */
    _atlasGlyphsTable: Glyph[][];
    /**
     * @private
     */
    _maxAtlasNum: number;
    /**
     * @private
     */
    _resourceFactory: ResourceFactory;
    /**
     * @private
     */
    _atlasSize: CommonSize;
    /**
     * @private
     */
    _currentAtlasIndex: number;
    constructor(params: SurfaceAtlasSetParameterObject);
    /**
     * @private
     */
    _deleteAtlas(delteNum: number): void;
    /**
     * 使用度の低いサーフェスアトラスを配列から削除する。
     * @private
     */
    _removeLeastFrequentlyUsedAtlas(removedNum: number): RemoveAtlasData;
    /**
     * 空き領域のあるSurfaceAtlasを探索する。
     * glyphが持つ情報をSurfaceAtlasへ移動し、移動したSurfaceAtlasの情報でglyphを置き換える。
     * @private
     */
    _moveGlyphSurface(glyph: Glyph): SurfaceAtlas | null;
    /**
     * サーフェスアトラスの再割り当てを行う。
     * @private
     */
    _reallocateAtlas(): void;
    /**
     * サーフェスアトラスを追加する。
     *
     * 保持している_surfaceAtlasesの数が最大値以上の場合、削除してから追加する。
     *
     * このメソッドは、このSurfaceAtlasSetに紐づいている `DynamnicFont` の `constructor` から暗黙に呼び出される。
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     */
    addAtlas(): void;
    /**
     * 引数で指定されたindexのサーフェスアトラスを取得する。
     *
     * このメソッドは、このSurfaceAtlasSetに紐づいている `DynamnicFont` の `glyphForCharacter()` から暗黙に呼び出される。
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     * @param index 取得対象のインデックス
     */
    getAtlas(index: number): SurfaceAtlas;
    /**
     * サーフェスアトラスの保持数を取得する。
     *
     * このメソッドは、このSurfaceAtlasSetに紐づいている `DynamnicFont` の `glyphForCharacter()` から暗黙に呼び出される。
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     */
    getAtlasNum(): number;
    /**
     * 最大サーフェスアトラス保持数取得する。
     */
    getMaxAtlasNum(): number;
    /**
     * 最大アトラス保持数設定する。
     *
     * 設定された値が、現在保持している_surfaceAtlasesの数より大きい場合、
     * removeLeastFrequentlyUsedAtlas()で設定値まで削除する。
     * @param value 設定値
     */
    changeMaxAtlasNum(value: number): void;
    /**
     * サーフェスアトラスのサイズを取得する。
     *
     * このメソッドは、このSurfaceAtlasSetに紐づいている `DynamnicFont` の `glyphForCharacter()` から暗黙に呼び出される。
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     */
    getAtlasUsedSize(): CommonSize;
    /**
     * サーフェスアトラスにグリフを追加する。
     *
     * このメソッドは、このSurfaceAtlasSetに紐づいている `DynamnicFont` の `glyphForCharacter()` から暗黙に呼び出される。
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     * @param glyph グリフ
     */
    addGlyph(glyph: Glyph): SurfaceAtlas | null;
    /**
     * このインスタンスを破棄する。
     */
    destroy(): void;
    /**
     * このインスタンスが破棄済みであるかどうかを返す。
     */
    destroyed(): boolean;
}
