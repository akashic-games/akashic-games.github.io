import { Asset, AssetLoadError } from "@akashic/pdi-types";
import { AssetLoadFailureInfo } from "./AssetLoadFailureInfo";
import { AssetManager } from "./AssetManager";
import { DynamicAssetConfiguration } from "./DynamicAssetConfiguration";
export interface DestroyedCheckable {
    destroyed(): boolean;
}
export interface AssetHolderHandlerSet<UserData> {
    /**
     * 各ハンドラの呼び出し時に this として利用される値。
     */
    owner: DestroyedCheckable;
    /**
     * アセットが一つ読み込まれるたびに呼び出されるハンドラ。
     * @param asset 読み込まれたアセット
     */
    handleLoad: (asset: Asset) => void;
    /**
     * アセットが一つ読み込み失敗するごとに呼び出されるハンドラ。
     * @param failureInfo 読み込み失敗情報
     */
    handleLoadFailure: (failureInfo: AssetLoadFailureInfo) => void;
    /**
     * 全アセットの読み込みを終えた時に呼び出されるハンドラ。
     * @param holder 読み込みを終えた AssetHolder
     * @param succeed 読み込みに成功した場合 true, リトライ不能のエラーで断念した時 false
     */
    handleFinish: (holder: AssetHolder<UserData>, succeed: boolean) => void;
}
/**
 * AssetHolder のコンストラクタに指定できるパラメータ。
 * 通常、ゲーム開発者が利用する必要はない。
 */
export interface AssetHolderParameterObject<UserData> {
    /**
     * アセットの読み込みに利用するアセットマネージャ。
     */
    assetManager: AssetManager;
    /**
     * 読み込むアセット。
     */
    assetIds?: (string | DynamicAssetConfiguration)[];
    /**
     * 読み込むアセット。
     */
    assetPaths?: string[];
    /**
     * このインスタンスの状態を通知するハンドラ群。
     */
    handlerSet: AssetHolderHandlerSet<UserData>;
    /**
     * このインスタンスに紐づけるユーザ定義データ。
     */
    userData: UserData | null;
}
/**
 * シーンのアセットの読み込みと破棄を管理するクラス。
 * 本クラスのインスタンスをゲーム開発者が直接生成することはなく、ゲーム開発者が利用する必要もない。
 */
export declare class AssetHolder<UserData> {
    /**
     * 読み込みを待つ残りのアセット数。
     * この値は参照のためにのみ公開される。この値を外部から書き換えてはならない。
     */
    waitingAssetsCount: number;
    /**
     * インスタンス生成時に与えられたユーザ定義データ。
     * この値は参照のためにのみ公開される。この値を外部から書き換えてはならない。
     */
    userData: UserData | null;
    /**
     * @private
     */
    _handlerSet: AssetHolderHandlerSet<UserData>;
    /**
     * @private
     */
    _assetManager: AssetManager;
    /**
     * @private
     */
    _assetIds: (string | DynamicAssetConfiguration)[];
    /**
     * @private
     */
    _assets: Asset[];
    /**
     * @private
     */
    _requested: boolean;
    constructor(param: AssetHolderParameterObject<UserData>);
    request(): boolean;
    destroy(): void;
    destroyed(): boolean;
    /**
     * @private
     */
    _onAssetError(asset: Asset, error: AssetLoadError): void;
    /**
     * @private
     */
    _onAssetLoad(asset: Asset): void;
}
