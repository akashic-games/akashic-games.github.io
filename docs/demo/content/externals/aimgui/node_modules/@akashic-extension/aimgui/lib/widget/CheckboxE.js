"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckboxE = void 0;
var colors_1 = require("./colors");
var common_1 = require("./common");
var WidgetE_1 = require("./WidgetE");
/**
 * チェックボックスとその隣のラベルの間の余白。
 */
var checkBoxMargin = 2;
/**
 * CheckBox E。
 */
var CheckboxE = /** @class */ (function (_super) {
    __extends(CheckboxE, _super);
    function CheckboxE(param) {
        var _a;
        var _this = this;
        var checkBoxSize = param.height;
        var desiredWidth = (_a = param.width) !== null && _a !== void 0 ? _a : checkBoxSize + checkBoxMargin + param.font.measureText(param.title).width;
        var desiredHeight = param.height;
        param.width = desiredWidth;
        param.desiredWidth = desiredWidth;
        param.desiredHeight = desiredHeight;
        param.minWidth = desiredWidth;
        param.minHeight = desiredHeight;
        _this = _super.call(this, param) || this;
        _this.valueObject = param.valueObject;
        _this.key = param.key;
        _this.pressed = false;
        _this.font = param.font;
        _this.onPointDown.add(_this.handlePointDown, _this);
        _this.onPointUp.add(_this.handlePointUp, _this);
        return _this;
    }
    Object.defineProperty(CheckboxE.prototype, "checked", {
        get: function () {
            return this.valueObject[this.key];
        },
        set: function (v) {
            this.valueObject[this.key] = v;
        },
        enumerable: false,
        configurable: true
    });
    CheckboxE.prototype.postRun = function () {
        this.pressed = false;
        _super.prototype.postRun.call(this);
    };
    CheckboxE.prototype.renderSelf = function (renderer, _camera) {
        var checkBoxSize = this.height;
        var checkMarkColor = colors_1.colors.checkMark;
        var checkBoxColor = this.pressed ? colors_1.colors.checkMark : colors_1.colors.checkBox;
        // チェックボックスの描画。
        renderer.fillRect(0, 0, checkBoxSize, checkBoxSize, checkBoxColor);
        if (!this.pressed && this.checked) {
            renderer.fillRect(2, 2, checkBoxSize - 4, checkBoxSize - 4, checkMarkColor);
        }
        // ラベルの描画。
        // "y" のようなベースラインの下に伸びる文字を考慮してやや大きくする。
        var textHeight = this.font.size * 1.2;
        var dx = checkBoxSize + checkBoxMargin;
        var dy = Math.round((checkBoxSize - textHeight) / 2);
        common_1.drawText(renderer, this.font, this.title, dx, dy);
        // DEBUG: レイアウトに関する領域を描画する。
        // this.drawLayout(renderer);
        return true;
    };
    CheckboxE.prototype.handlePointDown = function (_ev) {
        this.pressed = true;
        this.checked = !this.checked;
        this.modified();
    };
    CheckboxE.prototype.handlePointUp = function (_ev) {
        this.pressed = false;
        this.modified();
    };
    return CheckboxE;
}(WidgetE_1.WidgetE));
exports.CheckboxE = CheckboxE;
