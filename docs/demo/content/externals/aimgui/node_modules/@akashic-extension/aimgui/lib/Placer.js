"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Placer = void 0;
var collision_js_1 = require("@akashic-extension/collision-js");
var sizes_1 = require("./widget/sizes");
/**
 * ウィジェットを配置する場所の選択と確保役。
 *
 *  cursorPosition や contentArea などの座標系は WidgetE のローカル座標系である。
 */
var Placer = /** @class */ (function () {
    function Placer(cursorPosition, outerBounds, cursorDirection) {
        if (cursorDirection === void 0) { cursorDirection = "vertical"; }
        this.cursorPosition = new collision_js_1.Vec2(cursorPosition);
        this.cursorDirection = cursorDirection;
        this.bounds = {
            min: __assign({}, cursorPosition),
            max: __assign({}, cursorPosition)
        };
        this.outerBounds = {
            min: __assign({}, outerBounds.min),
            max: __assign({}, outerBounds.max)
        };
    }
    /**
     * 現在のカーソル位置からウィジェットが確保可能な領域の横幅。
     *
     * @returns 横幅[px]。
     */
    Placer.prototype.availableWidth = function () {
        return this.outerBounds.max.x - this.cursorPosition.x;
    };
    /**
     * 現在のカーソル位置にウィジェットを配置するにあたり要求する領域の大きさ。
     *
     * @param desiredSize 要求サイズ。
     * @returns 利用可能とされたサイズ。
     */
    Placer.prototype.requireSize = function (desiredSize) {
        return {
            x: Math.min(this.availableWidth(), desiredSize.x),
            y: desiredSize.y
        };
    };
    /**
     * 領域を確保し、カーソルを前進する。
     *
     * @param aabb 確保する領域。
     */
    Placer.prototype.advance = function (aabb) {
        collision_js_1.enlargeAABB(this.bounds, aabb.min);
        collision_js_1.enlargeAABB(this.bounds, aabb.max);
        if (this.cursorDirection === "vertical") {
            this.cursorPosition.y = this.bounds.max.y + sizes_1.sizes.margin;
        }
        else {
            this.cursorPosition.x = this.bounds.max.x + sizes_1.sizes.margin;
        }
    };
    return Placer;
}());
exports.Placer = Placer;
