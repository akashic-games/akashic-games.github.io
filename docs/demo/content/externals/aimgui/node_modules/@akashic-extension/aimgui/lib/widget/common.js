"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.drawText = exports.limitText = void 0;
/**
 * テキストの長さ[px]を制限する。
 *
 * @param font フォント
 * @param text テキスト
 * @param maxWidth 最大幅[ix]。
 * @param replaceStr 代替文字列。長さを制限された文字列の末尾に加えられる。省略時 "..." 。
 * @returns 長さを制限された文字列。
 */
function limitText(font, text, maxWidth, replaceStr) {
    if (replaceStr === void 0) { replaceStr = "..."; }
    if (font.measureText(text).width <= maxWidth) {
        return text;
    }
    var replaceStrWidth = font.measureText(replaceStr).width;
    var width = 0;
    var limited = "";
    for (var i = 0; i < text.length; ++i) {
        var code = g.Util.charCodeAt(text, i);
        if (!code) {
            continue;
        }
        var glyph = font.glyphForCharacter(code);
        if (!glyph) {
            continue;
        }
        width += glyph.advanceWidth;
        if (width + replaceStrWidth < maxWidth) {
            limited += text[i];
        }
        else {
            break;
        }
    }
    limited += replaceStr;
    return limited;
}
exports.limitText = limitText;
/**
 * テキストを描画する。
 *
 * @param renderer レンダラー。
 * @param font フォント。
 * @param text テキスト。
 * @param x 描画X位置。
 * @param y 描画Y位置。
 * @param maxWidth テキストの最大の長さ[px]。省略時、無制限。
 */
function drawText(renderer, font, text, startX, startY, maxWidth) {
    var x = 0;
    for (var i = 0; i < text.length; ++i) {
        var code = g.Util.charCodeAt(text, i);
        if (!code) {
            continue;
        }
        var glyph = font.glyphForCharacter(code);
        if (!glyph) {
            continue;
        }
        if (glyph.surface) {
            var glyphWidth = maxWidth != null ?
                Math.min(glyph.width, maxWidth - x) :
                glyph.width;
            renderer.drawImage(glyph.surface, glyph.x, glyph.y, glyphWidth, glyph.height, Math.round(startX + x + glyph.offsetX), Math.round(startY + glyph.offsetY));
        }
        x += glyph.advanceWidth;
        if (maxWidth != null && x >= maxWidth) {
            break;
        }
    }
}
exports.drawText = drawText;
