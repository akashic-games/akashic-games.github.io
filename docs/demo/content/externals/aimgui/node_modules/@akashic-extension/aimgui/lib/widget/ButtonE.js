"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonE = void 0;
var colors_1 = require("./colors");
var common_1 = require("./common");
var WidgetE_1 = require("./WidgetE");
/**
 * ボタン内部のラベル左右のパディング。
 */
var buttonPadding = 4;
/**
 * Button E。
 */
var ButtonE = /** @class */ (function (_super) {
    __extends(ButtonE, _super);
    function ButtonE(param) {
        var _a, _b, _c, _d;
        var _this = this;
        param.desiredWidth = (_a = param.desiredWidth) !== null && _a !== void 0 ? _a : param.font.measureText(param.title).width + buttonPadding * 2;
        param.desiredHeight = (_b = param.desiredHeight) !== null && _b !== void 0 ? _b : param.height;
        param.minWidth = (_c = param.minWidth) !== null && _c !== void 0 ? _c : param.font.size;
        param.minHeight = (_d = param.minHeight) !== null && _d !== void 0 ? _d : param.desiredHeight;
        _this = _super.call(this, param) || this;
        _this.isClicked = false;
        _this.pressed = false;
        _this.font = param.font;
        _this.onPointDown.add(_this.handlePointDown, _this);
        _this.onPointUp.add(_this.handlePointUp, _this);
        return _this;
    }
    ButtonE.prototype.postRun = function () {
        this.isClicked = false;
        _super.prototype.postRun.call(this);
    };
    ButtonE.prototype.renderSelf = function (renderer, _camera) {
        var frameColor = colors_1.colors.buttonFrame;
        var buttonColor = this.pressed ? colors_1.colors.buttonHighlight : colors_1.colors.button;
        renderer.fillRect(0, 0, this.width, this.height, buttonColor);
        this.drawLabel(renderer);
        this.drawFrame(renderer, frameColor);
        return true;
    };
    ButtonE.prototype.handlePointDown = function (_ev) {
        this.pressed = true;
        this.modified();
    };
    ButtonE.prototype.handlePointUp = function (_ev) {
        this.pressed = false;
        this.isClicked = true;
        this.modified();
    };
    ButtonE.prototype.drawLabel = function (renderer) {
        var textWidth = this.font.measureText(this.title).width;
        var limitedTextWidth = Math.min(textWidth, this.width - buttonPadding * 2);
        // "y" のようなベースラインの下に伸びる文字を考慮してやや大きくする。
        var textHeight = this.font.size * 1.2;
        var dx = Math.round((this.width - limitedTextWidth) / 2);
        var dy = Math.round((this.height - textHeight) / 2);
        common_1.drawText(renderer, this.font, this.title, dx, dy, limitedTextWidth);
    };
    return ButtonE;
}(WidgetE_1.WidgetE));
exports.ButtonE = ButtonE;
