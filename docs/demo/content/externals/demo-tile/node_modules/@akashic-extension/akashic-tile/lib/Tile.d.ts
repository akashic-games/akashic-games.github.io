import TileParameterObject = require("./TileParameterObject");
/**
 * RPGのマップなどで利用される、マップチップとタイルデータによるパターン描画を行うエンティティ。
 */
declare class Tile extends g.CacheableE {
    /**
     * マップチップ画像。
     * この値を変更した場合、 `this.invalidate()` が呼び出される必要がある。
     */
    tileChips: g.Surface;
    /**
     * マップチップ一つの幅。
     * この値を変更した場合、 `this.invalidate()` が呼び出される必要がある。
     */
    tileWidth: number;
    /**
     * マップチップ一つの高さ。
     * この値を変更した場合、 `this.invalidate()` が呼び出される必要がある。
     */
    tileHeight: number;
    /**
     * タイルのデータ。
     * マップチップのインデックスの配列。
     *
     * `Tile` は `src` の画像を、幅 `tileWidth` 高さ `tileHeight` の画像(マップチップ)を敷き詰めたものとみなし、
     * 左上から 0 基準のインデックス番号を与える。この値はそのインデックス番号の配列である。
     * `Tile` はこの配列の内容に従い、マップチップを左上から敷き詰めて描画する。
     * この値を変更した場合、 `this.invalidate()` が呼び出される必要がある。また `width`、 `height` もこれに従って変更されるべきである。
     */
    tileData: number[][];
    /**
     * マップチップが描画される領域。
     *
     * 設定された場合、指定された領域外にあるマップチップは再描画されない。
     * 画面外にあたるなどの、不要なマップチップの再描画をしないことで、描画を最適化するために利用できる。
     * この値を変更した場合、 `this.invalidate()` が呼び出される必要がある。
     * 初期値は `undefined` 。
     */
    redrawArea: g.CommonArea | null | undefined;
    _tilesInRow: number;
    _drawnTileData: number[][];
    /**
     * 各種パラメータを指定して `Tile` のインスタンスを生成する。
     *
     * @param param このエンティティに指定するパラメータ
     */
    constructor(param: TileParameterObject);
    /**
     * このエンティティ自身の描画を行う。
     * このメソッドはエンジンから暗黙に呼び出され、ゲーム開発者が呼び出す必要はない。
     */
    renderSelf(renderer: g.Renderer, camera?: g.Camera): boolean;
    renderCache(renderer: g.Renderer): void;
    invalidate(): void;
    /**
     * このエンティティを破棄する。
     * デフォルトでは利用しているマップチップの `Surface` `Surface` の破棄は行わない点に注意。
     * @param destroySurface trueを指定した場合、このエンティティが抱えるマップチップの `Surface` も合わせて破棄する
     */
    destroy(destroySurface?: boolean): void;
    private _invalidateSelf;
}
export = Tile;
