"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mat22 = void 0;
var Vec2_1 = require("./Vec2");
/**
 * 2x2行列。
 */
var Mat22 = /** @class */ (function () {
    /**
     * コンストラクタ。
     *
     * @param ex 第一列。省略時 (1, 0)。
     * @param ey 第二列。省略時 (0, 1)。
     */
    function Mat22(ex, ey) {
        this.ex = new Vec2_1.Vec2(ex || { x: 1, y: 0 });
        this.ey = new Vec2_1.Vec2(ey || { x: 0, y: 1 });
    }
    /**
     * 回転行列を作成する。
     *
     * @param angle 回転の角度[rad]。
     */
    Mat22.makeRotate = function (angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        return new Mat22({ x: c, y: s }, { x: -s, y: c });
    };
    /**
     * スケール行列を作成する。
     *
     * @param scale スケール行列。
     */
    Mat22.makeScale = function (scale) {
        return new Mat22({ x: scale.x, y: 0 }, { x: 0, y: scale.y });
    };
    /**
     * 複製する。
     */
    Mat22.prototype.clone = function () {
        return new Mat22(this.ex, this.ey);
    };
    /**
     * 比較する。
     *
     * 行列が等しい時、真。
     *
     * @param m 比較する行列。
     */
    Mat22.prototype.equal = function (m) {
        return this.ex.equal(m.ex) && this.ey.equal(m.ey);
    };
    /**
     * 行列を乗算する。
     *
     * @param m 行列。
     */
    Mat22.prototype.mul = function (m) {
        var m11 = this.ex.x * m.ex.x + this.ey.x * m.ex.y;
        var m21 = this.ex.y * m.ex.x + this.ey.y * m.ex.y;
        var m12 = this.ex.x * m.ey.x + this.ey.x * m.ey.y;
        var m22 = this.ex.y * m.ey.x + this.ey.y * m.ey.y;
        this.ex.x = m11;
        this.ex.y = m21;
        this.ey.x = m12;
        this.ey.y = m22;
        return this;
    };
    /**
     * 行列式を求める。
     */
    Mat22.prototype.determinant = function () {
        return this.ex.x * this.ey.y - this.ex.y * this.ey.x;
    };
    /**
     * 転置行列にする。
     */
    Mat22.prototype.transpose = function () {
        var tmp = this.ey.x;
        this.ey.x = this.ex.y;
        this.ex.y = tmp;
        return this;
    };
    /**
     * 逆行列にする。
     *
     * 逆行列が存在しない時 null 。
     */
    Mat22.prototype.inverse = function () {
        var det = this.determinant();
        if (det === 0) {
            return null;
        }
        var exx = this.ex.x;
        this.ex.x = this.ey.y / det;
        this.ex.y = this.ex.y * -1 / det;
        this.ey.x = this.ey.x * -1 / det;
        this.ey.y = exx / det;
        return this;
    };
    /**
     * 単位行列にする。
     */
    Mat22.prototype.setIdentity = function () {
        this.ex.x = 1;
        this.ex.y = 0;
        this.ey.x = 0;
        this.ey.y = 1;
        return this;
    };
    /**
     * 回転する。
     *
     * @param angle 回転の角度[rad]。
     */
    Mat22.prototype.rotate = function (angle) {
        var m11 = this.ex.x;
        var m21 = this.ex.y;
        var m12 = this.ey.x;
        var m22 = this.ey.y;
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        this.ex.x = c * m11 - s * m21;
        this.ex.y = s * m11 + c * m21;
        this.ey.x = c * m12 - s * m22;
        this.ey.y = s * m12 + c * m22;
        return this;
    };
    /**
     * スケールする。
     *
     * @param scale スケール。
     */
    Mat22.prototype.scale = function (scale) {
        var m11 = this.ex.x;
        var m21 = this.ex.y;
        var m12 = this.ey.x;
        var m22 = this.ey.y;
        var sx = scale.x;
        var sy = scale.y;
        this.ex.x = sx * m11;
        this.ex.y = sy * m21;
        this.ey.x = sx * m12;
        this.ey.y = sy * m22;
        return this;
    };
    Mat22.prototype.mulVec2 = function (v, out) {
        var x = this.ex.x * v.x + this.ey.x * v.y;
        var y = this.ex.y * v.x + this.ey.y * v.y;
        if (out) {
            out.x = x;
            out.y = y;
            return out;
        }
        else {
            return new Vec2_1.Vec2(x, y);
        }
    };
    /**
     * 単位ベクトル。
     */
    Mat22.identity = Object.freeze(new Mat22());
    return Mat22;
}());
exports.Mat22 = Mat22;
