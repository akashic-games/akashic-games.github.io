import { CommonOffset } from "@akashic/pdi-types";
/**
 * 変換行列を表すインターフェース。
 * 通常ゲーム開発者が本インターフェースを直接利用する事はない。
 */
export interface Matrix {
    /**
     * 変更フラグ。
     * 本フラグが立っていても特に何も処理はされない。
     * 本フラグの操作、本フラグを参照して値を再計算することは、いずれも利用する側で適切に処理をする必要がある。
     * @private
     */
    _modified: boolean;
    /**
     * 変換本体。
     * CanvasRenderingContext2D#transformの値と等しい。
     * ```
     *   a c e
     * [ b d f ]
     *   0 0 1
     * ```
     * 配列の添え字では、 a(m11): 0, b(m12): 1, c(m21): 2, d(m22): 3, e(dx): 4, f(dy): 5 となる。
     * 参考: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform
     * @private
     */
    _matrix: [number, number, number, number, number, number];
    /**
     * この変換行列に別の変換行列を右側から掛け合わせる。
     * @param matrix 掛け合わせる変換行列
     */
    multiply(matrix: Matrix): void;
    /**
     * この変換行列に別の変換行列を左側から掛け合わせる。
     * @param matrix 掛け合わせる変換行列
     */
    multiplyLeft(matrix: Matrix): void;
    /**
     * この変換行列に別の変換行列を掛け合わせた新しい変換行列を返す。
     * @param matrix 掛け合わせる変換行列
     */
    multiplyNew(matrix: Matrix): Matrix;
    /**
     * 2D object利用の一般的な値を基に変換行列の値を再計算する。
     * @param width 対象の横幅
     * @param heigth 対象の縦幅
     * @param scaleX 対象の横方向への拡大率
     * @param scaleY 対象の縦方向への拡大率
     * @param angle 角度。単位は `degree` であり `radian` ではない
     * @param x x座標
     * @param y y座標
     * @param anchorX アンカーの横位置。単位は相対値(左端が 0、中央が 0.5、右端が 1.0)である。
     * @param anchorY アンカーの縦位置。単位は相対値(上端が 0、中央が 0.5、下端が 1.0)である。
     */
    update(width: number, height: number, scaleX: number, scaleY: number, angle: number, x: number, y: number, anchorX: number | null, anchorY: number | null): void;
    /**
     * `update()` によって得られる行列の逆変換になるよう変換行列の値を再計算する。
     * @param width 対象の横幅
     * @param heigth 対象の縦幅
     * @param scaleX 対象の横方向への拡大率
     * @param scaleY 対象の縦方向への拡大率
     * @param angle 角度。単位は `degree` であり `radian` ではない
     * @param x x座標
     * @param y y座標
     * @param anchorX アンカーの横位置。単位は相対値(左端が 0、中央が 0.5、右端が 1.0)である。
     * @param anchorY アンカーの縦位置。単位は相対値(上端が 0、中央が 0.5、下端が 1.0)である。
     */
    updateByInverse(width: number, height: number, scaleX: number, scaleY: number, angle: number, x: number, y: number, anchorX: number | null, anchorY: number | null): void;
    /**
     * 値を単位行列にリセットする。x/yの座標情報を初期値に反映させることも出来る。
     * @param x x座標。省略時は0として処理される
     * @param y y座標。省略時は0として処理される
     */
    reset(x?: number, y?: number): void;
    /**
     * この変換行列と同じ値を持つ変換行列を新しく作って返す。
     */
    clone(): Matrix;
    /**
     * 拡縮を変換行列に反映させる。
     * @param x X方向の拡縮律
     * @param y y方向の拡縮律
     */
    scale(x: number, y: number): void;
    /**
     * この変換行列を逆行列に変換した結果を引数の座標系に適用した座標値を返す。
     * この変換行列の値自体や、引数の値は変更されない。
     * @param point 逆行列を適用する座標
     */
    multiplyInverseForPoint(point: CommonOffset): CommonOffset;
    /**
     * この変換行列と引数の座標系が表す行列の積を返す。
     * @param point この変換行列との積を求める座標
     */
    multiplyPoint(point: CommonOffset): CommonOffset;
}
/**
 * 変換行列を一般的なJavaScriptのみで表したクラス。
 * 通常ゲーム開発者が本クラスを直接利用する事はない。
 * 各フィールド、メソッドの詳細は `Matrix` インターフェースの説明を参照。
 */
export declare class PlainMatrix {
    /**
     * @private
     */
    _modified: boolean;
    /**
     * @private
     */
    _matrix: [number, number, number, number, number, number];
    /**
     * 無変換の変換行列を表す `PlainMatrix` のインスタンスを作成する。
     */
    constructor();
    /**
     * 2Dオブジェクト利用の一般的な値を元に変換行列を表す `PlainMatrix` のインスタンスを生成する。
     * @param width 対象の横幅
     * @param height 対象の縦幅
     * @param scaleX 対象の横方向への拡大率
     * @param scaleY 対象の縦方向への拡大率
     * @param angle 角度。単位は `degree` であり `radian` ではない
     * @param anchorX アンカーの横位置。単位は相対値(左端が 0、中央が 0.5、右端が 1.0)である。
     * @param anchorY アンカーの縦位置。単位は相対値(上端が 0、中央が 0.5、下端が 1.0)である。
     */
    constructor(width: number, height: number, scaleX: number, scaleY: number, angle: number, anchorX: number, anchorY: number);
    /**
     * 指定の `Matrix` と同じ変換行列を表す `PlainMatrix` のインスタンスを生成する。
     */
    constructor(src: Matrix);
    update(width: number, height: number, scaleX: number, scaleY: number, angle: number, x: number, y: number, anchorX: number | null, anchorY: number | null): void;
    /**
     * このメソッドは anchorX, anchorY が存在しなかった当時との互換性のため存在する。将来この互換性を破棄する時に削除する予定である。
     * @private
     */
    _updateWithoutAnchor(width: number, height: number, scaleX: number, scaleY: number, angle: number, x: number, y: number): void;
    updateByInverse(width: number, height: number, scaleX: number, scaleY: number, angle: number, x: number, y: number, anchorX: number | null, anchorY: number | null): void;
    /**
     * このメソッドは anchorX, anchorY が存在しなかった当時との互換性のため存在する。将来この互換性を破棄する時に削除する予定である。
     * @private
     */
    _updateByInverseWithoutAnchor(width: number, height: number, scaleX: number, scaleY: number, angle: number, x: number, y: number): void;
    multiply(matrix: Matrix): void;
    multiplyLeft(matrix: Matrix): void;
    multiplyNew(matrix: Matrix): Matrix;
    reset(x?: number, y?: number): void;
    clone(): Matrix;
    multiplyInverseForPoint(point: CommonOffset): CommonOffset;
    scale(x: number, y: number): void;
    multiplyPoint(point: CommonOffset): CommonOffset;
}
