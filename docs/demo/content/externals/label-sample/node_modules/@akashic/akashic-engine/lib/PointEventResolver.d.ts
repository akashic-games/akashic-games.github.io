import { CommonOffset, PlatformPointEvent } from "@akashic/pdi-types";
import * as pl from "@akashic/playlog";
import { Camera } from "./Camera";
import { PointSource } from "./entities/E";
export interface PointSourceResolver {
    findPointSource(point: CommonOffset, camera?: Camera): PointSource | undefined;
}
export interface PointEventResolverParameterObject {
    /**
     * この `PointEventResolver` がエンティティの解決などに用いる `PointSourceResolver` 。
     */
    sourceResolver: PointSourceResolver;
    /**
     * プレイヤーID
     */
    playerId: string;
}
/**
 * PlatformPointEventからg.Eventへの変換機構。
 *
 * ほぼ座標しか持たないPlatformPointEventに対して、g.Point(Down|Move|Up)Eventはその座標にあるエンティティや、
 * (g.Point(Move|Up)Eventの場合)g.PointDownEventからの座標の差分を持っている。
 * それらの足りない情報を管理・追加して、PlatformPointEventをg.Eventに変換するクラス。
 * Platform実装はpointDown()なしでpointMove()を呼び出してくることも考えられるため、
 * Down -> Move -> Up の流れを保証する機能も持つ。
 *
 * 本クラスのインスタンスをゲーム開発者が直接生成することはなく、ゲーム開発者が利用する必要もない。
 * @ignore
 */
export declare class PointEventResolver {
    _sourceResolver: PointSourceResolver;
    _playerId: string;
    private _pointEventMap;
    constructor(param: PointEventResolverParameterObject);
    pointDown(e: PlatformPointEvent): pl.PointDownEvent;
    pointMove(e: PlatformPointEvent): pl.PointMoveEvent | null;
    pointUp(e: PlatformPointEvent): pl.PointUpEvent | null;
    private _pointMoveAndUp;
}
