"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ExceptionFactory_1 = require("./ExceptionFactory");
var RandomGenerator_1 = require("./RandomGenerator");
var Xorshift_1 = require("./Xorshift");
/**
 * Xorshiftを用いた乱数生成期。
 */
var XorshiftRandomGenerator = /** @class */ (function (_super) {
    __extends(XorshiftRandomGenerator, _super);
    function XorshiftRandomGenerator(seed, xorshift) {
        var _this = this;
        if (seed === undefined) {
            throw ExceptionFactory_1.ExceptionFactory.createAssertionError("XorshiftRandomGenerator#constructor: seed is undefined");
        }
        else {
            _this = _super.call(this, seed) || this;
            if (!!xorshift) {
                _this._xorshift = Xorshift_1.Xorshift.deserialize(xorshift);
            }
            else {
                _this._xorshift = new Xorshift_1.Xorshift(seed);
            }
        }
        return _this;
    }
    XorshiftRandomGenerator.deserialize = function (ser) {
        return new XorshiftRandomGenerator(ser._seed, ser._xorshift);
    };
    /**
     * 乱数を生成する。
     * `min` 以上 `max` 以下の数値を返す。
     *
     * @deprecated 非推奨である。将来的に削除される。代わりに `XorshiftRandomGenerator#generate()` を利用すること。
     */
    XorshiftRandomGenerator.prototype.get = function (min, max) {
        return this._xorshift.nextInt(min, max + 1);
    };
    /**
     * 乱数を生成する。
     * 0 以上 1 未満の数値を返す。
     *
     * ローカルイベントの処理中を除き、原則 `Math.random()` ではなくこのメソッドを利用すること。
     */
    XorshiftRandomGenerator.prototype.generate = function () {
        return this._xorshift.random();
    };
    XorshiftRandomGenerator.prototype.serialize = function () {
        return {
            _seed: this.seed,
            _xorshift: this._xorshift.serialize()
        };
    };
    return XorshiftRandomGenerator;
}(RandomGenerator_1.RandomGenerator));
exports.XorshiftRandomGenerator = XorshiftRandomGenerator;
