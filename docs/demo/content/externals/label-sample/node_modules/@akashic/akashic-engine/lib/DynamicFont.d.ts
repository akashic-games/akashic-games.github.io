import { FontFamily, FontWeight, FontWeightString, GlyphFactory, ResourceFactory } from "@akashic/pdi-types";
import { BitmapFont } from "./BitmapFont";
import { Font } from "./Font";
import { Game } from "./Game";
import { Glyph } from "./Glyph";
import { SurfaceAtlasSetHint, SurfaceAtlasSet } from "./SurfaceAtlasSet";
/**
 * `DynamicFont` のコンストラクタに渡すことができるパラメータ。
 * 各メンバの詳細は `DynamicFont` の同名メンバの説明を参照すること。
 * パラメータのsurfaceAtlasSetが存在する場合は、パラメータのsurfaceAtlasSetを使用する。
 * surfaceAtlasSetが存在せず、DynamicFontHintが存在する場合、DynamicFontが管理するSurfaceAtlasSetを使用する。
 * surfaceAtlasSetが存在せず、DynamicFontHintが存在しない場合、gameが持つ共通のSurfaceAtlasSetを使用する。
 */
export interface DynamicFontParameterObject {
    /**
     * ゲームインスタンス。
     */
    game: Game;
    /**
     * フォントファミリ。
     *
     * フォント名、またはそれらの配列で指定する。
     * フォント名として指定できる値は環境に依存する。
     * 少なくとも `"sans-serif"`, `"serif"`, `"monospace"` (それぞれサンセリフ体、セリフ体、等幅の字体) は有効な値である。
     * `g.FontFamily` を指定することは非推奨である。代わりに上記文字列を利用すること。
     *
     * この値は参考値である。環境によっては無視される可能性がある。
     */
    fontFamily: FontFamily | string | (FontFamily | string)[];
    /**
     * フォントサイズ。
     */
    size: number;
    /**
     * ヒント。
     *
     * 詳細は `DynamicFontHint` を参照。
     */
    hint?: DynamicFontHint;
    /**
     * フォント色。CSS Colorで指定する。
     * @default "black"
     */
    fontColor?: string;
    /**
     * フォントウェイト。
     * `g.FontWeight` を指定することは非推奨である。代わりに `g.FontWeightString` を利用すること。
     * @default g.FontWeight.Normal
     */
    fontWeight?: FontWeight | FontWeightString;
    /**
     * 輪郭幅。
     * @default 0
     */
    strokeWidth?: number;
    /**
     * 輪郭色。
     * @default 0
     */
    strokeColor?: string;
    /**
     * 文字の輪郭のみを描画するか否か。
     * @default false
     */
    strokeOnly?: boolean;
    /**
     * サーフェスアトラスセット
     * @default undefined
     */
    surfaceAtlasSet?: SurfaceAtlasSet;
}
/**
 * DynamicFontが効率よく動作するためのヒント。
 *
 * ゲーム開発者はDynamicFontが効率よく動作するための各種初期値・最大値などを
 * 提示できる。DynamicFontはこれを参考にするが、そのまま採用するとは限らない。
 */
export interface DynamicFontHint extends SurfaceAtlasSetHint {
    /**
     * あらかじめグリフを生成する文字のセット。
     */
    presetChars?: string;
    /**
     * ベースライン。
     */
    baselineHeight?: number;
}
/**
 * ビットマップフォントを逐次生成するフォント。
 */
export declare class DynamicFont extends Font {
    /**
     * フォントファミリ。
     *
     * このプロパティは参照のためにのみ公開されている。ゲーム開発者はこの値を変更すべきではない。
     */
    fontFamily: FontFamily | string | (FontFamily | string)[];
    /**
     * フォントサイズ。
     *
     * このプロパティは参照のためにのみ公開されている。ゲーム開発者はこの値を変更すべきではない。
     */
    size: number;
    /**
     * ヒント。
     *
     * このプロパティは参照のためにのみ公開されている。ゲーム開発者はこの値を変更すべきではない。
     */
    hint: DynamicFontHint;
    /**
     * フォント色。CSS Colorで指定する。
     *
     * このプロパティは参照のためにのみ公開されている。ゲーム開発者はこの値を変更すべきではない。
     * @default "black"
     */
    fontColor: string;
    /**
     * フォントウェイト。
     *
     * このプロパティは参照のためにのみ公開されている。ゲーム開発者はこの値を変更すべきではない。
     * @default g.FontWeight.Normal
     */
    fontWeight: FontWeight | FontWeightString;
    /**
     * 輪郭幅。
     * 0 以上の数値でなければならない。 0 を指定した場合、輪郭は描画されない。
     *
     * このプロパティは参照のためにのみ公開されている。ゲーム開発者はこの値を変更すべきではない。
     * @default 0
     */
    strokeWidth: number;
    /**
     * 輪郭色。CSS Colorで指定する。
     *
     * このプロパティは参照のためにのみ公開されている。ゲーム開発者はこの値を変更すべきではない。
     * @default "black"
     */
    strokeColor: string;
    /**
     * 文字の輪郭のみを描画するか切り替える。
     * `true` を指定した場合、輪郭のみ描画される。
     * `false` を指定した場合、文字と輪郭が描画される。
     *
     * このプロパティは参照のためにのみ公開されている。ゲーム開発者はこの値を変更すべきではない。
     * @default false
     */
    strokeOnly: boolean;
    /**
     * @private
     */
    _resourceFactory: ResourceFactory;
    /**
     * @private
     */
    _glyphs: {
        [key: number]: Glyph;
    };
    /**
     * @private
     */
    _glyphFactory: GlyphFactory;
    /**
     * @private
     */
    _destroyed: boolean;
    /**
     * @private
     */
    _isSurfaceAtlasSetOwner: boolean;
    /**
     * @private
     */
    _atlasSet: SurfaceAtlasSet;
    /**
     * 各種パラメータを指定して `DynamicFont` のインスタンスを生成する。
     * @param param `DynamicFont` に設定するパラメータ
     */
    constructor(param: DynamicFontParameterObject);
    /**
     * グリフの取得。
     *
     * 取得に失敗するとnullが返る。
     *
     * 取得に失敗した時、次のようにすることで成功するかもしれない。
     * - DynamicFont生成時に指定する文字サイズを小さくする
     * - アトラスの初期サイズ・最大サイズを大きくする
     *
     * @param code 文字コード
     */
    glyphForCharacter(code: number): Glyph | null;
    /**
     * BtimapFontの生成。
     *
     * 実装上の制限から、このメソッドを呼び出す場合、maxAtlasNum が 1 または undefined/null(1として扱われる) である必要がある。
     * そうでない場合、失敗する可能性がある。
     *
     * @param missingGlyph `BitmapFont#map` に存在しないコードポイントの代わりに表示するべき文字。最初の一文字が用いられる。
     */
    asBitmapFont(missingGlyphChar?: string): BitmapFont | null;
    destroy(): void;
    destroyed(): boolean;
}
