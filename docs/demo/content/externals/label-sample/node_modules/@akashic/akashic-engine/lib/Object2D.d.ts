import { CommonArea, CommonOffset, CommonSize, CompositeOperation, CompositeOperationString } from "@akashic/pdi-types";
import { Matrix } from "./Matrix";
/**
 * `Object2D` のコンストラクタに渡すことができるパラメータ。
 * 各メンバの詳細は `Object2D` の同名メンバの説明を参照すること。
 */
export interface Object2DParameterObject {
    /**
     * このオブジェクトの横位置。実際の座標位置はscaleX, scaleY, angle, anchorX, anchorYの値も考慮する必要がある。
     * @default 0
     */
    x?: number;
    /**
     * このオブジェクトの縦位置。実際の座標位置はscaleX, scaleY, angle, anchorX, anchorYの値も考慮する必要がある。
     * @default 0
     */
    y?: number;
    /**
     * このオブジェクトの横幅。実際の表示領域としてはscaleX, scaleY, angleの値も考慮する必要がある。
     * @default 0
     */
    width?: number;
    /**
     * このオブジェクトの縦幅。実際の表示領域としてはscaleX, scaleY, angleの値も考慮する必要がある。
     * @default 0
     */
    height?: number;
    /**
     * 0～1でオブジェクトの不透明度を表す。
     * この値が0の場合、Rendererは描画処理を省略する。
     * @default 1
     */
    opacity?: number;
    /**
     * オブジェクトの横方向の倍率。
     * @default 1
     */
    scaleX?: number;
    /**
     * オブジェクトの縦方向の倍率。
     * @default 1
     */
    scaleY?: number;
    /**
     * オブジェクトの回転。度数で指定する。
     * @default 0
     */
    angle?: number;
    /**
     * 描画時の合成方法を指定する。
     * 省略された場合、合成方法を指定しない（親の合成方法を利用する）。
     * なお `CompositeOperation` での指定は非推奨である。 `CompositeOperationString` を利用すること。
     * @default undefined
     */
    compositeOperation?: CompositeOperation | CompositeOperationString;
    /**
     * オブジェクトのアンカーの横位置。アンカーについては以下の通り。
     * * アンカーとして設定した箇所がこのオブジェクトの基点 (位置、拡縮・回転の基点) となる。
     * * 単位は相対値 (左上端が (0, 0) 中央が (0.5, 0,5) 右下端が (1,1) ) である。
     * 初期値は `0` である。
     *
     * NOTE: `anchorX` または `anchorY` のどちらかを明示的に `null` に指定した場合、
     * このオブジェクトのアンカーは前バージョン(v2.x.x 以前)のデフォルトの挙動 (位置 `x`, `y` は左上端を基準に、拡大・縮小・回転の基点は中央を基準に決定) と同様になる。
     * これは前バージョンとの後方互換性のために存在する。
     * * @default 0
     */
    anchorX?: number | null;
    /**
     * オブジェクトのアンカーの縦位置。アンカーについては以下の通り。
     * * アンカーとして設定した箇所がこのオブジェクトの基点 (位置、拡縮・回転の基点) となる。
     * * 単位は相対値 (左上端が (0, 0) 中央が (0.5, 0,5) 右下端が (1,1) ) である。
     * 初期値は `0` である。
     *
     * NOTE: `anchorX` または `anchorY` のどちらを明示的に `null` に指定した場合、
     * このオブジェクトのアンカーは前バージョン(v2.x.x 以前)のデフォルトの挙動 (位置 `x`, `y` は左上端を基準に、拡大・縮小・回転の基点は中央を基準に決定) と同様になる。
     * これは前バージョンとの後方互換性のために存在する。
     * * @default 0
     */
    anchorY?: number | null;
}
/**
 * 二次元の幾何的オブジェクト。位置とサイズ (に加えて傾きや透明度も) を持つ。
 * ゲーム開発者は `E` を使えばよく、通常このクラスを意識する必要はない。
 */
export declare class Object2D implements CommonArea {
    /**
     * このオブジェクトの横位置。
     * 初期値は `0` である。実際の座標位置はscaleX, scaleY, angle, anchorX, anchorYの値も考慮する必要がある。
     * `E` や `Camera2D` においてこの値を変更した場合、 `modified()` を呼び出す必要がある。
     */
    x: number;
    /**
     * このオブジェクトの縦位置。
     * 初期値は `0` である。実際の座標位置はscaleX, scaleY, angle, anchorX, anchorYの値も考慮する必要がある。
     * `E` や `Camera2D` においてこの値を変更した場合、 `modified()` を呼び出す必要がある。
     */
    y: number;
    /**
     * このオブジェクトの横幅。
     * 初期値は `0` である。実際の表示領域としてはscaleX, scaleY, angleの値も考慮する必要がある。
     * `E` や `Camera2D` においてこの値を変更した場合、 `modified()` を呼び出す必要がある。
     */
    width: number;
    /**
     * このオブジェクトの縦幅。
     * 初期値は `0` である。実際の表示領域としてはscaleX, scaleY, angleの値も考慮する必要がある。
     * `E` や `Camera2D` においてこの値を変更した場合、 `modified()` を呼び出す必要がある。
     */
    height: number;
    /**
     * 0～1でオブジェクトの不透明度を表す。
     * 初期値は `1` である。本値が0の場合、Rendererは描画処理を省略する。
     * `E` においてこの値を変更した場合、 `modified()` を呼び出す必要がある。
     */
    opacity: number;
    /**
     * オブジェクトの横方向の倍率。
     * 初期値は `1` である。
     * `E` や `Camera2D` においてこの値を変更した場合、 `modified()` を呼び出す必要がある。
     */
    scaleX: number;
    /**
     * オブジェクトの縦方向の倍率。
     * 初期値は `1` である。
     * `E` や `Camera2D` においてこの値を変更した場合、 `modified()` を呼び出す必要がある。
     */
    scaleY: number;
    /**
     * オブジェクトの回転。度数で指定する。
     * 初期値は `0` である。
     * `E` や `Camera2D` においてこの値を変更した場合、 `modified()` を呼び出す必要がある。
     */
    angle: number;
    /**
     * 描画時の合成方法を指定する。
     * 初期値は `undefined` となり、合成方法を指定しないことを意味する。
     * `E` においてこの値を変更した場合、 `modified()` を呼び出す必要がある。
     */
    compositeOperation: CompositeOperation | CompositeOperationString | undefined;
    /**
     * オブジェクトのアンカーの横位置。アンカーについては以下の通り。
     * * アンカーとして設定した箇所がこのオブジェクトの基点 (位置、拡縮・回転の基点) となる。
     * * 単位は相対値 (左上端が (0, 0) 中央が (0.5, 0,5) 右下端が (1,1) ) である。
     * 初期値は `0` である。
     * `E` や `Camera2D` においてこの値を変更した場合、 `modified()` を呼び出す必要がある。
     *
     * NOTE: `anchorX` または `anchorY` のどちらを明示的に `null` に指定した場合、
     * このオブジェクトのアンカーは前バージョン(v2.x.x 以前)のデフォルトの挙動 (位置 `x`, `y` は左上端を基準に、拡大・縮小・回転の基点は中央を基準に決定) と同様になる。
     * これは前バージョンとの後方互換性のために存在する。
     */
    anchorX: number | null;
    /**
     * オブジェクトのアンカーの縦位置。アンカーについては以下の通り。
     * * アンカーとして設定した箇所がこのオブジェクトの基点 (位置、拡縮・回転の基点) となる。
     * * 単位は相対値 (左上端が (0, 0) 中央が (0.5, 0,5) 右下端が (1,1) ) である。
     * 初期値は `0` である。
     * `E` や `Camera2D` においてこの値を変更した場合、 `modified()` を呼び出す必要がある。
     *
     * NOTE: `anchorX` または `anchorY` のどちらを明示的に `null` に指定した場合、
     * このオブジェクトのアンカーは前バージョン(v2.x.x 以前)のデフォルトの挙動 (位置 `x`, `y` は左上端を基準に、拡大・縮小・回転の基点は中央を基準に決定) と同様になる。
     * これは前バージョンとの後方互換性のために存在する。
     */
    anchorY: number | null;
    /**
     * 変換行列のキャッシュ。 `Object2D` は状態に変更があった時、本値の_modifiedをtrueにする必要がある。
     * 初期値は `undefined` であり、 `getMatrix()` によって必要な時に生成されるため、
     * `if (this._matrix) this._matrix._modified = true` という式で記述する必要がある。
     *
     * エンジンに組み込まれているSprite等のエンティティ群は、
     * すでに本処理を組み込んでいるため通常ゲーム開発者はこの値を意識する必要はない。
     * `Object2D` を継承したクラスを新たに作る場合には、本フィールドを適切に操作しなければならない。
     * @private
     */
    _matrix: Matrix | undefined;
    /**
     * デフォルト値で `Object2D` のインスタンスを生成する。
     */
    constructor();
    /**
     * 指定されたパラメータで `Object2D` のインスタンスを生成する。
     * @param param 初期化に用いるパラメータのオブジェクト
     */
    constructor(param: Object2DParameterObject);
    /**
     * オブジェクトを移動する。
     * このメソッドは `x` と `y` を同時に設定するためのユーティリティメソッドである。
     * `E` や `Camera2D` においてこのメソッドを呼び出した場合、 `modified()` を呼び出す必要がある。
     * @param x X座標
     * @param y Y座標
     */
    moveTo(x: number, y: number): void;
    /**
     * オブジェクトを移動する。
     * このメソッドは `x` と `y` を同時に設定するためのユーティリティメソッドである。
     * `E` や `Camera2D` においてこのメソッドを呼び出した場合、 `modified()` を呼び出す必要がある。
     * @param obj X,Y座標
     */
    moveTo(obj: CommonOffset): void;
    /**
     * オブジェクトを相対的に移動する。
     * このメソッドは `x` と `y` を同時に加算するためのユーティリティメソッドである。
     * `E` や `Camera2D` においてこのメソッドを呼び出した場合、 `modified()` を呼び出す必要がある。
     * @param x X座標に加算する値
     * @param y Y座標に加算する値
     */
    moveBy(x: number, y: number): void;
    /**
     * オブジェクトのサイズを設定する。
     * このメソッドは `width` と `height` を同時に設定するためのユーティリティメソッドである。
     * `E` や `Camera2D` においてこのメソッドを呼び出した場合、 `modified()` を呼び出す必要がある。
     * @param width 幅
     * @param height 高さ
     */
    resizeTo(width: number, height: number): void;
    /**
     * オブジェクトのサイズを設定する。
     * このメソッドは `width` と `height` を同時に設定するためのユーティリティメソッドである。
     * `E` や `Camera2D` においてこのメソッドを呼び出した場合、 `modified()` を呼び出す必要がある。
     * @param size 幅と高さ
     */
    resizeTo(size: CommonSize): void;
    /**
     * オブジェクトのサイズを相対的に変更する。
     * このメソッドは `width` と `height` を同時に加算するためのユーティリティメソッドである。
     * `E` や `Camera2D` においてこのメソッドを呼び出した場合、 `modified()` を呼び出す必要がある。
     * @param width 加算する幅
     * @param height 加算する高さ
     */
    resizeBy(width: number, height: number): void;
    /**
     * オブジェクトの拡大率を設定する。
     * このメソッドは `scaleX` と `scaleY` に同じ値を同時に設定するためのユーティリティメソッドである。
     * `E` や `Camera2D` においてこのメソッドを呼び出した場合、 `modified()` を呼び出す必要がある。
     * @param scale 拡大率
     */
    scale(scale: number): void;
    /**
     * オブジェクトのアンカーの位置を設定する。
     * このメソッドは `anchorX` と `anchorY` を同時に設定するためのユーティリティメソッドである。
     * `E` や `Camera2D` においてこのメソッドを呼び出した場合、 `modified()` を呼び出す必要がある。
     */
    anchor(x: number, y: number): void;
    /**
     * このオブジェクトの変換行列を得る。
     */
    getMatrix(): Matrix;
    /**
     * 公開のプロパティから内部の変換行列キャッシュを更新する。
     * @private
     */
    _updateMatrix(): void;
}
