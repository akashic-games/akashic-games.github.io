export interface RubyOptions {
    /**
     * ルビのフォントサイズ。
     */
    rubyFontSize?: number;
    /**
     * ルビのフォント。
     */
    rubyFont?: g.Font;
    /**
     * rtとrbの行間。
     */
    rubyGap?: number;
    /**
     * rtとrbの描画幅が短い要素を、長い要素に合わせてどのようにレイアウトするか。
     */
    rubyAlign?: RubyAlign;
}
export interface RubyFragment extends RubyOptions {
    /**
     * ベーステキスト（ruby base）。
     */
    rb: string;
    /**
     * ルビ（ruby text）。
     */
    rt: string;
    /**
     * コンストラクタに与えられた文字列。
     */
    text: string;
}
/**
 * 文字とルビに分解されたtext。文字は必ず1文字ずつに分解される。
 */
export declare type Fragment = string | RubyFragment;
export declare type RubyParser = (text: string) => Fragment[];
export declare enum RubyAlign {
    /**
     * rtの字間は固定で中央に揃える。
     */
    Center = 0,
    /**
     * rb幅に合わせてrtの字間を揃える。
     */
    SpaceAround = 1
}
/**
 * 禁則処理の挙動を指定する関数。
 * @param fragments その行に含まれる予定のフラグメント
 * @param index その行で予定されている改行位置
 * @returns 禁則処理を適用した改行位置処理を適用した改行位置
 *
 */
export declare type LineBreakRule = (fragments: Fragment[], index: number) => number;
export declare function flatmap<T, U>(arr: T[], func: (e: T) => (U | U[])): U[];
