"use strict";
/**
 * Easing関数群。
 * 参考: http://gizma.com/easing/
 */
var Easing;
(function (Easing) {
    /**
     * 入力値をlinearした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function linear(t, b, c, d) {
        return c * t / d + b;
    }
    Easing.linear = linear;
    /**
     * 入力値をeaseInQuadした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInQuad(t, b, c, d) {
        t /= d;
        return c * t * t + b;
    }
    Easing.easeInQuad = easeInQuad;
    /**
     * 入力値をeaseOutQuadした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeOutQuad(t, b, c, d) {
        t /= d;
        return -c * t * (t - 2) + b;
    }
    Easing.easeOutQuad = easeOutQuad;
    /**
     * 入力値をeaseInOutQuadした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInOutQuad(t, b, c, d) {
        t /= d / 2;
        if (t < 1)
            return c / 2 * t * t + b;
        --t;
        return -c / 2 * (t * (t - 2) - 1) + b;
    }
    Easing.easeInOutQuad = easeInOutQuad;
    /**
     * 入力値をeaseInQubicした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInCubic(t, b, c, d) {
        t /= d;
        return c * t * t * t + b;
    }
    Easing.easeInCubic = easeInCubic;
    /**
     * @deprecated この関数は非推奨機能である。代わりに `easeInCubic` を用いるべきである。
     */
    Easing.easeInQubic = easeInCubic;
    /**
     * 入力値をeaseOutQubicした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeOutCubic(t, b, c, d) {
        t /= d;
        --t;
        return c * (t * t * t + 1) + b;
    }
    Easing.easeOutCubic = easeOutCubic;
    /**
     * @deprecated この関数は非推奨機能である。代わりに `easeOutCubic` を用いるべきである。
     */
    Easing.easeOutQubic = easeOutCubic;
    /**
     * 入力値をeaseInOutQubicした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInOutCubic(t, b, c, d) {
        t /= d / 2;
        if (t < 1)
            return c / 2 * t * t * t + b;
        t -= 2;
        return c / 2 * (t * t * t + 2) + b;
    }
    Easing.easeInOutCubic = easeInOutCubic;
    /**
     * @deprecated この関数は非推奨機能である。代わりに `easeInOutCubic` を用いるべきである。
     */
    Easing.easeInOutQubic = easeInOutCubic;
    /**
     * 入力値をeaseInQuartした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInQuart(t, b, c, d) {
        t /= d;
        return c * t * t * t * t + b;
    }
    Easing.easeInQuart = easeInQuart;
    /**
     * 入力値をeaseOutQuartした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeOutQuart(t, b, c, d) {
        t /= d;
        --t;
        return -c * (t * t * t * t - 1) + b;
    }
    Easing.easeOutQuart = easeOutQuart;
    /**
     * 入力値をeaseInQuintした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInQuint(t, b, c, d) {
        t /= d;
        return c * t * t * t * t * t + b;
    }
    Easing.easeInQuint = easeInQuint;
    /**
     * 入力値をeaseOutQuintした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeOutQuint(t, b, c, d) {
        t /= d;
        --t;
        return c * (t * t * t * t * t + 1) + b;
    }
    Easing.easeOutQuint = easeOutQuint;
    /**
     * 入力値をeaseInOutQuintした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInOutQuint(t, b, c, d) {
        t /= d / 2;
        if (t < 1)
            return c / 2 * t * t * t * t * t + b;
        t -= 2;
        return c / 2 * (t * t * t * t * t + 2) + b;
    }
    Easing.easeInOutQuint = easeInOutQuint;
    /**
     * 入力値をeaseInSineした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInSine(t, b, c, d) {
        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
    }
    Easing.easeInSine = easeInSine;
    /**
     * 入力値をeaseOutSineした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeOutSine(t, b, c, d) {
        return c * Math.sin(t / d * (Math.PI / 2)) + b;
    }
    Easing.easeOutSine = easeOutSine;
    /**
     * 入力値をeaseInOutSineした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInOutSine(t, b, c, d) {
        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
    }
    Easing.easeInOutSine = easeInOutSine;
    /**
     * 入力値をeaseInExpoした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInExpo(t, b, c, d) {
        return c * Math.pow(2, 10 * (t / d - 1)) + b;
    }
    Easing.easeInExpo = easeInExpo;
    /**
     * 入力値をeaseInOutExpoした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInOutExpo(t, b, c, d) {
        t /= d / 2;
        if (t < 1)
            return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
        --t;
        return c / 2 * (-Math.pow(2, -10 * t) + 2) + b;
    }
    Easing.easeInOutExpo = easeInOutExpo;
    /**
     * 入力値をeaseInCircした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInCirc(t, b, c, d) {
        t /= d;
        return -c * (Math.sqrt(1 - t * t) - 1) + b;
    }
    Easing.easeInCirc = easeInCirc;
    /**
     * 入力値をeaseOutCircした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeOutCirc(t, b, c, d) {
        t /= d;
        --t;
        return c * Math.sqrt(1 - t * t) + b;
    }
    Easing.easeOutCirc = easeOutCirc;
    /**
     * 入力値をeaseInOutCircした結果の現在位置を返す。
     * @param t 経過時間
     * @param b 開始位置
     * @param c 終了位置
     * @param d 所要時間
     */
    function easeInOutCirc(t, b, c, d) {
        t /= d / 2;
        if (t < 1)
            return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
        t -= 2;
        return c / 2 * (Math.sqrt(1 - t * t) + 1) + b;
    }
    Easing.easeInOutCirc = easeInOutCirc;
})(Easing || (Easing = {}));
module.exports = Easing;
