"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Storage = exports.StorageLoader = exports.StorageValueStore = exports.StorageCountsOperation = exports.StorageCondition = exports.StorageOrder = exports.StorageRegion = void 0;
// TODO: (GAMEDEV-1549) コメント整理
/**
 * 操作対象とするストレージのリージョンを表す。
 */
// サーバ仕様に則し、値を指定している。
var StorageRegion;
(function (StorageRegion) {
    /**
     * slotsを表す。
     */
    StorageRegion[StorageRegion["Slots"] = 1] = "Slots";
    /**
     * scoresを表す。
     */
    StorageRegion[StorageRegion["Scores"] = 2] = "Scores";
    /**
     * countsを表す。
     */
    StorageRegion[StorageRegion["Counts"] = 3] = "Counts";
    /**
     * valuesを表す。
     */
    StorageRegion[StorageRegion["Values"] = 4] = "Values";
})(StorageRegion = exports.StorageRegion || (exports.StorageRegion = {}));
/**
 * 一括取得を行う場合のソート順。
 */
var StorageOrder;
(function (StorageOrder) {
    /**
     * 昇順。
     */
    StorageOrder[StorageOrder["Asc"] = 0] = "Asc";
    /**
     * 降順。
     */
    StorageOrder[StorageOrder["Desc"] = 1] = "Desc";
})(StorageOrder = exports.StorageOrder || (exports.StorageOrder = {}));
/**
 * 条件を表す。
 */
// サーバ仕様に則し、値を指定している。
var StorageCondition;
(function (StorageCondition) {
    /**
     * 等価を表す（==）。
     */
    StorageCondition[StorageCondition["Equal"] = 1] = "Equal";
    /**
     * 「より大きい」を表す（>）。
     */
    StorageCondition[StorageCondition["GreaterThan"] = 2] = "GreaterThan";
    /**
     * 「より小さい」を表す（<）。
     */
    StorageCondition[StorageCondition["LessThan"] = 3] = "LessThan";
})(StorageCondition = exports.StorageCondition || (exports.StorageCondition = {}));
/**
 * Countsリージョンへの書き込み操作種別を表す。
 */
// サーバ仕様に則し、値を指定している。
var StorageCountsOperation;
(function (StorageCountsOperation) {
    /**
     * インクリメント操作を実行する。
     */
    StorageCountsOperation[StorageCountsOperation["Incr"] = 1] = "Incr";
    /**
     * デクリメント操作を実行する。
     */
    StorageCountsOperation[StorageCountsOperation["Decr"] = 2] = "Decr";
})(StorageCountsOperation = exports.StorageCountsOperation || (exports.StorageCountsOperation = {}));
/**
 * ストレージの値を保持するクラス。
 * ゲーム開発者がこのクラスのインスタンスを直接生成することはない。
 */
var StorageValueStore = /** @class */ (function () {
    function StorageValueStore(keys, values) {
        this._keys = keys;
        this._values = values;
    }
    /**
     * 値の配列を `StorageKey` またはインデックスから取得する。
     * 通常、インデックスは `Scene` のコンストラクタに指定した `storageKeys` のインデックスに対応する。
     * @param keyOrIndex `StorageKey` 又はインデックス
     */
    StorageValueStore.prototype.get = function (keyOrIndex) {
        if (this._values === undefined) {
            return [];
        }
        if (typeof keyOrIndex === "number") {
            return this._values[keyOrIndex];
        }
        else {
            var index = this._keys.indexOf(keyOrIndex);
            if (index !== -1) {
                return this._values[index];
            }
            for (var i = 0; i < this._keys.length; ++i) {
                var target = this._keys[i];
                if (target.region === keyOrIndex.region &&
                    target.regionKey === keyOrIndex.regionKey &&
                    target.userId === keyOrIndex.userId &&
                    target.gameId === keyOrIndex.gameId) {
                    return this._values[i];
                }
            }
        }
        return [];
    };
    /**
     * 値を `StorageKey` またはインデックスから取得する。
     * 対応する値が複数ある場合は、先頭の値を取得する。
     * 通常、インデックスは `Scene` のコンストラクタに指定した `storageKeys` のインデックスに対応する。
     * @param keyOrIndex `StorageKey` 又はインデックス
     */
    StorageValueStore.prototype.getOne = function (keyOrIndex) {
        var values = this.get(keyOrIndex);
        if (!values)
            return undefined;
        return values[0];
    };
    return StorageValueStore;
}());
exports.StorageValueStore = StorageValueStore;
/**
 * ストレージの値をロードするクラス。
 * ゲーム開発者がこのクラスのインスタンスを直接生成することはなく、
 * 本クラスの機能を利用することもない。
 */
var StorageLoader = /** @class */ (function () {
    function StorageLoader(storage, keys, serialization) {
        this._loaded = false;
        this._storage = storage;
        this._valueStore = new StorageValueStore(keys);
        this._handler = undefined;
        this._valueStoreSerialization = serialization;
    }
    /**
     * @private
     */
    StorageLoader.prototype._load = function (handler) {
        this._handler = handler;
        if (this._storage._load) {
            this._storage._load.call(this._storage, this._valueStore._keys, this, this._valueStoreSerialization);
        }
    };
    /**
     * @private
     */
    // 値の取得が完了したタイミングで呼び出される。
    // `values` は `this._valueStore._keys` に対応する値を表す `StorageValue` の配列。
    // 順番は `this._valueStore._keys` と同じでなければならない。
    StorageLoader.prototype._onLoaded = function (values, serialization) {
        this._valueStore._values = values;
        this._loaded = true;
        if (serialization)
            this._valueStoreSerialization = serialization;
        if (this._handler)
            this._handler._onStorageLoaded();
    };
    /**
     * @private
     */
    StorageLoader.prototype._onError = function (error) {
        if (this._handler)
            this._handler._onStorageLoadError(error);
    };
    return StorageLoader;
}());
exports.StorageLoader = StorageLoader;
/**
 * ストレージ。
 * ゲーム開発者がこのクラスのインスタンスを直接生成することはない。
 */
var Storage = /** @class */ (function () {
    function Storage() {
    }
    /**
     * ストレージに値を書き込む。
     * @param key ストレージキーを表す `StorageKey`
     * @param value 値を表す `StorageValue`
     * @param option 書き込みオプション
     */
    Storage.prototype.write = function (key, value, option) {
        if (this._write) {
            this._write(key, value, option);
        }
    };
    /**
     * 参加してくるプレイヤーの値をストレージから取得することを要求する。
     * 取得した値は `JoinEvent#storageValues` に格納される。
     * @param keys ストレージキーを表す `StorageReadKey` の配列。`StorageReadKey#userId` は無視される。
     */
    Storage.prototype.requestValuesForJoinPlayer = function (keys) {
        this._requestedKeysForJoinPlayer = keys;
    };
    /**
     * @private
     */
    Storage.prototype._createLoader = function (keys, serialization) {
        return new StorageLoader(this, keys, serialization);
    };
    /**
     * @private
     */
    // ストレージに値の書き込むを行う関数を登録する。
    // 登録した関数内の `this` は `Storage` を指す。
    Storage.prototype._registerWrite = function (write) {
        this._write = write;
    };
    /**
     * @private
     */
    // ストレージから値の読み込みを行う関数を登録する。
    // 登録した関数内の `this` は `Storage` を指す。
    // 読み込み完了した場合は、登録した関数内で `loader._onLoaded(values)` を呼ばなければならない。
    // エラーが発生した場合は、登録した関数内で `loader._onError(error)` を呼ばなければならない。
    Storage.prototype._registerLoad = function (load) {
        this._load = load;
    };
    return Storage;
}());
exports.Storage = Storage;
