"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParticleSystem = void 0;
var Emitter_1 = require("./Emitter");
function traverse(e, callback) {
    callback(e);
    for (var i = 0; i < e.children.length; i++) {
        traverse(e.children[i], callback);
    }
}
/**
 * パーティクルシステム。
 *
 * 複数の Emitter の位置や時間をまとめて操作します。
 */
var ParticleSystem = /** @class */ (function () {
    function ParticleSystem() {
        this.tx = 0;
        this.ty = 0;
        this.emitters = [];
        this.reset();
    }
    ParticleSystem.prototype.start = function () {
        this.emitterStatus = Emitter_1.EmitterStatus.Running;
        for (var i = 0; i < this.emitters.length; i++) {
            this.emitters[i].start();
        }
    };
    ParticleSystem.prototype.stop = function () {
        this.emitterStatus = Emitter_1.EmitterStatus.Stop;
        for (var i = 0; i < this.emitters.length; i++) {
            this.emitters[i].stop();
        }
    };
    ParticleSystem.prototype.pause = function () {
        this.emitterStatus = Emitter_1.EmitterStatus.Pause;
        for (var i = 0; i < this.emitters.length; i++) {
            this.emitters[i].pause();
        }
    };
    ParticleSystem.prototype.reset = function () {
        this.emitterTime = 0;
        this.emitterStatus = Emitter_1.EmitterStatus.Stop;
        this.skipTick = true;
        for (var i = 0; i < this.emitters.length; i++) {
            this.emitters[i].reset();
        }
    };
    ParticleSystem.prototype.move = function (dx, dy) {
        this.tx += dx;
        this.ty += dy;
    };
    ParticleSystem.prototype.moveTo = function (tx, ty) {
        this.tx = tx;
        this.ty = ty;
    };
    ParticleSystem.prototype.addEmitter = function (e) {
        this.emitters.push(e);
    };
    ParticleSystem.prototype.traverse = function (callback) {
        for (var i = 0; i < this.emitters.length; i++) {
            traverse(this.emitters[i], callback);
        }
    };
    ParticleSystem.prototype.update = function (dt) {
        if (this.emitterStatus === Emitter_1.EmitterStatus.Pause) {
            // nothing to do.
        }
        else if (this.emitterStatus === Emitter_1.EmitterStatus.Running) {
            for (var i = 0; i < this.emitters.length; i++) {
                this.emitters[i].update(dt);
            }
            this.tick(dt);
            for (var i = 0; i < this.emitters.length; i++) {
                this.emitters[i].emitTimerAt(this.emitterTime, dt, this.tx, this.ty);
            }
        }
        else if (this.emitterStatus === Emitter_1.EmitterStatus.Stop) {
            for (var i = 0; i < this.emitters.length; i++) {
                this.emitters[i].update(dt);
            }
        }
    };
    ParticleSystem.prototype.tick = function (dt) {
        if (this.skipTick) {
            this.skipTick = false;
        }
        else {
            this.emitterTime += dt;
        }
    };
    return ParticleSystem;
}());
exports.ParticleSystem = ParticleSystem;
