import type { LabelParameterObject } from "./LabelParameterObject";
import * as rp from "./RubyParser";
/**
 * 複数行のテキストを描画するエンティティ。
 * 文字列内の"\r\n"、"\n"、"\r"を区切りとして改行を行う。
 * また、自動改行が有効な場合はエンティティの幅に合わせて改行を行う。
 * 本クラスの利用にはg.Fontが必要となる。
 */
export declare class Label extends g.CacheableE {
    /**
     * 描画する文字列。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    text: string;
    /**
     * 描画に利用されるフォント。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    font: g.Font;
    /**
     * 文字列の描画位置。
     * 初期値は `"left"` である。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    textAlign: g.TextAlign | g.TextAlignString;
    /**
     * フォントサイズ。
     * 0 以上の数値でなければならない。
     * 初期値は `this.font.size` である。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    fontSize: number;
    /**
     * 行間サイズ。
     * 初期値は0である。
     * -1 * fontSize 以上の数値でなければならない。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    lineGap: number;
    /**
     * 自動改行を行うかどうか。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    lineBreak: boolean;
    /**
     * 文字列の描画色をCSS Color形式で指定する。
     * 元の描画色に重ねて表示されるため、アルファ値を指定した場合は元の描画色が透けて表示される。
     * 初期値は `undefined` となり、 描画色の変更を行わない。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    textColor: string;
    /**
     * ルビを使うかどうか。
     * 初期値は真である。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    rubyEnabled: boolean;
    /**
     * ルビを持つ行と持たない行の行間を統一するかどうか。
     * 初期値は偽である。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    fixLineGap: boolean;
    /**
     * フォントの上端にある余白を描画するかどうか。
     * 真の場合、文字の描画内容が崩れない範囲で余白を詰めて描画される。
     * 初期値は偽である。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    trimMarginTop: boolean;
    /**
     * `width` プロパティを `this.text` の描画に必要な幅の値に自動的に更新するかを表す。
     * `width` プロパティの更新は `this.invalidate()` を呼び出した後のタイミングで行われる。
     * `textAlign` を `"left"` 以外にする場合、この値は `false` にすべきである。
     * `textAlign` が `"left"` 以外かつ、 この値が `true` の場合、描画内容は不定である。
     * 初期値は偽である。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    widthAutoAdjust: boolean;
    /**
     * ルビを解釈するパーサ。
     * 初期値は DefaultRubyParser.ts で定義している parse() 関数である。
     * 任意の文法でルビを記述する場合、この値に適切な関数を指定する必要がある。
     * この値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    rubyParser: rp.RubyParser;
    /**
     * ルビのレイアウト設定。
     * 個別のルビに `this.rubyOptions` の各プロパティと同名のプロパティが存在する場合、個別のルビの設定が優先される。
     *
     * rubyFontSize: ルビのフォントサイズ。初期値は `this.fontSize / 2` である。
     * rubyFont: ルビのビットマップフォント。初期値は `this.font` である。
     * rubyGap: ルビと本文の行間。初期値は0である。
     * rubyAlign: ルビのレイアウト。初期値は `RubyAlign.SpaceAround` である。
     *
     * これらの値を変更した場合、 `this.invalidate()` を呼び出す必要がある。
     */
    rubyOptions: rp.RubyOptions;
    /**
     * 禁則処理の挙動を指定する関数。
     */
    lineBreakRule: rp.LineBreakRule;
    _beforeText: string;
    _beforeFont: g.Font;
    _beforeLineBreak: boolean;
    _beforeFontSize: number;
    _beforeTextAlign: g.TextAlign | g.TextAlignString;
    _beforeWidth: number;
    _beforeRubyEnabled: boolean;
    _beforeFixLineGap: boolean;
    _beforeTrimMarginTop: boolean;
    _beforeWidthAutoAdjust: boolean;
    _beforeRubyOptions: rp.RubyOptions;
    private _lines;
    /**
     * 自動改行を行う幅。
     * widthAutoAdjust が有効の場合、`this.width` は値が不定になるため、
     * 代わりに自動改行の幅を定める。
     * `this.width` を変更した場合、この値も同じ値に更新される。
     */
    private _lineBreakWidth;
    /**
     * 各種パラメータを指定して `Label` のインスタンスを生成する。
     * @param param このエンティティに対するパラメータ
     */
    constructor(param: LabelParameterObject);
    /**
     * このエンティティの描画キャッシュ無効化をエンジンに通知する。
     * このメソッドを呼び出し後、描画キャッシュの再構築が行われ、各 `g.Renderer` に描画内容の変更が反映される。
     */
    invalidate(): void;
    renderCache(renderer: g.Renderer): void;
    /**
     * 利用している `g.Surface` を破棄した上で、このエンティティを破棄する。
     * 利用している `g.Font` の破棄は行わないため、 `g.Font` の破棄はコンテンツ製作者が明示的に行う必要がある。
     */
    destroy(): void;
    /**
     * 禁則処理によって行幅が this.width を超える場合があるため、 `g.CacheableE` のメソッドをオーバーライドする
     */
    calculateCacheSize(): g.CommonSize;
    /**
     * 描画内容の行数を返す
     */
    get lineCount(): number;
    _offsetX(width: number): number;
    private _destroyLines;
    private _invalidateSelf;
    private _updateLines;
    private _drawLineInfoSurface;
    private _drawStringGlyphs;
    private _drawRubyFragmentDrawInfo;
    private _calcRubyHeightInfo;
    private _divideToLines;
    private _addFragmentToState;
    private _createStringGlyph;
    private _createGlyph;
    private _createRubyFragmentDrawInfo;
    private _flushCurrentStringDrawInfo;
    private _feedLine;
    private _needBreakLine;
    private _isDifferentRubyOptions;
    private _calcStandardOffsetY;
    /** stateのcurrent系プロパティを禁則処理的に正しい構造に再構築する */
    private _breakLine;
}
