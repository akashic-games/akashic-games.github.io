#!/usr/bin/env node

var pkg = require("../package.json");
var debug = require('debug')('script-test:server');
var http = require('http');
var commander = require("commander");

function collect(val, acc) {
	acc.push(val);
	return acc;
}

commander
	.version(pkg.version)
	.usage("[options] <game path>")
	.option("--cascade <path>", "path to contents to cascade", collect, [])
	.option("-p, --port <port>", "number of listen port. default 3000", parseInt)
	.option("-s, --scenario <scenario>", "scenario file")
	.parse(process.argv);

var gameBase = commander.args.length > 0 ? commander.args[0] : process.cwd();
var app = require('../lib/app')({ gameBase: gameBase, cascadeBases: commander.cascade });
var port = normalizePort(commander.port || process.env.PORT || 3000);

var path = require("path");
var fs = require("fs");

if (commander.scenario) {
	if (! fs.existsSync(commander.scenario)) {
		console.error("can not load " + commander.scenario);
		return;
	}
	app.set('scenarioPath', commander.scenario);
}

var gameJsonPath = path.join(app.gameBase, "game.json");
if (! commander.scenario && ! fs.existsSync(gameJsonPath)) {
	console.error("can not load " + path.join(app.gameBase, "game.json"));
	return;
}

app.set('port', port);

var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}

console.log("akashic-sandbox listen port: " + port);
console.log("hosting game: " + gameJsonPath);
if (app.settings.scenarioPath) {
	console.log("scenario file: " + app.settings.scenarioPath);
}
console.log("please access to http://localhost:%d/game/ by web-browser", port);
