import Posture = require("./Posture");
import Bone = require("./Bone");
import Attachment = require("./Attachment");
import { Animation } from "./AnimeParams";
import { AnimationHandlerParam } from "./AnimationHandlerParams";
/**
 * スケルトンクラス
 *
 * スケルトンクラスはアニメーションの計算と結果の保持を行う。
 */
declare class Skeleton {
    bones: Bone[];
    caches: Posture[];
    composedCaches: Posture[];
    matrixFunc: () => g.Matrix;
    private _triggeringBones;
    /**
     * Skeletonのインスタンスを生成する。
     *
     * @param bones ボーン配列
     * @param matrixFunc ルートボーンに前から乗算されるマトリクスを返す関数オブジェクト
     */
    constructor(bones: Bone[], matrixFunc?: () => g.Matrix);
    getPostureByName(name: string): Posture;
    /**
     * アタッチメントを取り付ける
     *
     * 通常ゲーム開発者はこのメソッドを直接呼び出す必要はない。
     *
     * @param attachment アタッチメント
     * @param boneName 取り付ける先のボーン名
     */
    attach(attachment: Attachment, boneName: string): void;
    /**
     * アタッチメントを取り外す。
     *
     * @param attachment 取り外すアタッチメント
     */
    removeAttachment(attachment: Attachment): void;
    /**
     * アニメーションの計算と描画の準備を行う。
     *
     * 通常ゲーム開発者はこのメソッドを直接呼び出す必要はない。
     *
     * @param time 現在のフレーム
     * @param anim 計算に用いるアニメーション
     */
    update(time: number, anim: Animation): void;
    _getBoneByName(boneName: string): Bone;
    /**
     * ボーンからアニメーションハンドラのためのg.Triggerインスタンスを取得する。
     *
     * @param boneName ボーン名
     * @param createIfNotExists 無ければg.Triggerインスタンスを生成するならtrueを与える
     */
    _getTrigger(boneName: string, createIfNotExists?: boolean): g.Trigger<AnimationHandlerParam>;
    /**
     * アニメーション計算ハンドラを実行する。
     */
    _handleUserEvent(startFrame: number, elapse: number, anim: Animation): void;
    private fastForward(cache, keyFrames, startFrame, elapse, animFrameCount);
    private fastBackward(cache, keyFrames, startFrame, elapse, animFrameCount);
    private updateCache(time, anim);
    private traverse(bone);
}
export = Skeleton;
