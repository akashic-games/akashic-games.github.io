"use strict";
var AttrId = require("./AttrId");
function checkVersion(version, fname) {
    var r = version.match(/(\d+)\.\d+.\d+/);
    if (!r || r[1] !== "2") {
        throw g.ExceptionFactory.createAssertionError("Invalid fileformat version: " + fname + ", " + version + "<2.0.0");
    }
}
function bindTextureFromAsset(skin, assets) {
    var assetName = skin.imageAssetName ? skin.imageAssetName : skin.name;
    var anAsset = assets[assetName];
    skin.surface = anAsset.asSurface();
}
function constructBoneTree(bones) {
    for (var i = 0; i < bones.length; i++) {
        var bone = bones[i];
        // シリアライズの時点で欠落するのでここで追加
        bone.parent = undefined;
        bone.children = [];
    }
    for (var i = 0; i < bones.length; i++) {
        var bone = bones[i];
        if (bone.parentIndex >= 0) {
            bone.parent = bones[bone.parentIndex];
            bone.parent.children.push(bone);
        }
    }
}
function loadResourceFromTextAsset(fileNames, assets, resolver) {
    var resources = [];
    fileNames.forEach(function (fname) {
        var assetName = fname.split(".")[0]; // アセット名は拡張子を覗いたファイル名
        var data = JSON.parse(assets[assetName].data);
        checkVersion(data.version, fname);
        if (resolver) {
            resolver(data.contents, assets);
        }
        resources.push(data.contents);
    });
    return resources;
}
function assignAttributeID(animation) {
    var ct = animation.curveTies;
    for (var key in ct) {
        if (ct.hasOwnProperty(key)) {
            ct[key].curves.forEach(function (c) {
                var attrId = AttrId[c.attribute];
                c.attrId = attrId;
            });
        }
    }
}
function mergeAssetArray(assetArray) {
    var merged = {};
    for (var i = 0; i < assetArray.length; i++) {
        var assets = assetArray[i];
        for (var key in assets) {
            if (assets.hasOwnProperty(key)) {
                merged[key] = assets[key];
            }
        }
    }
    return merged;
}
/**
 * アニメーションリソースクラス
 */
var Resource = (function () {
    function Resource() {
        this.skins = [];
        this.boneSets = [];
        this.animations = [];
        // ...
    }
    /**
     * asapjテキストアセットを読み込み、さらに関連するアセットも読み込む
     *
     * @param assetName asapjテキストアセット名
     * @param assets 利用できるアセット
     * @param ...otherAssets 利用できるアセット（可変長引数）
     */
    Resource.prototype.loadProject = function (assetName, assets) {
        var otherAssets = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            otherAssets[_i - 2] = arguments[_i];
        }
        var mergedAssets = mergeAssetArray([assets].concat(otherAssets));
        var json = mergedAssets[assetName].data;
        var data = JSON.parse(json);
        checkVersion(data.version, assetName);
        this.boneSets = loadResourceFromTextAsset(data.contents.boneSetFileNames, mergedAssets, function (c, asseta) {
            constructBoneTree(c.bones);
        });
        this.skins = loadResourceFromTextAsset(data.contents.skinFileNames, mergedAssets, bindTextureFromAsset);
        this.animations = loadResourceFromTextAsset(data.contents.animationFileNames, mergedAssets, undefined);
        this.animations.forEach(function (animation) {
            assignAttributeID(animation);
        });
    };
    /**
     * スキンを取得する。
     *
     * @param name スキン名
     */
    Resource.prototype.getSkinByName = function (name) {
        for (var i = 0; i < this.skins.length; i++) {
            if (this.skins[i].name === name) {
                return this.skins[i];
            }
        }
        return undefined;
    };
    /**
     * ボーンセットを取得する。
     *
     * @param name ボーンセット名
     */
    Resource.prototype.getBoneSetByName = function (name) {
        var found;
        this.boneSets.some(function (boneSet) {
            if (boneSet.name === name) {
                found = boneSet;
                return true;
            }
            else {
                return false;
            }
        });
        return found;
    };
    /**
     * アニメーションを取得する。
     *
     * @param name アニメーション名
     */
    Resource.prototype.getAnimationByName = function (name) {
        for (var i = 0; i < this.animations.length; i++) {
            if (this.animations[i].name === name) {
                return this.animations[i];
            }
        }
        return undefined;
    };
    return Resource;
}());
module.exports = Resource;
