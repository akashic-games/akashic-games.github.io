"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Collider = require("./Collider");
var CircleVolume = require("./CircleVolume");
var AttrId = require("./AttrId");
function getScaleFromMatrix(m) {
    var sx = Math.sqrt(m._matrix[0] * m._matrix[0] + m._matrix[1] * m._matrix[1]);
    var sy = Math.sqrt(m._matrix[2] * m._matrix[2] + m._matrix[3] * m._matrix[3]);
    return [sx, sy];
}
/**
 * 円形コライダー
 */
var CircleCollider = (function (_super) {
    __extends(CircleCollider, _super);
    /**
     * `CircleCollider` のインスタンスを生成する
     *
     * @param name コライダー名。Actorにアタッチすると同じ名前のboneをActorから探索し参照する
     * @param aabbFirst 衝突判定のさいAABBを優先することを示すフラグ
     * @param scaleOption CircleColiderのがスケールの影響をどのようになつかうかを指定する。
     *
     * scaleOptionは次の値のいずれかを与える。
     * - "min": スケールのX,Y成分を比較し小さい方を影響させる
     * - "max": スケールのX,Y成分を比較し大きい方を影響させる
     * - "none": スケールを影響させない
     */
    function CircleCollider(name, aabbFirst, scaleOption) {
        var _this = _super.call(this, aabbFirst) || this;
        _this.dirty = true;
        _this.name = name;
        _this._scaleOption = scaleOption;
        return _this;
    }
    CircleCollider.prototype.onAttached = function (actor) {
        var _this = this;
        actor.skeleton.bones.some(function (bone) {
            if (bone.name !== _this.name) {
                return false;
            }
            _this._posture = actor.skeleton.composedCaches[bone.arrayIndex];
            return true;
        });
    };
    CircleCollider.prototype.getVolume = function () {
        if (!this.enabled || !this._posture.finalizedCell || !this._posture.attrs[AttrId.visibility]) {
            return undefined;
        }
        if (!this.dirty) {
            return this._volume;
        }
        this.dirty = false;
        if (!this._volume) {
            this._volume = new CircleVolume();
        }
        this._volume.pos.x = this._posture.m._matrix[4];
        this._volume.pos.y = this._posture.m._matrix[5];
        // scale option に「スケールあり」が無いのは、楕円を許さないため
        if (this._scaleOption === "none") {
            this._volume.r = this._posture.attrs[AttrId.ccr];
        }
        else {
            // TODO: 大小を比較してからsqrtしたほうが高速
            var scales = getScaleFromMatrix(this._posture.m);
            this._volume.r = this._posture.attrs[AttrId.ccr];
            if (this._scaleOption === "min") {
                this._volume.r *= scales[0] < scales[1] ? scales[0] : scales[1];
            }
            else if (this._scaleOption === "max") {
                this._volume.r *= scales[0] > scales[1] ? scales[0] : scales[1];
            }
            else {
                g.game.logger.warn("Unknown scale option: " + this._scaleOption);
            }
        }
        this._volume.aabbFirst = this.aabbFirst;
        this._volume.dirty = true; // trigger to update aabb
        return this._volume;
    };
    return CircleCollider;
}(Collider));
module.exports = CircleCollider;
