import ActorParameterObject = require("./ActorParameterObject");
import Skin = require("./Skin");
import Skeleton = require("./Skeleton");
import Resource = require("./Resource");
import Attachment = require("./Attachment");
import Collider = require("./Collider");
import { Animation } from "./AnimeParams";
import { AnimationHandlerParam } from "./AnimationHandlerParams";
/**
 * ボーンベースのアニメーションを描画するエンティティ。
 */
declare class Actor extends g.E {
    resource: Resource;
    animation: Animation;
    skeleton: Skeleton;
    skins: {
        [key: string]: Skin;
    };
    colliders: Collider[];
    /**
     * 再生速度。
     *
     * 1.0で通常速度となる。
     * 初期値は1.0である。
     */
    playSpeed: number;
    /**
     * 再生を一時停止しているかを表す。
     *
     * 初期値は `false` である。
     */
    pause: boolean;
    /**
     * ループ再生するかを表す。
     *
     * 初期値は `true` である。
     */
    loop: boolean;
    /**
     * CELLを持たないボーンを描画するかを表す。
     *
     * 初期値は `false` である。
     */
    nullVisible: boolean;
    /**
     * ボーン座標系のX,Y軸を描画するかを表す。
     *
     * 初期値は`false`である。
     */
    boneCoordsVisible: boolean;
    /**
     * 当たり判定の領域を描画するかを表す。
     *
     * 初期値は`false`である。
     */
    colliderVisible: boolean;
    private _cntr;
    private _nextCntr;
    private _elapse;
    private _ended;
    /**
     * 各種パラメータを指定して `Actor` のインスタンスを生成する。
     */
    constructor(param: ActorParameterObject);
    /**
     * コライダーを追加する。
     *
     * @param 追加されるコライダー
     */
    addCollider(collider: Collider): void;
    /**
     * コライダーを削除する。
     *
     * @param collider 削除されるコライダー
     */
    removeCollider(collider: Collider): void;
    /**
     * スキンを追加する。
     *
     * 同じ名前を持つスキンがすでにActor内にあるとき、上書きされる。
     *
     * @param skins Actorに追加されるスキンの配列
     */
    setSkins(skins: Skin[]): void;
    /**
     * アニメーションの計算を行う。
     *
     * フレームカウンタがインクリメントされ、アニメーションカーブに基づいた各種プロパティの計算を行います。
     */
    calc(): void;
    /**
     * アニメーションを再生する。
     *
     * @param animationName アニメーション名
     * @param startFrame 再生開始フレーム
     * @param loopFlag 再生をループするか指定するフラグ。真の時ループ再生
     * @param playSpeed 再生速度。1.0で通常の再生速度
     */
    play(animationName: string, startFrame: number, loopFlag: boolean, playSpeed: number): void;
    /**
     * 現在のアニメーション再生位置。
     */
    currentFrame: number;
    /**
     * アニメーション再生終了イベント。
     */
    readonly ended: g.Trigger<void>;
    /**
     * アニメーション計算ハンドラを扱うg.Triggerを取得する。
     *
     * @param boneName ボーン名
     * @param createIfNotExists? g.Triggerが存在しない時、生成するなら true を与える。省略した時 undefined
     */
    calculated(boneName: string, createIfNotExists?: boolean): g.Trigger<AnimationHandlerParam>;
    /**
     * アタッチメントを追加する。
     *
     * 返り値は追加されたアタッチメントである。
     * 第一引数に文字列を指定した時、同名のセルをスキン中から探索、それをboneNameで指定したボーンにアタッチする。
     *
     * @param attachable アタッチメントインスタンスまたは装着済みのスキン中のセルを指定する文字列(セル名)
     * @param boneName アタッチ先のボーン名
     * @param matrix? アタッチ位置を調節するマトリクス
     */
    attach(attachable: string | Attachment, boneName: string, matrix?: g.Matrix): Attachment;
    /**
     * アタッチメントを削除する。
     *
     * @param attachment 削除するアタッチメント。
     */
    removeAttachment(attachment: Attachment): void;
    /**
     * ボーンの行列を取得する。
     *
     * @param boneName ボーン名。
     */
    getBoneMatrix(boneName: string): g.Matrix;
    renderSelf(renderer: g.Renderer, camera?: g.Camera): boolean;
    private renderAxes(renderer);
    private renderColliders(renderer);
    private renderPostures(sortedComposedCaches, renderer, camera);
    private renderSelfCore(renderer, camera, finalizedCell);
}
export = Actor;
