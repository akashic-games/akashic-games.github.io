"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Attachment = require("./Attachment");
/**
 * セル用アタッチメント
 *
 * セルを`Actor`の任意のボーンにアタッチするためのアタッチメント。
 */
var CellAttachment = (function (_super) {
    __extends(CellAttachment, _super);
    /**
     * コンストラクタ
     *
     * @param cellName セル名
     * @param skin スキン
     * @param matrix? ボーンに対してセルの位置や向きを変えるための行列(optional)
     */
    function CellAttachment(cellName, skin, matrix) {
        var _this = _super.call(this) || this;
        _this.matrix = matrix;
        _this.cell = skin.cells[cellName];
        _this.skin = skin;
        // pvtx, pvtyはセル矩形の中心を原点とした正規化された座標 [-0.5, +0.5]
        // ピクセル単位に変換してから行列の平行移動成分に与える
        if (_this.cell.pivot.x !== 0 || _this.cell.pivot.y !== 0) {
            var pvtx = (_this.cell.size.width * _this.cell.pivot.x) + (_this.cell.size.width / 2);
            var pvty = (_this.cell.size.height * _this.cell.pivot.y) + (_this.cell.size.height / 2);
            _this.pivotTransform = [1, 0, 0, 1, -pvtx, -pvty]; // (pvtx, pvty) がボーンの位置に来るように逆に移動
        }
        return _this;
    }
    CellAttachment.prototype.render = function (renderer) {
        renderer.save();
        {
            if (this.matrix) {
                renderer.transform(this.matrix._matrix);
            }
            if (this.pivotTransform) {
                renderer.transform(this.pivotTransform);
            }
            renderer.drawImage(this.skin.surface, this.cell.pos.x, this.cell.pos.y, this.cell.size.width, this.cell.size.height, 0, 0 // 転送先座標
            );
        }
        renderer.restore();
    };
    return CellAttachment;
}(Attachment));
module.exports = CellAttachment;
