// Generated by dts-bundle v0.3.0

declare module '@akashic-extension/akashic-animation' {
    export import Actor = require("__@akashic-extension/akashic-animation/Actor");
    export import ActorParameterObject = require("__@akashic-extension/akashic-animation/ActorParameterObject");
    export import Skeleton = require("__@akashic-extension/akashic-animation/Skeleton");
    export import Skin = require("__@akashic-extension/akashic-animation/Skin");
    export import Cell = require("__@akashic-extension/akashic-animation/Cell");
    export import FinalizedCell = require("__@akashic-extension/akashic-animation/FinalizedCell");
    export import Posture = require("__@akashic-extension/akashic-animation/Posture");
    export import Bone = require("__@akashic-extension/akashic-animation/Bone");
    export import BoneSet = require("__@akashic-extension/akashic-animation/BoneSet");
    export import AnimeParams = require("__@akashic-extension/akashic-animation/AnimeParams");
    export import Resource = require("__@akashic-extension/akashic-animation/Resource");
    export import Container = require("__@akashic-extension/akashic-animation/Container");
    export import ColliderInfo = require("__@akashic-extension/akashic-animation/ColliderInfo");
    export import Collider = require("__@akashic-extension/akashic-animation/Collider");
    export import BoneCellCollider = require("__@akashic-extension/akashic-animation/BoneCellCollider");
    export import CircleCollider = require("__@akashic-extension/akashic-animation/CircleCollider");
    export import CellAttachmentCollider = require("__@akashic-extension/akashic-animation/CellAttachmentCollider");
    export import Attachment = require("__@akashic-extension/akashic-animation/Attachment");
    export import CellAttachment = require("__@akashic-extension/akashic-animation/CellAttachment");
    export import Vector2 = require("__@akashic-extension/akashic-animation/Vector2");
    export import Size2 = require("__@akashic-extension/akashic-animation/Size2");
    export import AABB = require("__@akashic-extension/akashic-animation/AABB");
    export import Volume = require("__@akashic-extension/akashic-animation/Volume");
    export import BoxVolume = require("__@akashic-extension/akashic-animation/BoxVolume");
    export import CircleVolume = require("__@akashic-extension/akashic-animation/CircleVolume");
    export import AttrId = require("__@akashic-extension/akashic-animation/AttrId");
    export import AnimationHandlerParams = require("__@akashic-extension/akashic-animation/AnimationHandlerParams");
}

declare module '__@akashic-extension/akashic-animation/Actor' {
    import ActorParameterObject = require("__@akashic-extension/akashic-animation/ActorParameterObject");
    import Skin = require("__@akashic-extension/akashic-animation/Skin");
    import Skeleton = require("__@akashic-extension/akashic-animation/Skeleton");
    import Resource = require("__@akashic-extension/akashic-animation/Resource");
    import Attachment = require("__@akashic-extension/akashic-animation/Attachment");
    import Collider = require("__@akashic-extension/akashic-animation/Collider");
    import { Animation } from "__@akashic-extension/akashic-animation/AnimeParams";
    import { AnimationHandlerParam } from "__@akashic-extension/akashic-animation/AnimationHandlerParams";
    /**
        * ボーンベースのアニメーションを描画するエンティティ。
        */
    class Actor extends g.E {
            resource: Resource;
            animation: Animation;
            skeleton: Skeleton;
            skins: {
                    [key: string]: Skin;
            };
            colliders: Collider[];
            /**
                * 再生速度。
                *
                * 1.0で通常速度となる。
                * 初期値は1.0である。
                */
            playSpeed: number;
            /**
                * 再生を一時停止しているかを表す。
                *
                * 初期値は `false` である。
                */
            pause: boolean;
            /**
                * ループ再生するかを表す。
                *
                * 初期値は `true` である。
                */
            loop: boolean;
            /**
                * CELLを持たないボーンを描画するかを表す。
                *
                * 初期値は `false` である。
                */
            nullVisible: boolean;
            /**
                * ボーン座標系のX,Y軸を描画するかを表す。
                *
                * 初期値は`false`である。
                */
            boneCoordsVisible: boolean;
            /**
                * 当たり判定の領域を描画するかを表す。
                *
                * 初期値は`false`である。
                */
            colliderVisible: boolean;
            /**
                * 各種パラメータを指定して `Actor` のインスタンスを生成する。
                */
            constructor(param: ActorParameterObject);
            /**
                * コライダーを追加する。
                *
                * @param 追加されるコライダー
                */
            addCollider(collider: Collider): void;
            /**
                * コライダーを削除する。
                *
                * @param collider 削除されるコライダー
                */
            removeCollider(collider: Collider): void;
            /**
                * スキンを追加する。
                *
                * 同じ名前を持つスキンがすでにActor内にあるとき、上書きされる。
                *
                * @param skins Actorに追加されるスキンの配列
                */
            setSkins(skins: Skin[]): void;
            /**
                * アニメーションの計算を行う。
                *
                * フレームカウンタがインクリメントされ、アニメーションカーブに基づいた各種プロパティの計算を行います。
                */
            calc(): void;
            /**
                * アニメーションを再生する。
                *
                * @param animationName アニメーション名
                * @param startFrame 再生開始フレーム
                * @param loopFlag 再生をループするか指定するフラグ。真の時ループ再生
                * @param playSpeed 再生速度。1.0で通常の再生速度
                */
            play(animationName: string, startFrame: number, loopFlag: boolean, playSpeed: number): void;
            /**
                * 現在のアニメーション再生位置。
                */
            currentFrame: number;
            /**
                * アニメーション再生終了イベント。
                */
            readonly ended: g.Trigger<void>;
            /**
                * アニメーション計算ハンドラを扱うg.Triggerを取得する。
                *
                * @param boneName ボーン名
                * @param createIfNotExists? g.Triggerが存在しない時、生成するなら true を与える。省略した時 undefined
                */
            calculated(boneName: string, createIfNotExists?: boolean): g.Trigger<AnimationHandlerParam>;
            /**
                * アタッチメントを追加する。
                *
                * 返り値は追加されたアタッチメントである。
                * 第一引数に文字列を指定した時、同名のセルをスキン中から探索、それをboneNameで指定したボーンにアタッチする。
                *
                * @param attachable アタッチメントインスタンスまたは装着済みのスキン中のセルを指定する文字列(セル名)
                * @param boneName アタッチ先のボーン名
                * @param matrix? アタッチ位置を調節するマトリクス
                */
            attach(attachable: string | Attachment, boneName: string, matrix?: g.Matrix): Attachment;
            /**
                * アタッチメントを削除する。
                *
                * @param attachment 削除するアタッチメント。
                */
            removeAttachment(attachment: Attachment): void;
            /**
                * ボーンの行列を取得する。
                *
                * @param boneName ボーン名。
                */
            getBoneMatrix(boneName: string): g.Matrix;
            renderSelf(renderer: g.Renderer, camera?: g.Camera): boolean;
    }
    export = Actor;
}

declare module '__@akashic-extension/akashic-animation/ActorParameterObject' {
    import Resource = require("__@akashic-extension/akashic-animation/Resource");
    interface ActorParameterObject extends g.EParameterObject {
        scene: g.Scene;
        resource: Resource;
        animationName: string;
        skinNames: string[];
        boneSetName: string;
        width: number;
        height: number;
        playSpeed?: number;
    }
    export = ActorParameterObject;
}

declare module '__@akashic-extension/akashic-animation/Skeleton' {
    import Posture = require("__@akashic-extension/akashic-animation/Posture");
    import Bone = require("__@akashic-extension/akashic-animation/Bone");
    import Attachment = require("__@akashic-extension/akashic-animation/Attachment");
    import { Animation } from "__@akashic-extension/akashic-animation/AnimeParams";
    import { AnimationHandlerParam } from "__@akashic-extension/akashic-animation/AnimationHandlerParams";
    /**
        * スケルトンクラス
        *
        * スケルトンクラスはアニメーションの計算と結果の保持を行う。
        */
    class Skeleton {
            bones: Bone[];
            caches: Posture[];
            composedCaches: Posture[];
            matrixFunc: () => g.Matrix;
            /**
                * Skeletonのインスタンスを生成する。
                *
                * @param bones ボーン配列
                * @param matrixFunc ルートボーンに前から乗算されるマトリクスを返す関数オブジェクト
                */
            constructor(bones: Bone[], matrixFunc?: () => g.Matrix);
            getPostureByName(name: string): Posture;
            /**
                * アタッチメントを取り付ける
                *
                * 通常ゲーム開発者はこのメソッドを直接呼び出す必要はない。
                *
                * @param attachment アタッチメント
                * @param boneName 取り付ける先のボーン名
                */
            attach(attachment: Attachment, boneName: string): void;
            /**
                * アタッチメントを取り外す。
                *
                * @param attachment 取り外すアタッチメント
                */
            removeAttachment(attachment: Attachment): void;
            /**
                * アニメーションの計算と描画の準備を行う。
                *
                * 通常ゲーム開発者はこのメソッドを直接呼び出す必要はない。
                *
                * @param time 現在のフレーム
                * @param anim 計算に用いるアニメーション
                */
            update(time: number, anim: Animation): void;
            _getBoneByName(boneName: string): Bone;
            /**
                * ボーンからアニメーションハンドラのためのg.Triggerインスタンスを取得する。
                *
                * @param boneName ボーン名
                * @param createIfNotExists 無ければg.Triggerインスタンスを生成するならtrueを与える
                */
            _getTrigger(boneName: string, createIfNotExists?: boolean): g.Trigger<AnimationHandlerParam>;
            /**
                * アニメーション計算ハンドラを実行する。
                */
            _handleUserEvent(startFrame: number, elapse: number, anim: Animation): void;
    }
    export = Skeleton;
}

declare module '__@akashic-extension/akashic-animation/Skin' {
    import Cell = require("__@akashic-extension/akashic-animation/Cell");
    /**
      * スキンクラス
      *
      * スキンはActorの各ボーンに取り付けられる表示物であるセルの集合です
      */
    class Skin {
        name: string;
        imageAssetName: string;
        imageSizeH: number;
        imageSizeW: number;
        surface: g.Surface;
        cells: {
            [key: string]: Cell;
        };
    }
    export = Skin;
}

declare module '__@akashic-extension/akashic-animation/Cell' {
    import Vector2 = require("__@akashic-extension/akashic-animation/Vector2");
    import Size2 = require("__@akashic-extension/akashic-animation/Size2");
    /**
      * セル
      */
    class Cell {
        name: string;
        pos: Vector2;
        size: Size2;
        pivot: Vector2;
        rz: number;
        m: g.Matrix;
        constructor();
    }
    export = Cell;
}

declare module '__@akashic-extension/akashic-animation/FinalizedCell' {
    import Cell = require("__@akashic-extension/akashic-animation/Cell");
    class FinalizedCell {
        surface: g.Surface;
        cell: Cell;
        u: number;
        v: number;
        matrix: g.Matrix;
    }
    export = FinalizedCell;
}

declare module '__@akashic-extension/akashic-animation/Posture' {
    import Attachment = require("__@akashic-extension/akashic-animation/Attachment");
    import FinalizedCell = require("__@akashic-extension/akashic-animation/FinalizedCell");
    import { AnimationHandlerParam } from "__@akashic-extension/akashic-animation/AnimationHandlerParams";
    class Posture {
        attrs: any[];
        m: g.Matrix;
        attachments: Attachment[];
        finalizedCell: FinalizedCell;
        index: number;
        _trigger: g.Trigger<AnimationHandlerParam>;
        constructor();
        reset(): void;
        quickcos(rz_in: number): number;
        updateMatrix(): void;
    }
    export = Posture;
}

declare module '__@akashic-extension/akashic-animation/Bone' {
    import ColliderInfo = require("__@akashic-extension/akashic-animation/ColliderInfo");
    /**
      * ボーンクラス。
      */
    class Bone {
        parentIndex: number;
        parent: Bone;
        children: Bone[];
        name: string;
        arrayIndex: number;
        colliderInfos: ColliderInfo[];
        constructor();
    }
    export = Bone;
}

declare module '__@akashic-extension/akashic-animation/BoneSet' {
    import Bone = require("__@akashic-extension/akashic-animation/Bone");
    /**
      * ボーン集合。
      */
    class BoneSet {
        name: string;
        bones: Bone[];
        constructor(name: string, bones: Bone[]);
    }
    export = BoneSet;
}

declare module '__@akashic-extension/akashic-animation/AnimeParams' {
    /**
      * セルアニメーションの値。
      *
      * KeyFrame<CellValue>に格納されセルアニメーション（時間とともに変化するセル）に利用される。
      */
    export class CellValue {
        skinName: string;
        cellName: string;
    }
    export class IpCurve {
        values: number[];
    }
    export class KeyFrame<T> {
        time: number;
        value: T;
        ipType: string;
        ipCurve: IpCurve;
    }
    export class Curve<T> {
        attribute: string;
        keyFrames: KeyFrame<T>[];
    }
    export class CurveTie {
        boneName: string;
        curves: Curve<any>[];
    }
    export class Animation {
        name: string;
        fps: number;
        frameCount: number;
        curveTies: {
            [key: string]: CurveTie;
        };
    }
}

declare module '__@akashic-extension/akashic-animation/Resource' {
    import Skin = require("__@akashic-extension/akashic-animation/Skin");
    import BoneSet = require("__@akashic-extension/akashic-animation/BoneSet");
    import { Animation } from "__@akashic-extension/akashic-animation/AnimeParams";
    /**
        * アニメーションリソースクラス
        */
    class Resource {
            skins: Skin[];
            boneSets: BoneSet[];
            animations: Animation[];
            constructor();
            /**
                * asapjテキストアセットを読み込み、さらに関連するアセットも読み込む
                *
                * @param assetName asapjテキストアセット名
                * @param assets 利用できるアセット
                * @param ...otherAssets 利用できるアセット（可変長引数）
                */
            loadProject(assetName: string, assets: {
                    [key: string]: g.Asset;
            }, ...otherAssets: {
                    [key: string]: g.Asset;
            }[]): void;
            /**
                * スキンを取得する。
                *
                * @param name スキン名
                */
            getSkinByName(name: string): Skin;
            /**
                * ボーンセットを取得する。
                *
                * @param name ボーンセット名
                */
            getBoneSetByName(name: string): BoneSet;
            /**
                * アニメーションを取得する。
                *
                * @param name アニメーション名
                */
            getAnimationByName(name: string): Animation;
    }
    export = Resource;
}

declare module '__@akashic-extension/akashic-animation/Container' {
    /**
      * アニメーションデータコンテナ
      *
      * ASAファイル(拡張子がasa...(asapj, asaan and etc))に格納されるデータにバージョン情報を追加する
      */
    class Container {
        version: string;
        contents: any;
        constructor(version: string, contents: any);
    }
    export = Container;
}

declare module '__@akashic-extension/akashic-animation/ColliderInfo' {
    interface ColliderInfo {
        geometryType: string;
        boundType: string;
        cellName?: string;
        center?: {
            x: number;
            y: number;
        };
        radius?: number;
        scaleOption?: string;
        width?: number;
        height?: number;
    }
    export = ColliderInfo;
}

declare module '__@akashic-extension/akashic-animation/Collider' {
    import Volume = require("__@akashic-extension/akashic-animation/Volume");
    import Actor = require("__@akashic-extension/akashic-animation/Actor");
    /**
        * コリジョンのためのVolume算出役
        */
    class Collider {
            /**
                * 名前
                *
                * 利用方法の詳細は各派生クラスのリファレンスを参照してください。
                */
            name: string;
            /**
                * コンバータによってはこれに値を与える。どう使うかは開発者次第。システムは関知しない
                */
            tag: number;
            /**
                * dirtyフラグ。開発者はこれを使うことはない。
                */
            dirty: boolean;
            /**
                * 有効・無効フラグ
                *
                * `false`の時、`getVolume()`は`undefined`を返す。
                * 初期値は`true`である。
                */
            enabled: boolean;
            /**
                * AABB優先フラグ
                *
                * `getVolume()`の返す`Volume`はこの値がコピーされる。
                */
            aabbFirst: boolean;
            constructor(aabbFirst?: boolean);
            getVolume(): Volume;
            onAttached(actor: Actor): void;
    }
    export = Collider;
}

declare module '__@akashic-extension/akashic-animation/BoneCellCollider' {
    import Collider = require("__@akashic-extension/akashic-animation/Collider");
    import BoxVolume = require("__@akashic-extension/akashic-animation/BoxVolume");
    import Actor = require("__@akashic-extension/akashic-animation/Actor");
    /**
      * セル用コライダー
      *
      * セルの矩形から当たり判定用ボリュームを算出するコライダー
      * 初期化にはセルを含むPostureを与える
      */
    class BoneCellCollider extends Collider {
        constructor(name: string, aabbFirst: boolean);
        onAttached(actor: Actor): void;
        getVolume(): BoxVolume;
    }
    export = BoneCellCollider;
}

declare module '__@akashic-extension/akashic-animation/CircleCollider' {
    import Collider = require("__@akashic-extension/akashic-animation/Collider");
    import CircleVolume = require("__@akashic-extension/akashic-animation/CircleVolume");
    import Actor = require("__@akashic-extension/akashic-animation/Actor");
    /**
        * 円形コライダー
        */
    class CircleCollider extends Collider {
            /**
                * `CircleCollider` のインスタンスを生成する
                *
                * @param name コライダー名。Actorにアタッチすると同じ名前のboneをActorから探索し参照する
                * @param aabbFirst 衝突判定のさいAABBを優先することを示すフラグ
                * @param scaleOption CircleColiderのがスケールの影響をどのようになつかうかを指定する。
                *
                * scaleOptionは次の値のいずれかを与える。
                * - "min": スケールのX,Y成分を比較し小さい方を影響させる
                * - "max": スケールのX,Y成分を比較し大きい方を影響させる
                * - "none": スケールを影響させない
                */
            constructor(name: string, aabbFirst: boolean, scaleOption: string);
            onAttached(actor: Actor): void;
            getVolume(): CircleVolume;
    }
    export = CircleCollider;
}

declare module '__@akashic-extension/akashic-animation/CellAttachmentCollider' {
    import Collider = require("__@akashic-extension/akashic-animation/Collider");
    import CellAttachment = require("__@akashic-extension/akashic-animation/CellAttachment");
    import BoxVolume = require("__@akashic-extension/akashic-animation/BoxVolume");
    /**
      * CellAttachmentをアタリ判定に用いるコライダー
      */
    class CellAttachmentCollider extends Collider {
        cellAttachment: CellAttachment;
        constructor(cellAttachment: CellAttachment, name: string, aabbFirst: boolean);
        getVolume(): BoxVolume;
    }
    export = CellAttachmentCollider;
}

declare module '__@akashic-extension/akashic-animation/Attachment' {
    import Posture = require("__@akashic-extension/akashic-animation/Posture");
    /**
        * アタッチメントクラス
        */
    abstract class Attachment {
            /**
                * Actor#attach()の際に与えられる接続先Posture
                *
                * Posture#mにはActorの行列と親ボーンの行列を全て乗算した結果が格納される
                */
            posture: Posture;
            /**
                * 描画処理
                *
                * アタッチしたボーンの座標系で描画される
                *
                * @param renderer レンダラ
                */
            abstract render(renderer: g.Renderer): void;
    }
    export = Attachment;
}

declare module '__@akashic-extension/akashic-animation/CellAttachment' {
    import Attachment = require("__@akashic-extension/akashic-animation/Attachment");
    import Cell = require("__@akashic-extension/akashic-animation/Cell");
    import Skin = require("__@akashic-extension/akashic-animation/Skin");
    /**
        * セル用アタッチメント
        *
        * セルを`Actor`の任意のボーンにアタッチするためのアタッチメント。
        */
    class CellAttachment extends Attachment {
            matrix: g.Matrix;
            cell: Cell;
            skin: Skin;
            pivotTransform: number[];
            /**
                * コンストラクタ
                *
                * @param cellName セル名
                * @param skin スキン
                * @param matrix? ボーンに対してセルの位置や向きを変えるための行列(optional)
                */
            constructor(cellName: string, skin: Skin, matrix?: g.Matrix);
            render(renderer: g.Renderer): void;
    }
    export = CellAttachment;
}

declare module '__@akashic-extension/akashic-animation/Vector2' {
    /**
      * 2Dベクトルクラス
      */
    class Vector2 implements g.CommonOffset {
        x: number;
        y: number;
        constructor(x?: number, y?: number);
    }
    export = Vector2;
}

declare module '__@akashic-extension/akashic-animation/Size2' {
    /**
      * 2Dサイズクラス
      */
    class Size2 implements g.CommonSize {
        width: number;
        height: number;
        constructor(width?: number, height?: number);
    }
    export = Size2;
}

declare module '__@akashic-extension/akashic-animation/AABB' {
    import Vector2 = require("__@akashic-extension/akashic-animation/Vector2");
    import Size2 = require("__@akashic-extension/akashic-animation/Size2");
    /**
        * AABBクラス。
        */
    class AABB {
            /**
                * Bounding Box の中心位置。
                */
            origin: Vector2;
            /**
                * `origin`からの広がり。矩形のサイズの半分となる。
                */
            extent: Size2;
            constructor();
    }
    export = AABB;
}

declare module '__@akashic-extension/akashic-animation/Volume' {
    import AABB = require("__@akashic-extension/akashic-animation/AABB");
    /**
      * アタリ判定用領域インターフェース
      */
    interface Volume {
        aabbFirst: boolean;
        dirty: boolean;
        aabb(): AABB;
    }
    export = Volume;
}

declare module '__@akashic-extension/akashic-animation/BoxVolume' {
    import Volume = require("__@akashic-extension/akashic-animation/Volume");
    import AABB = require("__@akashic-extension/akashic-animation/AABB");
    import Vector2 = require("__@akashic-extension/akashic-animation/Vector2");
    import Size2 = require("__@akashic-extension/akashic-animation/Size2");
    /**
        * BoxVolume
        *
        * アタリ判定用矩形Volume。
        *
        * 実際にアタリ判定を行うときは `BoxVolume#matrix`,`origin` そして, `size` を用いてワールド座標系での領域を求める必要があります。
        */
    class BoxVolume implements Volume {
            /**
                * 矩形の原点（ローカル座標）
                */
            origin: Vector2;
            /**
                * 矩形のサイズ（スケール前）
                */
            size: Size2;
            /**
                * ワールド座標に変換する行列
                */
            matrix: g.Matrix;
            aabbFirst: boolean;
            dirty: boolean;
            constructor();
            aabb(): AABB;
    }
    export = BoxVolume;
}

declare module '__@akashic-extension/akashic-animation/CircleVolume' {
    import Volume = require("__@akashic-extension/akashic-animation/Volume");
    import AABB = require("__@akashic-extension/akashic-animation/AABB");
    import Vector2 = require("__@akashic-extension/akashic-animation/Vector2");
    /**
        * CircleVolume。
        *
        * アタリ判定用真円形Volume。
        */
    class CircleVolume implements Volume {
            /**
                * 位置（ワールド座標）。
                */
            pos: Vector2;
            /**
                * 半径。
                */
            r: number;
            aabbFirst: boolean;
            dirty: boolean;
            constructor();
            aabb(): AABB;
    }
    export = CircleVolume;
}

declare module '__@akashic-extension/akashic-animation/AttrId' {
    /**
        * 属性ID
        *
        * Posture#attrs 属性配列に格納された値にアクセスするための添字として用いる。
        * 例えばX方向移動量にアクセスするには posture.attrs[AttrId.tx] とする。
        */
    enum AttrId {
            /**
                * X方向移動。
                */
            tx = 0,
            /**
                * Y方向移動。
                */
            ty = 1,
            /**
                * Z軸回転(deg)。
                */
            rz = 2,
            /**
                * X方向スケール。
                */
            sx = 3,
            /**
                * Y方向スケール。
                */
            sy = 4,
            /**
                * 半透明度。
                *
                * 0で透明、1で不透明を表す。
                */
            alpha = 5,
            /**
                * セル値。
                *
                * CellValueクラスを参照。
                */
            cv = 6,
            /**
                * セル回転位置X座標。
                *
                * セルの中心位置は pvtx, pvty 属性によって与えられる。
                */
            pvtx = 7,
            /**
                * セル回転位置Y座標。
                *
                * セルの中心位置は pvtx, pvty 属性によって与えられる。
                */
            pvty = 8,
            /**
                * セルテクスチャU座標。
                *
                * セルの参照する画像上の参照位置。正規化されている。
                */
            tu = 9,
            /**
                * セルテクスチャV座標。
                *
                * セルの参照する画像上の参照位置。正規化されている。
                */
            tv = 10,
            /**
                * セル描画優先順位。
                *
                * あるActorをレンダリングするときのセル間の描画優先順位。
                */
            prio = 11,
            /**
                * 可視属性。
                */
            visibility = 12,
            /**
                * 円アタリ判定半径。
                */
            ccr = 13,
            /**
                * 水平フリップ。
                */
            flipH = 14,
            /**
                * 垂直フリップ。
                */
            flipV = 15,
            /**
                * ユーザデータ。
                */
            userData = 16,
    }
    export = AttrId;
}

declare module '__@akashic-extension/akashic-animation/AnimationHandlerParams' {
    import Posture = require("__@akashic-extension/akashic-animation/Posture");
    /**
        * AnimationHandlerParamのためのキーフレーム情報
        */
    export interface AnimationHandlerKeyFrameInfo {
            time: number;
            userData?: any;
    }
    /**
        * Actor#addHandlerForBone()で登録されたハンドラの呼び出し時に渡されるパラメータ
        */
    export interface AnimationHandlerParam {
            /**
                * アニメーション計算結果
                *
                * スキップされたユーザーデータ処理のためのハンドラ呼び出しでは`undefined`となる。
                */
            posture?: Posture;
            /**
                * 左キーフレーム情報
                *
                * AnimationHandlerParam#currentFrameと同じか直前のKeyFrameの情報
                */
            left?: AnimationHandlerKeyFrameInfo;
            /**
                * 右キーフレーム情報
                *
                * AnimationHandlerParam#currentFrameの直後のKeyFrameの情報
                */
            right?: AnimationHandlerKeyFrameInfo;
            /**
                * 現在のフレーム番号
                */
            currentFrame: number;
            /**
                * 現在再生されているアニメーションのフレーム数
                */
            frameCount: number;
    }
}

