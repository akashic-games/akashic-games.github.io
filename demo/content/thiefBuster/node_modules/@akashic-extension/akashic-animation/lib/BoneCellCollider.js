"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Collider = require("./Collider");
var BoxVolume = require("./BoxVolume");
var AttrId = require("./AttrId");
/**
 * セル用コライダー
 *
 * セルの矩形から当たり判定用ボリュームを算出するコライダー
 * 初期化にはセルを含むPostureを与える
 */
var BoneCellCollider = (function (_super) {
    __extends(BoneCellCollider, _super);
    function BoneCellCollider(name, aabbFirst) {
        var _this = _super.call(this, aabbFirst) || this;
        _this.dirty = true;
        _this.name = name;
        return _this;
    }
    BoneCellCollider.prototype.onAttached = function (actor) {
        var _this = this;
        actor.skeleton.bones.some(function (bone) {
            if (bone.name !== _this.name) {
                return false;
            }
            _this._posture = actor.skeleton.composedCaches[bone.arrayIndex];
            return true;
        });
    };
    BoneCellCollider.prototype.getVolume = function () {
        // TODO: 以下の処理の流れを定式化し、必要なoverrideのみ実装させるようにするべきか
        if (!this.enabled || !this._posture.finalizedCell || !this._posture.attrs[AttrId.visibility]) {
            return undefined;
        }
        if (this.dirty) {
            this.dirty = false;
            if (!this._volume) {
                this._volume = new BoxVolume();
            }
            var fCell = this._posture.finalizedCell;
            this._volume.aabbFirst = this.aabbFirst;
            this._volume.origin.x = 0;
            this._volume.origin.y = 0;
            this._volume.size.width = fCell.cell.size.width;
            this._volume.size.height = fCell.cell.size.height;
            this._volume.matrix = this._posture.m.multiplyNew(fCell.matrix);
            this._volume.dirty = true; // trigger to update aabb
        }
        return this._volume;
    };
    return BoneCellCollider;
}(Collider));
module.exports = BoneCellCollider;
