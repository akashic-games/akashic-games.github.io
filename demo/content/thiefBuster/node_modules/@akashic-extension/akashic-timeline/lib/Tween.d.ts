import TweenOption = require("./TweenOption");
import EasingType = require("./EasingType");
import TweenStateSerialization = require("./TweenStateSerialization");
/**
 * オブジェクトの状態を変化させるアクションを定義するクラス。
 * 本クラスのインスタンス生成には`Timeline#create()`を利用する。
 */
declare class Tween {
    /**
     * アクションの実行が一時停止状態かどうかを表すフラグ。
     * 一時停止する場合は`true`をセットする。
     */
    paused: boolean;
    _target: any;
    _stepIndex: number;
    _loop: boolean;
    _modifiedHandler: () => void;
    _destroyedHandler: () => boolean;
    /**
     * ステップのリスト。ステップはアクションで構成されており、
     * 1ステップ内に複数のアクションが存在する場合、それらは並列実行される。
     */
    private _steps;
    private _lastStep;
    /**
     * 次に追加するアクションが並列実行か否か。
     */
    private _pararel;
    /**
     * Tweenを生成する。
     * @param target 対象となるオブジェクト
     * @param option オプション
     */
    constructor(target: any, option?: TweenOption);
    /**
     * オブジェクトの状態を変化させるアクションを追加する。
     * @param props 変化内容
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    to(props: any, duration: number, easing?: EasingType): this;
    /**
     * オブジェクトの状態を変化させるアクションを追加する。
     * 変化内容はアクション開始時を基準とした相対値で指定する。
     * @param props 変化内容
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     * @param multiply `true`を指定すると`props`の値をアクション開始時の値に掛け合わせた値が終了値となる（指定しない場合は`false`）
     */
    by(props: any, duration: number, easing?: EasingType, multiply?: boolean): this;
    /**
     * 次に追加されるアクションを、このメソッド呼び出しの直前に追加されたアクションと並列に実行させる。
     * `Tween#con()`で並列実行を指定されたアクションが全て終了後、次の並列実行を指定されていないアクションを実行する。
     */
    con(): this;
    /**
     * オブジェクトの変化を停止するアクションを追加する。
     * @param duration 停止する時間（ミリ秒）
     */
    wait(duration: number): this;
    /**
     * 関数を即座に実行するアクションを追加する。
     * @param func 実行する関数
     */
    call(func: () => void): this;
    /**
     * 一時停止するアクションを追加する。
     * 内部的には`Tween#call()`で`Tween#paused`に`true`をセットしている。
     */
    pause(): this;
    /**
     * 待機時間をキーとして実行したい関数を複数指定する。
     * @param actions 待機時間をキーとして実行したい関数を値としたオブジェクト
     */
    cue(funcs: {
        [key: string]: () => void;
    }): this;
    /**
     * 指定した時間を経過するまで毎フレーム指定した関数を呼び出すアクションを追加する。
     * @param func 毎フレーム呼び出される関数。第一引数は経過時間、第二引数はEasingした結果の変化量（0-1）となる。
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    every(func: (e: number, p: number) => void, duration: number, easing?: EasingType): this;
    /**
     * ターゲットをフェードインさせるアクションを追加する。
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    fadeIn(duration: number, easing?: EasingType): this;
    /**
     * ターゲットをフェードアウトさせるアクションを追加する。
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    fadeOut(duration: number, easing?: EasingType): this;
    /**
     * ターゲットを指定した座標に移動するアクションを追加する。
     * @param x x座標
     * @param y y座標
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    moveTo(x: number, y: number, duration: number, easing?: EasingType): this;
    /**
     * ターゲットを指定した相対座標に移動するアクションを追加する。相対座標の基準値はアクション開始時の座標となる。
     * @param x x座標
     * @param y y座標
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    moveBy(x: number, y: number, duration: number, easing?: EasingType): this;
    /**
     * ターゲットのX座標を指定した座標に移動するアクションを追加する。
     * @param x x座標
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    moveX(x: number, duration: number, easing?: EasingType): this;
    /**
     * ターゲットのY座標を指定した座標に移動するアクションを追加する。
     * @param y y座標
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    moveY(y: number, duration: number, easing?: EasingType): this;
    /**
     * ターゲットを指定した角度に回転するアクションを追加する。
     * @param angle 角度
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    rotateTo(angle: number, duration: number, easing?: EasingType): this;
    /**
     * ターゲットをアクション開始時の角度を基準とした相対角度に回転するアクションを追加する。
     * @param angle 角度
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    rotateBy(angle: number, duration: number, easing?: EasingType): this;
    /**
     * ターゲットを指定した倍率に拡縮するアクションを追加する。
     * @param scaleX X方向の倍率
     * @param scaleY Y方向の倍率
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    scaleTo(scaleX: number, scaleY: number, duration: number, easing?: EasingType): this;
    /**
     * ターゲットのアクション開始時の倍率に指定した倍率を掛け合わせた倍率に拡縮するアクションを追加する。
     * @param scaleX X方向の倍率
     * @param scaleY Y方向の倍率
     * @param duration 変化に要する時間（ミリ秒）
     * @param easing Easing関数（指定しない場合は`Easing.linear`）
     */
    scaleBy(scaleX: number, scaleY: number, duration: number, easing?: EasingType): this;
    /**
     * Tweenが破棄されたかどうかを返す。
     * `_target`が破棄された場合又は、全アクションの実行が終了した場合に`true`を返す。
     */
    destroyed(): boolean;
    /**
     * アニメーションを実行する。
     * @param delta 前フレームからの経過時間
     */
    _fire(delta: number): void;
    /**
     * Tweenの実行状態をシリアライズして返す。
     */
    serializeState(): TweenStateSerialization;
    /**
     * Tweenの実行状態を復元する。
     * @param serializedstate 復元に使う情報。
     */
    deserializeState(serializedState: TweenStateSerialization): void;
    /**
     * `this._pararel`が`false`の場合は新規にステップを作成し、アクションを追加する。
     * `this._pararel`が`true`の場合は最後に作成したステップにアクションを追加する。
     */
    private _push(action);
    private _initAction(action);
}
export = Tween;
