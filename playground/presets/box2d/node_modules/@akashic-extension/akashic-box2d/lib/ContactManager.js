"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var box2dweb = require("box2dweb");
/**
 * 衝突判定を管理するクラス。
 */
var ContactManager = /** @class */ (function () {
    /**
     * `ContactManager` のインスタンスを生成する。
     * @param param `ContactManager` の生成オプション
     */
    function ContactManager(param) {
        var _this = this;
        this._beginContactTriggerMap = {};
        this._endContactTriggerMap = {};
        this.box2d = param.box2d;
        var contactListener = new box2dweb.Dynamics.b2ContactListener();
        contactListener.BeginContact = function (contact) {
            var bodyA = _this.box2d.getEBodyFromb2Body(contact.GetFixtureA().GetBody());
            if (bodyA == null) {
                return;
            }
            var bodyB = _this.box2d.getEBodyFromb2Body(contact.GetFixtureB().GetBody());
            if (bodyB == null) {
                return;
            }
            var id1 = bodyA.id + "-" + bodyB.id;
            var id2 = bodyB.id + "-" + bodyA.id;
            var trigger1 = _this._beginContactTriggerMap[id1];
            var trigger2 = _this._beginContactTriggerMap[id2];
            if (trigger1 && !trigger1.destroyed()) {
                trigger1.fire();
            }
            else if (trigger2 && !trigger2.destroyed()) {
                trigger2.fire();
            }
        };
        contactListener.EndContact = function (contact) {
            var bodyA = _this.box2d.getEBodyFromb2Body(contact.GetFixtureA().GetBody());
            if (bodyA == null) {
                return;
            }
            var bodyB = _this.box2d.getEBodyFromb2Body(contact.GetFixtureB().GetBody());
            if (bodyB == null) {
                return;
            }
            var id1 = bodyA.id + "-" + bodyB.id;
            var id2 = bodyB.id + "-" + bodyA.id;
            var trigger1 = _this._endContactTriggerMap[id1];
            var trigger2 = _this._endContactTriggerMap[id2];
            if (trigger1 && !trigger1.destroyed()) {
                trigger1.fire();
            }
            else if (trigger2 && !trigger2.destroyed()) {
                trigger2.fire();
            }
        };
        this.box2d.world.SetContactListener(contactListener);
    }
    /**
     * このクラスのインスタンスを破棄する。
     */
    ContactManager.prototype.destroy = function () {
        var _this = this;
        this.box2d = undefined;
        Object.keys(this._beginContactTriggerMap).forEach(function (k) {
            _this._beginContactTriggerMap[k].destroy();
        });
        this._beginContactTriggerMap = undefined;
        Object.keys(this._endContactTriggerMap).forEach(function (k) {
            _this._endContactTriggerMap[k].destroy();
        });
        this._beginContactTriggerMap = undefined;
    };
    /**
     * このクラスのインスタンスが破棄済みであるかを返す。
     */
    ContactManager.prototype.destroyed = function () {
        return this.box2d === undefined;
    };
    /**
     * `EBody` 同士の接触開始を検出する `g.Trigger` を生成する。
     * @param bodyA 対象のボディ
     * @param bodyB 対象のボディ
     */
    ContactManager.prototype.createBeginContactTrigger = function (bodyA, bodyB) {
        var id = bodyA.id + "-" + bodyB.id;
        var trigger = this._beginContactTriggerMap[id];
        if (trigger) {
            return trigger;
        }
        else {
            this._beginContactTriggerMap[id] = new g.Trigger();
            return this._beginContactTriggerMap[id];
        }
    };
    /**
     * `EBody` 同士の接触開始を検出する `g.Trigger` を削除する。
     * @param bodyA 対象のボディ
     * @param bodyB 対象のボディ
     */
    ContactManager.prototype.removeBeginContactTrigger = function (bodyA, bodyB) {
        var idA = bodyA.id;
        var idB = bodyB.id;
        var id1 = idA + "-" + idB;
        var id2 = idB + "-" + idA;
        if (this._beginContactTriggerMap[id1]) {
            var trigger = this._beginContactTriggerMap[id1];
            if (!trigger.destroyed()) {
                trigger.destroy();
            }
            delete this._beginContactTriggerMap[id1];
            return true;
        }
        else if (this._beginContactTriggerMap[id2]) {
            var trigger = this._beginContactTriggerMap[id2];
            if (!trigger.destroyed()) {
                trigger.destroy();
            }
            delete this._beginContactTriggerMap[id2];
            return true;
        }
        return false;
    };
    /**
     * `EBody` 同士の接触終了を検出する `g.Trigger` を生成する。
     * @param bodyA 対象のボディ
     * @param bodyB 対象のボディ
     */
    ContactManager.prototype.createEndContactTrigger = function (bodyA, bodyB) {
        var id = bodyA.id + "-" + bodyB.id;
        var trigger = this._endContactTriggerMap[id];
        if (trigger) {
            return trigger;
        }
        else {
            this._endContactTriggerMap[id] = new g.Trigger();
            return this._endContactTriggerMap[id];
        }
    };
    /**
     * `EBody` 同士の接触終了を検出する `g.Trigger` を削除する。
     * @param bodyA 対象のボディ
     * @param bodyB 対象のボディ
     */
    ContactManager.prototype.removeEndContactTrigger = function (bodyA, bodyB) {
        var idA = bodyA.id;
        var idB = bodyB.id;
        var id1 = idA + "-" + idB;
        var id2 = idB + "-" + idA;
        if (this._endContactTriggerMap[id1]) {
            var trigger = this._endContactTriggerMap[id1];
            if (!trigger.destroyed()) {
                trigger.destroy();
            }
            delete this._endContactTriggerMap[id1];
            return true;
        }
        else if (this._endContactTriggerMap[id2]) {
            var trigger = this._endContactTriggerMap[id2];
            if (!trigger.destroyed()) {
                trigger.destroy();
            }
            delete this._endContactTriggerMap[id2];
            return true;
        }
        return false;
    };
    return ContactManager;
}());
exports.ContactManager = ContactManager;
