"use strict";
var Tween = require("./Tween");
/**
 * タイムライン機能を提供するクラス。
 */
var Timeline = /** @class */ (function () {
    /**
     * Timelineを生成する。
     * @param scene タイムラインを実行する `Scene`
     */
    function Timeline(scene) {
        this._scene = scene;
        this._tweens = [];
        this._fps = this._scene.game.fps;
        this.paused = false;
        scene.update.add(this._handler, this);
    }
    /**
     * Timelineに紐付いたTweenを生成する。
     * @param target タイムライン処理の対象にするオブジェクト
     * @param option Tweenの生成オプション。省略された場合、 {modified: target.modified, destroyed: target.destroyed} が与えられた時と同様の処理を行う。
     */
    Timeline.prototype.create = function (target, option) {
        var t = new Tween(target, option);
        this._tweens.push(t);
        return t;
    };
    /**
     * Timelineに紐付いたTweenを削除する。
     * @param tween 削除するTween。
     */
    Timeline.prototype.remove = function (tween) {
        var index = this._tweens.indexOf(tween);
        if (index < 0) {
            return;
        }
        this._tweens.splice(index, 1);
    };
    /**
     * Timelineに紐付いた全Tweenのアクションを完了させる。詳細は `Tween#complete()`の説明を参照。
     */
    Timeline.prototype.completeAll = function () {
        for (var i = 0; i < this._tweens.length; ++i) {
            var tween = this._tweens[i];
            if (!tween.isFinished()) {
                tween.complete();
            }
        }
        this.clear();
    };
    /**
     * Timelineに紐付いた全Tweenのアクションを取り消す。詳細は `Tween#cancel()`の説明を参照。
     * @param revert ターゲットのプロパティをアクション開始前に戻すかどうか (指定しない場合は `false`)
     */
    Timeline.prototype.cancelAll = function (revert) {
        if (revert === void 0) { revert = false; }
        if (!revert) {
            this.clear();
            return;
        }
        for (var i = 0; i < this._tweens.length; ++i) {
            var tween = this._tweens[i];
            if (!tween.isFinished()) {
                tween.cancel(true);
            }
        }
        this.clear();
    };
    /**
     * Timelineに紐付いた全Tweenの紐付けを解除する。
     */
    Timeline.prototype.clear = function () {
        this._tweens.length = 0;
    };
    /**
     * このTimelineを破棄する。
     */
    Timeline.prototype.destroy = function () {
        this._tweens.length = 0;
        if (!this._scene.destroyed()) {
            this._scene.update.remove(this._handler, this);
        }
        this._scene = undefined;
    };
    /**
     * このTimelineが破棄済みであるかを返す。
     */
    Timeline.prototype.destroyed = function () {
        return this._scene === undefined;
    };
    Timeline.prototype._handler = function () {
        if (this._tweens.length === 0 || this.paused) {
            return;
        }
        var tmp = [];
        for (var i = 0; i < this._tweens.length; ++i) {
            var tween = this._tweens[i];
            if (!tween.isFinished()) {
                tween._fire(1000 / this._fps);
                tmp.push(tween);
            }
        }
        this._tweens = tmp;
    };
    return Timeline;
}());
module.exports = Timeline;
